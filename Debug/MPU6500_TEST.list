
MPU6500_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004250  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004420  08004420  00005420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004494  08004494  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004494  08004494  00005494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800449c  0800449c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800449c  0800449c  0000549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044a4  080044a4  000054a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080044a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  08004504  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004504  00006268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b58f  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3b  00000000  00000000  0001161b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  00013258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b8  00000000  00000000  00013c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023883  00000000  00000000  000143f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d905  00000000  00000000  00037c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb5d0  00000000  00000000  00045580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110b50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e38  00000000  00000000  00110b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001139cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004408 	.word	0x08004408

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004408 	.word	0x08004408

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000638:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800063c:	f000 b96a 	b.w	8000914 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9d08      	ldr	r5, [sp, #32]
 800065e:	460c      	mov	r4, r1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d14e      	bne.n	8000702 <__udivmoddi4+0xaa>
 8000664:	4694      	mov	ip, r2
 8000666:	458c      	cmp	ip, r1
 8000668:	4686      	mov	lr, r0
 800066a:	fab2 f282 	clz	r2, r2
 800066e:	d962      	bls.n	8000736 <__udivmoddi4+0xde>
 8000670:	b14a      	cbz	r2, 8000686 <__udivmoddi4+0x2e>
 8000672:	f1c2 0320 	rsb	r3, r2, #32
 8000676:	4091      	lsls	r1, r2
 8000678:	fa20 f303 	lsr.w	r3, r0, r3
 800067c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000680:	4319      	orrs	r1, r3
 8000682:	fa00 fe02 	lsl.w	lr, r0, r2
 8000686:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800068a:	fa1f f68c 	uxth.w	r6, ip
 800068e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000692:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000696:	fb07 1114 	mls	r1, r7, r4, r1
 800069a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800069e:	fb04 f106 	mul.w	r1, r4, r6
 80006a2:	4299      	cmp	r1, r3
 80006a4:	d90a      	bls.n	80006bc <__udivmoddi4+0x64>
 80006a6:	eb1c 0303 	adds.w	r3, ip, r3
 80006aa:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80006ae:	f080 8112 	bcs.w	80008d6 <__udivmoddi4+0x27e>
 80006b2:	4299      	cmp	r1, r3
 80006b4:	f240 810f 	bls.w	80008d6 <__udivmoddi4+0x27e>
 80006b8:	3c02      	subs	r4, #2
 80006ba:	4463      	add	r3, ip
 80006bc:	1a59      	subs	r1, r3, r1
 80006be:	fa1f f38e 	uxth.w	r3, lr
 80006c2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006c6:	fb07 1110 	mls	r1, r7, r0, r1
 80006ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ce:	fb00 f606 	mul.w	r6, r0, r6
 80006d2:	429e      	cmp	r6, r3
 80006d4:	d90a      	bls.n	80006ec <__udivmoddi4+0x94>
 80006d6:	eb1c 0303 	adds.w	r3, ip, r3
 80006da:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80006de:	f080 80fc 	bcs.w	80008da <__udivmoddi4+0x282>
 80006e2:	429e      	cmp	r6, r3
 80006e4:	f240 80f9 	bls.w	80008da <__udivmoddi4+0x282>
 80006e8:	4463      	add	r3, ip
 80006ea:	3802      	subs	r0, #2
 80006ec:	1b9b      	subs	r3, r3, r6
 80006ee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006f2:	2100      	movs	r1, #0
 80006f4:	b11d      	cbz	r5, 80006fe <__udivmoddi4+0xa6>
 80006f6:	40d3      	lsrs	r3, r2
 80006f8:	2200      	movs	r2, #0
 80006fa:	e9c5 3200 	strd	r3, r2, [r5]
 80006fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000702:	428b      	cmp	r3, r1
 8000704:	d905      	bls.n	8000712 <__udivmoddi4+0xba>
 8000706:	b10d      	cbz	r5, 800070c <__udivmoddi4+0xb4>
 8000708:	e9c5 0100 	strd	r0, r1, [r5]
 800070c:	2100      	movs	r1, #0
 800070e:	4608      	mov	r0, r1
 8000710:	e7f5      	b.n	80006fe <__udivmoddi4+0xa6>
 8000712:	fab3 f183 	clz	r1, r3
 8000716:	2900      	cmp	r1, #0
 8000718:	d146      	bne.n	80007a8 <__udivmoddi4+0x150>
 800071a:	42a3      	cmp	r3, r4
 800071c:	d302      	bcc.n	8000724 <__udivmoddi4+0xcc>
 800071e:	4290      	cmp	r0, r2
 8000720:	f0c0 80f0 	bcc.w	8000904 <__udivmoddi4+0x2ac>
 8000724:	1a86      	subs	r6, r0, r2
 8000726:	eb64 0303 	sbc.w	r3, r4, r3
 800072a:	2001      	movs	r0, #1
 800072c:	2d00      	cmp	r5, #0
 800072e:	d0e6      	beq.n	80006fe <__udivmoddi4+0xa6>
 8000730:	e9c5 6300 	strd	r6, r3, [r5]
 8000734:	e7e3      	b.n	80006fe <__udivmoddi4+0xa6>
 8000736:	2a00      	cmp	r2, #0
 8000738:	f040 8090 	bne.w	800085c <__udivmoddi4+0x204>
 800073c:	eba1 040c 	sub.w	r4, r1, ip
 8000740:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000744:	fa1f f78c 	uxth.w	r7, ip
 8000748:	2101      	movs	r1, #1
 800074a:	fbb4 f6f8 	udiv	r6, r4, r8
 800074e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000752:	fb08 4416 	mls	r4, r8, r6, r4
 8000756:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800075a:	fb07 f006 	mul.w	r0, r7, r6
 800075e:	4298      	cmp	r0, r3
 8000760:	d908      	bls.n	8000774 <__udivmoddi4+0x11c>
 8000762:	eb1c 0303 	adds.w	r3, ip, r3
 8000766:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x11a>
 800076c:	4298      	cmp	r0, r3
 800076e:	f200 80cd 	bhi.w	800090c <__udivmoddi4+0x2b4>
 8000772:	4626      	mov	r6, r4
 8000774:	1a1c      	subs	r4, r3, r0
 8000776:	fa1f f38e 	uxth.w	r3, lr
 800077a:	fbb4 f0f8 	udiv	r0, r4, r8
 800077e:	fb08 4410 	mls	r4, r8, r0, r4
 8000782:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000786:	fb00 f707 	mul.w	r7, r0, r7
 800078a:	429f      	cmp	r7, r3
 800078c:	d908      	bls.n	80007a0 <__udivmoddi4+0x148>
 800078e:	eb1c 0303 	adds.w	r3, ip, r3
 8000792:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000796:	d202      	bcs.n	800079e <__udivmoddi4+0x146>
 8000798:	429f      	cmp	r7, r3
 800079a:	f200 80b0 	bhi.w	80008fe <__udivmoddi4+0x2a6>
 800079e:	4620      	mov	r0, r4
 80007a0:	1bdb      	subs	r3, r3, r7
 80007a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007a6:	e7a5      	b.n	80006f4 <__udivmoddi4+0x9c>
 80007a8:	f1c1 0620 	rsb	r6, r1, #32
 80007ac:	408b      	lsls	r3, r1
 80007ae:	fa22 f706 	lsr.w	r7, r2, r6
 80007b2:	431f      	orrs	r7, r3
 80007b4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007b8:	fa04 f301 	lsl.w	r3, r4, r1
 80007bc:	ea43 030c 	orr.w	r3, r3, ip
 80007c0:	40f4      	lsrs	r4, r6
 80007c2:	fa00 f801 	lsl.w	r8, r0, r1
 80007c6:	0c38      	lsrs	r0, r7, #16
 80007c8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007cc:	fbb4 fef0 	udiv	lr, r4, r0
 80007d0:	fa1f fc87 	uxth.w	ip, r7
 80007d4:	fb00 441e 	mls	r4, r0, lr, r4
 80007d8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007dc:	fb0e f90c 	mul.w	r9, lr, ip
 80007e0:	45a1      	cmp	r9, r4
 80007e2:	fa02 f201 	lsl.w	r2, r2, r1
 80007e6:	d90a      	bls.n	80007fe <__udivmoddi4+0x1a6>
 80007e8:	193c      	adds	r4, r7, r4
 80007ea:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80007ee:	f080 8084 	bcs.w	80008fa <__udivmoddi4+0x2a2>
 80007f2:	45a1      	cmp	r9, r4
 80007f4:	f240 8081 	bls.w	80008fa <__udivmoddi4+0x2a2>
 80007f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80007fc:	443c      	add	r4, r7
 80007fe:	eba4 0409 	sub.w	r4, r4, r9
 8000802:	fa1f f983 	uxth.w	r9, r3
 8000806:	fbb4 f3f0 	udiv	r3, r4, r0
 800080a:	fb00 4413 	mls	r4, r0, r3, r4
 800080e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000812:	fb03 fc0c 	mul.w	ip, r3, ip
 8000816:	45a4      	cmp	ip, r4
 8000818:	d907      	bls.n	800082a <__udivmoddi4+0x1d2>
 800081a:	193c      	adds	r4, r7, r4
 800081c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000820:	d267      	bcs.n	80008f2 <__udivmoddi4+0x29a>
 8000822:	45a4      	cmp	ip, r4
 8000824:	d965      	bls.n	80008f2 <__udivmoddi4+0x29a>
 8000826:	3b02      	subs	r3, #2
 8000828:	443c      	add	r4, r7
 800082a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800082e:	fba0 9302 	umull	r9, r3, r0, r2
 8000832:	eba4 040c 	sub.w	r4, r4, ip
 8000836:	429c      	cmp	r4, r3
 8000838:	46ce      	mov	lr, r9
 800083a:	469c      	mov	ip, r3
 800083c:	d351      	bcc.n	80008e2 <__udivmoddi4+0x28a>
 800083e:	d04e      	beq.n	80008de <__udivmoddi4+0x286>
 8000840:	b155      	cbz	r5, 8000858 <__udivmoddi4+0x200>
 8000842:	ebb8 030e 	subs.w	r3, r8, lr
 8000846:	eb64 040c 	sbc.w	r4, r4, ip
 800084a:	fa04 f606 	lsl.w	r6, r4, r6
 800084e:	40cb      	lsrs	r3, r1
 8000850:	431e      	orrs	r6, r3
 8000852:	40cc      	lsrs	r4, r1
 8000854:	e9c5 6400 	strd	r6, r4, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	e750      	b.n	80006fe <__udivmoddi4+0xa6>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f103 	lsr.w	r1, r0, r3
 8000864:	fa0c fc02 	lsl.w	ip, ip, r2
 8000868:	fa24 f303 	lsr.w	r3, r4, r3
 800086c:	4094      	lsls	r4, r2
 800086e:	430c      	orrs	r4, r1
 8000870:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000874:	fa00 fe02 	lsl.w	lr, r0, r2
 8000878:	fa1f f78c 	uxth.w	r7, ip
 800087c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000880:	fb08 3110 	mls	r1, r8, r0, r3
 8000884:	0c23      	lsrs	r3, r4, #16
 8000886:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800088a:	fb00 f107 	mul.w	r1, r0, r7
 800088e:	4299      	cmp	r1, r3
 8000890:	d908      	bls.n	80008a4 <__udivmoddi4+0x24c>
 8000892:	eb1c 0303 	adds.w	r3, ip, r3
 8000896:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800089a:	d22c      	bcs.n	80008f6 <__udivmoddi4+0x29e>
 800089c:	4299      	cmp	r1, r3
 800089e:	d92a      	bls.n	80008f6 <__udivmoddi4+0x29e>
 80008a0:	3802      	subs	r0, #2
 80008a2:	4463      	add	r3, ip
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b2a4      	uxth	r4, r4
 80008a8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008ac:	fb08 3311 	mls	r3, r8, r1, r3
 80008b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008b4:	fb01 f307 	mul.w	r3, r1, r7
 80008b8:	42a3      	cmp	r3, r4
 80008ba:	d908      	bls.n	80008ce <__udivmoddi4+0x276>
 80008bc:	eb1c 0404 	adds.w	r4, ip, r4
 80008c0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80008c4:	d213      	bcs.n	80008ee <__udivmoddi4+0x296>
 80008c6:	42a3      	cmp	r3, r4
 80008c8:	d911      	bls.n	80008ee <__udivmoddi4+0x296>
 80008ca:	3902      	subs	r1, #2
 80008cc:	4464      	add	r4, ip
 80008ce:	1ae4      	subs	r4, r4, r3
 80008d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008d4:	e739      	b.n	800074a <__udivmoddi4+0xf2>
 80008d6:	4604      	mov	r4, r0
 80008d8:	e6f0      	b.n	80006bc <__udivmoddi4+0x64>
 80008da:	4608      	mov	r0, r1
 80008dc:	e706      	b.n	80006ec <__udivmoddi4+0x94>
 80008de:	45c8      	cmp	r8, r9
 80008e0:	d2ae      	bcs.n	8000840 <__udivmoddi4+0x1e8>
 80008e2:	ebb9 0e02 	subs.w	lr, r9, r2
 80008e6:	eb63 0c07 	sbc.w	ip, r3, r7
 80008ea:	3801      	subs	r0, #1
 80008ec:	e7a8      	b.n	8000840 <__udivmoddi4+0x1e8>
 80008ee:	4631      	mov	r1, r6
 80008f0:	e7ed      	b.n	80008ce <__udivmoddi4+0x276>
 80008f2:	4603      	mov	r3, r0
 80008f4:	e799      	b.n	800082a <__udivmoddi4+0x1d2>
 80008f6:	4630      	mov	r0, r6
 80008f8:	e7d4      	b.n	80008a4 <__udivmoddi4+0x24c>
 80008fa:	46d6      	mov	lr, sl
 80008fc:	e77f      	b.n	80007fe <__udivmoddi4+0x1a6>
 80008fe:	4463      	add	r3, ip
 8000900:	3802      	subs	r0, #2
 8000902:	e74d      	b.n	80007a0 <__udivmoddi4+0x148>
 8000904:	4606      	mov	r6, r0
 8000906:	4623      	mov	r3, r4
 8000908:	4608      	mov	r0, r1
 800090a:	e70f      	b.n	800072c <__udivmoddi4+0xd4>
 800090c:	3e02      	subs	r6, #2
 800090e:	4463      	add	r3, ip
 8000910:	e730      	b.n	8000774 <__udivmoddi4+0x11c>
 8000912:	bf00      	nop

08000914 <__aeabi_idiv0>:
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <_ZN7Mpu6050C1Ev>:


extern UART_HandleTypeDef huart2; 
extern I2C_HandleTypeDef hi2c1;

Mpu6050::Mpu6050(){
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

}
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <_ZN7Mpu60504InitEv>:

void Mpu6050::Init(){
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af02      	add	r7, sp, #8
 8000936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef transmit_status;


  // turn on device
  uint8_t pwr_mgmt_1_register = 0x6B;
 8000938:	236b      	movs	r3, #107	@ 0x6b
 800093a:	75fb      	strb	r3, [r7, #23]
  uint8_t pwr_mgmt_1_data = 0x01; // 1 to use gryoscope mems and clock
 800093c:	2301      	movs	r3, #1
 800093e:	75bb      	strb	r3, [r7, #22]
  uint8_t data[2] = {pwr_mgmt_1_register, pwr_mgmt_1_data};
 8000940:	7dfb      	ldrb	r3, [r7, #23]
 8000942:	743b      	strb	r3, [r7, #16]
 8000944:	7dbb      	ldrb	r3, [r7, #22]
 8000946:	747b      	strb	r3, [r7, #17]
  transmit_status = HAL_I2C_Master_Transmit(&hi2c1, Mpu6050::address,
 8000948:	f107 0210 	add.w	r2, r7, #16
 800094c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2302      	movs	r3, #2
 8000954:	21d0      	movs	r1, #208	@ 0xd0
 8000956:	480e      	ldr	r0, [pc, #56]	@ (8000990 <_ZN7Mpu60504InitEv+0x60>)
 8000958:	f001 f80c 	bl	8001974 <HAL_I2C_Master_Transmit>
 800095c:	4603      	mov	r3, r0
 800095e:	757b      	strb	r3, [r7, #21]
                                         data, 2, HAL_MAX_DELAY);

  // set accel config
  uint8_t accel_config_register = 0x1C;
 8000960:	231c      	movs	r3, #28
 8000962:	753b      	strb	r3, [r7, #20]
  uint8_t accel_config = 0x00;
 8000964:	2300      	movs	r3, #0
 8000966:	74fb      	strb	r3, [r7, #19]
  if (Mpu6050::range_Gs == 2){
	accel_config |= (0x00 << 3); // set full scale range to 2g
  }
  uint8_t accel_data[2] = {accel_config_register, accel_config};
 8000968:	7d3b      	ldrb	r3, [r7, #20]
 800096a:	733b      	strb	r3, [r7, #12]
 800096c:	7cfb      	ldrb	r3, [r7, #19]
 800096e:	737b      	strb	r3, [r7, #13]
  transmit_status = HAL_I2C_Master_Transmit(&hi2c1, Mpu6050::address,
 8000970:	f107 020c 	add.w	r2, r7, #12
 8000974:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2302      	movs	r3, #2
 800097c:	21d0      	movs	r1, #208	@ 0xd0
 800097e:	4804      	ldr	r0, [pc, #16]	@ (8000990 <_ZN7Mpu60504InitEv+0x60>)
 8000980:	f000 fff8 	bl	8001974 <HAL_I2C_Master_Transmit>
 8000984:	4603      	mov	r3, r0
 8000986:	757b      	strb	r3, [r7, #21]
                                         accel_data, 2, HAL_MAX_DELAY);
}
 8000988:	bf00      	nop
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000078 	.word	0x20000078

08000994 <_ZN7Mpu60504ReadEv>:

void Mpu6050::Read(){
 8000994:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000998:	b09c      	sub	sp, #112	@ 0x70
 800099a:	af04      	add	r7, sp, #16
 800099c:	6078      	str	r0, [r7, #4]

  // float x_accel, y_accel, z_accel;
  uint8_t accel_data_register = 0x3B;
 800099e:	233b      	movs	r3, #59	@ 0x3b
 80009a0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  HAL_StatusTypeDef transmit_status = HAL_I2C_Master_Transmit(&hi2c1, Mpu6050::address,
 80009a4:	f107 0243 	add.w	r2, r7, #67	@ 0x43
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2301      	movs	r3, #1
 80009b0:	21d0      	movs	r1, #208	@ 0xd0
 80009b2:	4840      	ldr	r0, [pc, #256]	@ (8000ab4 <_ZN7Mpu60504ReadEv+0x120>)
 80009b4:	f000 ffde 	bl	8001974 <HAL_I2C_Master_Transmit>
 80009b8:	4603      	mov	r3, r0
 80009ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                         &accel_data_register, 1, HAL_MAX_DELAY);
    
  uint8_t raw_accel_data[6];
  HAL_StatusTypeDef read_status = HAL_I2C_Master_Receive(&hi2c1, Mpu6050::address,
 80009be:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	2306      	movs	r3, #6
 80009ca:	21d0      	movs	r1, #208	@ 0xd0
 80009cc:	4839      	ldr	r0, [pc, #228]	@ (8000ab4 <_ZN7Mpu60504ReadEv+0x120>)
 80009ce:	f001 f8cf 	bl	8001b70 <HAL_I2C_Master_Receive>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
                                              raw_accel_data, 6, HAL_MAX_DELAY);

  int16_t raw_x_accel = raw_accel_data[0] << 8 | raw_accel_data[1];
 80009d8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80009dc:	021b      	lsls	r3, r3, #8
 80009de:	b21a      	sxth	r2, r3
 80009e0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  int16_t raw_y_accel = raw_accel_data[2] << 8 | raw_accel_data[3];
 80009ec:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	4313      	orrs	r3, r2
 80009fc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  int16_t raw_z_accel = raw_accel_data[4] << 8 | raw_accel_data[5];
 8000a00:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000a04:	021b      	lsls	r3, r3, #8
 8000a06:	b21a      	sxth	r2, r3
 8000a08:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

  float scale_factor = 0x7FFF / Mpu6050::range_Gs;
 8000a14:	4b28      	ldr	r3, [pc, #160]	@ (8000ab8 <_ZN7Mpu60504ReadEv+0x124>)
 8000a16:	657b      	str	r3, [r7, #84]	@ 0x54
  float x_accel = raw_x_accel / scale_factor;
 8000a18:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a24:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a2c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
  float y_accel = raw_y_accel / scale_factor;
 8000a30:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8000a34:	ee07 3a90 	vmov	s15, r3
 8000a38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a3c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a44:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
  float z_accel = raw_z_accel / scale_factor;
 8000a48:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8000a4c:	ee07 3a90 	vmov	s15, r3
 8000a50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a54:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a5c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

  char buffer[50];
  int len = sprintf(buffer, "x_accel %d,  y_accel %d, z_accel %d\r\n", x_accel, y_accel, z_accel);
 8000a60:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000a62:	f7ff fd89 	bl	8000578 <__aeabi_f2d>
 8000a66:	4680      	mov	r8, r0
 8000a68:	4689      	mov	r9, r1
 8000a6a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000a6c:	f7ff fd84 	bl	8000578 <__aeabi_f2d>
 8000a70:	4604      	mov	r4, r0
 8000a72:	460d      	mov	r5, r1
 8000a74:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000a76:	f7ff fd7f 	bl	8000578 <__aeabi_f2d>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	f107 0008 	add.w	r0, r7, #8
 8000a82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000a86:	e9cd 4500 	strd	r4, r5, [sp]
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	464b      	mov	r3, r9
 8000a8e:	490b      	ldr	r1, [pc, #44]	@ (8000abc <_ZN7Mpu60504ReadEv+0x128>)
 8000a90:	f003 f81a 	bl	8003ac8 <siprintf>
 8000a94:	6478      	str	r0, [r7, #68]	@ 0x44
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len,  HAL_MAX_DELAY);
 8000a96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	f107 0108 	add.w	r1, r7, #8
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aa2:	4807      	ldr	r0, [pc, #28]	@ (8000ac0 <_ZN7Mpu60504ReadEv+0x12c>)
 8000aa4:	f002 fc54 	bl	8003350 <HAL_UART_Transmit>

   
}
 8000aa8:	bf00      	nop
 8000aaa:	3760      	adds	r7, #96	@ 0x60
 8000aac:	46bd      	mov	sp, r7
 8000aae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000078 	.word	0x20000078
 8000ab8:	467ffc00 	.word	0x467ffc00
 8000abc:	08004420 	.word	0x08004420
 8000ac0:	200000cc 	.word	0x200000cc

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac8:	f000 fae6 	bl	8001098 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000acc:	f000 f80c 	bl	8000ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad0:	f000 f8d0 	bl	8000c74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ad4:	f000 f8a4 	bl	8000c20 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ad8:	f000 f874 	bl	8000bc4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Main_Wrapper_Init();
 8000adc:	f000 f93e 	bl	8000d5c <Main_Wrapper_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Main_Wrapper_Loop();
 8000ae0:	f000 f946 	bl	8000d70 <Main_Wrapper_Loop>
 8000ae4:	e7fc      	b.n	8000ae0 <main+0x1c>
	...

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b094      	sub	sp, #80	@ 0x50
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2234      	movs	r2, #52	@ 0x34
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f003 f806 	bl	8003b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	4b2a      	ldr	r3, [pc, #168]	@ (8000bbc <SystemClock_Config+0xd4>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	4a29      	ldr	r2, [pc, #164]	@ (8000bbc <SystemClock_Config+0xd4>)
 8000b16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1c:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <SystemClock_Config+0xd4>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b28:	2300      	movs	r3, #0
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <SystemClock_Config+0xd8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b34:	4a22      	ldr	r2, [pc, #136]	@ (8000bc0 <SystemClock_Config+0xd8>)
 8000b36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	4b20      	ldr	r3, [pc, #128]	@ (8000bc0 <SystemClock_Config+0xd8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b50:	2310      	movs	r3, #16
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b54:	2302      	movs	r3, #2
 8000b56:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b60:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b64:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b66:	2304      	movs	r3, #4
 8000b68:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 f8fc 	bl	8002d74 <HAL_RCC_OscConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b82:	f000 f8e5 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b86:	230f      	movs	r3, #15
 8000b88:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 fd9c 	bl	80026e0 <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000bae:	f000 f8cf 	bl	8000d50 <Error_Handler>
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3750      	adds	r7, #80	@ 0x50
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40007000 	.word	0x40007000

08000bc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bca:	4a13      	ldr	r2, [pc, #76]	@ (8000c18 <MX_I2C1_Init+0x54>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bd0:	4a12      	ldr	r2, [pc, #72]	@ (8000c1c <MX_I2C1_Init+0x58>)
 8000bd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000be2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000be6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c00:	4804      	ldr	r0, [pc, #16]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000c02:	f000 fd73 	bl	80016ec <HAL_I2C_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c0c:	f000 f8a0 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000078 	.word	0x20000078
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	00061a80 	.word	0x00061a80

08000c20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <MX_USART2_UART_Init+0x50>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c58:	f002 fb2a 	bl	80032b0 <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c62:	f000 f875 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000cc 	.word	0x200000cc
 8000c70:	40004400 	.word	0x40004400

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d44 <MX_GPIO_Init+0xd0>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a2c      	ldr	r2, [pc, #176]	@ (8000d44 <MX_GPIO_Init+0xd0>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d44 <MX_GPIO_Init+0xd0>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b26      	ldr	r3, [pc, #152]	@ (8000d44 <MX_GPIO_Init+0xd0>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a25      	ldr	r2, [pc, #148]	@ (8000d44 <MX_GPIO_Init+0xd0>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b23      	ldr	r3, [pc, #140]	@ (8000d44 <MX_GPIO_Init+0xd0>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d44 <MX_GPIO_Init+0xd0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a1e      	ldr	r2, [pc, #120]	@ (8000d44 <MX_GPIO_Init+0xd0>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <MX_GPIO_Init+0xd0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <MX_GPIO_Init+0xd0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a17      	ldr	r2, [pc, #92]	@ (8000d44 <MX_GPIO_Init+0xd0>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <MX_GPIO_Init+0xd0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	4812      	ldr	r0, [pc, #72]	@ (8000d48 <MX_GPIO_Init+0xd4>)
 8000d00:	f000 fcda 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d0a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <MX_GPIO_Init+0xd8>)
 8000d1c:	f000 fb38 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : G_LED_Pin */
  GPIO_InitStruct.Pin = G_LED_Pin;
 8000d20:	2320      	movs	r3, #32
 8000d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(G_LED_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4804      	ldr	r0, [pc, #16]	@ (8000d48 <MX_GPIO_Init+0xd4>)
 8000d38:	f000 fb2a 	bl	8001390 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	@ 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40020800 	.word	0x40020800

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <Error_Handler+0x8>

08000d5c <Main_Wrapper_Init>:

extern "C" {

Mpu6050 mpu6050;

void Main_Wrapper_Init(){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  mpu6050.Init();
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <Main_Wrapper_Init+0x10>)
 8000d62:	f7ff fde5 	bl	8000930 <_ZN7Mpu60504InitEv>
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000114 	.word	0x20000114

08000d70 <Main_Wrapper_Loop>:

void Main_Wrapper_Loop(){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  mpu6050.Read();
 8000d74:	480a      	ldr	r0, [pc, #40]	@ (8000da0 <Main_Wrapper_Loop+0x30>)
 8000d76:	f7ff fe0d 	bl	8000994 <_ZN7Mpu60504ReadEv>
  
  // LED blink
  HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2120      	movs	r1, #32
 8000d7e:	4809      	ldr	r0, [pc, #36]	@ (8000da4 <Main_Wrapper_Loop+0x34>)
 8000d80:	f000 fc9a 	bl	80016b8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000d84:	20c8      	movs	r0, #200	@ 0xc8
 8000d86:	f000 f9f9 	bl	800117c <HAL_Delay>
  HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <Main_Wrapper_Loop+0x34>)
 8000d90:	f000 fc92 	bl	80016b8 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000d94:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000d98:	f000 f9f0 	bl	800117c <HAL_Delay>


}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000114 	.word	0x20000114
 8000da4:	40020000 	.word	0x40020000

08000da8 <_Z41__static_initialization_and_destruction_0ii>:


 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d107      	bne.n	8000dc8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d102      	bne.n	8000dc8 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mpu6050 mpu6050;
 8000dc2:	4803      	ldr	r0, [pc, #12]	@ (8000dd0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000dc4:	f7ff fda8 	bl	8000918 <_ZN7Mpu6050C1Ev>
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000114 	.word	0x20000114

08000dd4 <_GLOBAL__sub_I_mpu6050>:
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff ffe3 	bl	8000da8 <_Z41__static_initialization_and_destruction_0ii>
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <HAL_MspInit+0x4c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e30 <HAL_MspInit+0x4c>)
 8000df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <HAL_MspInit+0x4c>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <HAL_MspInit+0x4c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	4a08      	ldr	r2, [pc, #32]	@ (8000e30 <HAL_MspInit+0x4c>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_MspInit+0x4c>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e22:	2007      	movs	r0, #7
 8000e24:	f000 fa80 	bl	8001328 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40023800 	.word	0x40023800

08000e34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	@ 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a19      	ldr	r2, [pc, #100]	@ (8000eb8 <HAL_I2C_MspInit+0x84>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d12c      	bne.n	8000eb0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <HAL_I2C_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a17      	ldr	r2, [pc, #92]	@ (8000ebc <HAL_I2C_MspInit+0x88>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <HAL_I2C_MspInit+0x88>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e78:	2312      	movs	r3, #18
 8000e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e84:	2304      	movs	r3, #4
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480c      	ldr	r0, [pc, #48]	@ (8000ec0 <HAL_I2C_MspInit+0x8c>)
 8000e90:	f000 fa7e 	bl	8001390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <HAL_I2C_MspInit+0x88>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9c:	4a07      	ldr	r2, [pc, #28]	@ (8000ebc <HAL_I2C_MspInit+0x88>)
 8000e9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ea2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <HAL_I2C_MspInit+0x88>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	@ 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40005400 	.word	0x40005400
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020400 	.word	0x40020400

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	@ 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a19      	ldr	r2, [pc, #100]	@ (8000f48 <HAL_UART_MspInit+0x84>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d12b      	bne.n	8000f3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <HAL_UART_MspInit+0x88>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	4a17      	ldr	r2, [pc, #92]	@ (8000f4c <HAL_UART_MspInit+0x88>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef6:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <HAL_UART_MspInit+0x88>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <HAL_UART_MspInit+0x88>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	4a10      	ldr	r2, [pc, #64]	@ (8000f4c <HAL_UART_MspInit+0x88>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f12:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <HAL_UART_MspInit+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f1e:	230c      	movs	r3, #12
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <HAL_UART_MspInit+0x8c>)
 8000f3a:	f000 fa29 	bl	8001390 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f3e:	bf00      	nop
 8000f40:	3728      	adds	r7, #40	@ 0x28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40004400 	.word	0x40004400
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <NMI_Handler+0x4>

08000f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000faa:	f000 f8c7 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fbc:	4a14      	ldr	r2, [pc, #80]	@ (8001010 <_sbrk+0x5c>)
 8000fbe:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <_sbrk+0x60>)
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc8:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d102      	bne.n	8000fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <_sbrk+0x64>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	@ (800101c <_sbrk+0x68>)
 8000fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd6:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d207      	bcs.n	8000ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe4:	f002 fd98 	bl	8003b18 <__errno>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	220c      	movs	r2, #12
 8000fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ff2:	e009      	b.n	8001008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffa:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	4a05      	ldr	r2, [pc, #20]	@ (8001018 <_sbrk+0x64>)
 8001004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20020000 	.word	0x20020000
 8001014:	00000400 	.word	0x00000400
 8001018:	20000118 	.word	0x20000118
 800101c:	20000268 	.word	0x20000268

08001020 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <SystemInit+0x20>)
 8001026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800102a:	4a05      	ldr	r2, [pc, #20]	@ (8001040 <SystemInit+0x20>)
 800102c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001030:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001044:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800107c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001048:	f7ff ffea 	bl	8001020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800104c:	480c      	ldr	r0, [pc, #48]	@ (8001080 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800104e:	490d      	ldr	r1, [pc, #52]	@ (8001084 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001050:	4a0d      	ldr	r2, [pc, #52]	@ (8001088 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001064:	4c0a      	ldr	r4, [pc, #40]	@ (8001090 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001072:	f002 fd57 	bl	8003b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001076:	f7ff fd25 	bl	8000ac4 <main>
  bx  lr    
 800107a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800107c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001088:	080044a8 	.word	0x080044a8
  ldr r2, =_sbss
 800108c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001090:	20000268 	.word	0x20000268

08001094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC_IRQHandler>
	...

08001098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800109c:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <HAL_Init+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <HAL_Init+0x40>)
 80010a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <HAL_Init+0x40>)
 80010ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <HAL_Init+0x40>)
 80010ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f000 f931 	bl	8001328 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 f808 	bl	80010dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010cc:	f7ff fe8a 	bl	8000de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023c00 	.word	0x40023c00

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <HAL_InitTick+0x54>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_InitTick+0x58>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f93b 	bl	8001376 <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001118:	f000 f911 	bl	800133e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <HAL_InitTick+0x5c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000000 	.word	0x20000000
 8001134:	20000008 	.word	0x20000008
 8001138:	20000004 	.word	0x20000004

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_IncTick+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <HAL_IncTick+0x24>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000008 	.word	0x20000008
 8001160:	2000011c 	.word	0x2000011c

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2000011c 	.word	0x2000011c

0800117c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001184:	f7ff ffee 	bl	8001164 <HAL_GetTick>
 8001188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001194:	d005      	beq.n	80011a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001196:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <HAL_Delay+0x44>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011a2:	bf00      	nop
 80011a4:	f7ff ffde 	bl	8001164 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8f7      	bhi.n	80011a4 <HAL_Delay+0x28>
  {
  }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008

080011c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	@ (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	@ (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	@ (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	@ 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
         );
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	@ 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f4:	d301      	bcc.n	80012fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00f      	b.n	800131a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <SysTick_Config+0x40>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001302:	210f      	movs	r1, #15
 8001304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001308:	f7ff ff8e 	bl	8001228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <SysTick_Config+0x40>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001312:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <SysTick_Config+0x40>)
 8001314:	2207      	movs	r2, #7
 8001316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	e000e010 	.word	0xe000e010

08001328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff47 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff5c 	bl	800120c <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff8e 	bl	800127c <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5d 	bl	8001228 <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ffb0 	bl	80012e4 <SysTick_Config>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	@ 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	e165      	b.n	8001678 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	f040 8154 	bne.w	8001672 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d005      	beq.n	80013e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d130      	bne.n	8001444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	2203      	movs	r2, #3
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001418:	2201      	movs	r2, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 0201 	and.w	r2, r3, #1
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b03      	cmp	r3, #3
 800144e:	d017      	beq.n	8001480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d123      	bne.n	80014d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	08da      	lsrs	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3208      	adds	r2, #8
 80014ce:	69b9      	ldr	r1, [r7, #24]
 80014d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0203 	and.w	r2, r3, #3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80ae 	beq.w	8001672 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b5d      	ldr	r3, [pc, #372]	@ (8001690 <HAL_GPIO_Init+0x300>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	4a5c      	ldr	r2, [pc, #368]	@ (8001690 <HAL_GPIO_Init+0x300>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001524:	6453      	str	r3, [r2, #68]	@ 0x44
 8001526:	4b5a      	ldr	r3, [pc, #360]	@ (8001690 <HAL_GPIO_Init+0x300>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001532:	4a58      	ldr	r2, [pc, #352]	@ (8001694 <HAL_GPIO_Init+0x304>)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	220f      	movs	r2, #15
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4f      	ldr	r2, [pc, #316]	@ (8001698 <HAL_GPIO_Init+0x308>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d025      	beq.n	80015aa <HAL_GPIO_Init+0x21a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4e      	ldr	r2, [pc, #312]	@ (800169c <HAL_GPIO_Init+0x30c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d01f      	beq.n	80015a6 <HAL_GPIO_Init+0x216>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4d      	ldr	r2, [pc, #308]	@ (80016a0 <HAL_GPIO_Init+0x310>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d019      	beq.n	80015a2 <HAL_GPIO_Init+0x212>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4c      	ldr	r2, [pc, #304]	@ (80016a4 <HAL_GPIO_Init+0x314>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0x20e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4b      	ldr	r2, [pc, #300]	@ (80016a8 <HAL_GPIO_Init+0x318>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00d      	beq.n	800159a <HAL_GPIO_Init+0x20a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4a      	ldr	r2, [pc, #296]	@ (80016ac <HAL_GPIO_Init+0x31c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d007      	beq.n	8001596 <HAL_GPIO_Init+0x206>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a49      	ldr	r2, [pc, #292]	@ (80016b0 <HAL_GPIO_Init+0x320>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d101      	bne.n	8001592 <HAL_GPIO_Init+0x202>
 800158e:	2306      	movs	r3, #6
 8001590:	e00c      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 8001592:	2307      	movs	r3, #7
 8001594:	e00a      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 8001596:	2305      	movs	r3, #5
 8001598:	e008      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 800159a:	2304      	movs	r3, #4
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 800159e:	2303      	movs	r3, #3
 80015a0:	e004      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e002      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 80015aa:	2300      	movs	r3, #0
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	f002 0203 	and.w	r2, r2, #3
 80015b2:	0092      	lsls	r2, r2, #2
 80015b4:	4093      	lsls	r3, r2
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015bc:	4935      	ldr	r1, [pc, #212]	@ (8001694 <HAL_GPIO_Init+0x304>)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	089b      	lsrs	r3, r3, #2
 80015c2:	3302      	adds	r3, #2
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ca:	4b3a      	ldr	r3, [pc, #232]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ee:	4a31      	ldr	r2, [pc, #196]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015f4:	4b2f      	ldr	r3, [pc, #188]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001618:	4a26      	ldr	r2, [pc, #152]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800161e:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001642:	4a1c      	ldr	r2, [pc, #112]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800166c:	4a11      	ldr	r2, [pc, #68]	@ (80016b4 <HAL_GPIO_Init+0x324>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3301      	adds	r3, #1
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	2b0f      	cmp	r3, #15
 800167c:	f67f ae96 	bls.w	80013ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3724      	adds	r7, #36	@ 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	40013800 	.word	0x40013800
 8001698:	40020000 	.word	0x40020000
 800169c:	40020400 	.word	0x40020400
 80016a0:	40020800 	.word	0x40020800
 80016a4:	40020c00 	.word	0x40020c00
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40021400 	.word	0x40021400
 80016b0:	40021800 	.word	0x40021800
 80016b4:	40013c00 	.word	0x40013c00

080016b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
 80016c4:	4613      	mov	r3, r2
 80016c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c8:	787b      	ldrb	r3, [r7, #1]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d4:	e003      	b.n	80016de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	041a      	lsls	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	619a      	str	r2, [r3, #24]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e12b      	b.n	8001956 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d106      	bne.n	8001718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fb8e 	bl	8000e34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2224      	movs	r2, #36	@ 0x24
 800171c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800173e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800174e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001750:	f001 f8b8 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8001754:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4a81      	ldr	r2, [pc, #516]	@ (8001960 <HAL_I2C_Init+0x274>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d807      	bhi.n	8001770 <HAL_I2C_Init+0x84>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4a80      	ldr	r2, [pc, #512]	@ (8001964 <HAL_I2C_Init+0x278>)
 8001764:	4293      	cmp	r3, r2
 8001766:	bf94      	ite	ls
 8001768:	2301      	movls	r3, #1
 800176a:	2300      	movhi	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	e006      	b.n	800177e <HAL_I2C_Init+0x92>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4a7d      	ldr	r2, [pc, #500]	@ (8001968 <HAL_I2C_Init+0x27c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	bf94      	ite	ls
 8001778:	2301      	movls	r3, #1
 800177a:	2300      	movhi	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e0e7      	b.n	8001956 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4a78      	ldr	r2, [pc, #480]	@ (800196c <HAL_I2C_Init+0x280>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0c9b      	lsrs	r3, r3, #18
 8001790:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001960 <HAL_I2C_Init+0x274>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d802      	bhi.n	80017c0 <HAL_I2C_Init+0xd4>
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3301      	adds	r3, #1
 80017be:	e009      	b.n	80017d4 <HAL_I2C_Init+0xe8>
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	4a69      	ldr	r2, [pc, #420]	@ (8001970 <HAL_I2C_Init+0x284>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	099b      	lsrs	r3, r3, #6
 80017d2:	3301      	adds	r3, #1
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	430b      	orrs	r3, r1
 80017da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	495c      	ldr	r1, [pc, #368]	@ (8001960 <HAL_I2C_Init+0x274>)
 80017f0:	428b      	cmp	r3, r1
 80017f2:	d819      	bhi.n	8001828 <HAL_I2C_Init+0x13c>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1e59      	subs	r1, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001802:	1c59      	adds	r1, r3, #1
 8001804:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001808:	400b      	ands	r3, r1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00a      	beq.n	8001824 <HAL_I2C_Init+0x138>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1e59      	subs	r1, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fbb1 f3f3 	udiv	r3, r1, r3
 800181c:	3301      	adds	r3, #1
 800181e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001822:	e051      	b.n	80018c8 <HAL_I2C_Init+0x1dc>
 8001824:	2304      	movs	r3, #4
 8001826:	e04f      	b.n	80018c8 <HAL_I2C_Init+0x1dc>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d111      	bne.n	8001854 <HAL_I2C_Init+0x168>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	1e58      	subs	r0, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	440b      	add	r3, r1
 800183e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001842:	3301      	adds	r3, #1
 8001844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001848:	2b00      	cmp	r3, #0
 800184a:	bf0c      	ite	eq
 800184c:	2301      	moveq	r3, #1
 800184e:	2300      	movne	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	e012      	b.n	800187a <HAL_I2C_Init+0x18e>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	1e58      	subs	r0, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6859      	ldr	r1, [r3, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	0099      	lsls	r1, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	fbb0 f3f3 	udiv	r3, r0, r3
 800186a:	3301      	adds	r3, #1
 800186c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf0c      	ite	eq
 8001874:	2301      	moveq	r3, #1
 8001876:	2300      	movne	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_I2C_Init+0x196>
 800187e:	2301      	movs	r3, #1
 8001880:	e022      	b.n	80018c8 <HAL_I2C_Init+0x1dc>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10e      	bne.n	80018a8 <HAL_I2C_Init+0x1bc>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1e58      	subs	r0, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6859      	ldr	r1, [r3, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	440b      	add	r3, r1
 8001898:	fbb0 f3f3 	udiv	r3, r0, r3
 800189c:	3301      	adds	r3, #1
 800189e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018a6:	e00f      	b.n	80018c8 <HAL_I2C_Init+0x1dc>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1e58      	subs	r0, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	0099      	lsls	r1, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80018be:	3301      	adds	r3, #1
 80018c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	6809      	ldr	r1, [r1, #0]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69da      	ldr	r2, [r3, #28]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6911      	ldr	r1, [r2, #16]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68d2      	ldr	r2, [r2, #12]
 8001902:	4311      	orrs	r1, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	430b      	orrs	r3, r1
 800190a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2220      	movs	r2, #32
 8001942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	000186a0 	.word	0x000186a0
 8001964:	001e847f 	.word	0x001e847f
 8001968:	003d08ff 	.word	0x003d08ff
 800196c:	431bde83 	.word	0x431bde83
 8001970:	10624dd3 	.word	0x10624dd3

08001974 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af02      	add	r7, sp, #8
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	461a      	mov	r2, r3
 8001980:	460b      	mov	r3, r1
 8001982:	817b      	strh	r3, [r7, #10]
 8001984:	4613      	mov	r3, r2
 8001986:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff fbec 	bl	8001164 <HAL_GetTick>
 800198c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b20      	cmp	r3, #32
 8001998:	f040 80e0 	bne.w	8001b5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	2319      	movs	r3, #25
 80019a2:	2201      	movs	r2, #1
 80019a4:	4970      	ldr	r1, [pc, #448]	@ (8001b68 <HAL_I2C_Master_Transmit+0x1f4>)
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 fc64 	bl	8002274 <I2C_WaitOnFlagUntilTimeout>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019b2:	2302      	movs	r3, #2
 80019b4:	e0d3      	b.n	8001b5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_I2C_Master_Transmit+0x50>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e0cc      	b.n	8001b5e <HAL_I2C_Master_Transmit+0x1ea>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d007      	beq.n	80019ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 0201 	orr.w	r2, r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2221      	movs	r2, #33	@ 0x21
 80019fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2210      	movs	r2, #16
 8001a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	893a      	ldrh	r2, [r7, #8]
 8001a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4a50      	ldr	r2, [pc, #320]	@ (8001b6c <HAL_I2C_Master_Transmit+0x1f8>)
 8001a2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a2c:	8979      	ldrh	r1, [r7, #10]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	6a3a      	ldr	r2, [r7, #32]
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 face 	bl	8001fd4 <I2C_MasterRequestWrite>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e08d      	b.n	8001b5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a58:	e066      	b.n	8001b28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	6a39      	ldr	r1, [r7, #32]
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 fd22 	bl	80024a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00d      	beq.n	8001a86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d107      	bne.n	8001a82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e06b      	b.n	8001b5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d11b      	bne.n	8001afc <HAL_I2C_Master_Transmit+0x188>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d017      	beq.n	8001afc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	6a39      	ldr	r1, [r7, #32]
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 fd19 	bl	8002538 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00d      	beq.n	8001b28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d107      	bne.n	8001b24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e01a      	b.n	8001b5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d194      	bne.n	8001a5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2220      	movs	r2, #32
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	e000      	b.n	8001b5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b5c:	2302      	movs	r3, #2
  }
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	00100002 	.word	0x00100002
 8001b6c:	ffff0000 	.word	0xffff0000

08001b70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08c      	sub	sp, #48	@ 0x30
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	817b      	strh	r3, [r7, #10]
 8001b80:	4613      	mov	r3, r2
 8001b82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff faee 	bl	8001164 <HAL_GetTick>
 8001b88:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	f040 8217 	bne.w	8001fc6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2319      	movs	r3, #25
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	497c      	ldr	r1, [pc, #496]	@ (8001d94 <HAL_I2C_Master_Receive+0x224>)
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fb66 	bl	8002274 <I2C_WaitOnFlagUntilTimeout>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e20a      	b.n	8001fc8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_I2C_Master_Receive+0x50>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e203      	b.n	8001fc8 <HAL_I2C_Master_Receive+0x458>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d007      	beq.n	8001be6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 0201 	orr.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bf4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2222      	movs	r2, #34	@ 0x22
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2210      	movs	r2, #16
 8001c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	893a      	ldrh	r2, [r7, #8]
 8001c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4a5c      	ldr	r2, [pc, #368]	@ (8001d98 <HAL_I2C_Master_Receive+0x228>)
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c28:	8979      	ldrh	r1, [r7, #10]
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 fa52 	bl	80020d8 <I2C_MasterRequestRead>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1c4      	b.n	8001fc8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d113      	bne.n	8001c6e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	623b      	str	r3, [r7, #32]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	623b      	str	r3, [r7, #32]
 8001c5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	e198      	b.n	8001fa0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d11b      	bne.n	8001cae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e178      	b.n	8001fa0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d11b      	bne.n	8001cee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	e158      	b.n	8001fa0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001cfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d14:	e144      	b.n	8001fa0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	f200 80f1 	bhi.w	8001f02 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d123      	bne.n	8001d70 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 fc4b 	bl	80025c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e145      	b.n	8001fc8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d6e:	e117      	b.n	8001fa0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d14e      	bne.n	8001e16 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d7e:	2200      	movs	r2, #0
 8001d80:	4906      	ldr	r1, [pc, #24]	@ (8001d9c <HAL_I2C_Master_Receive+0x22c>)
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 fa76 	bl	8002274 <I2C_WaitOnFlagUntilTimeout>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d008      	beq.n	8001da0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e11a      	b.n	8001fc8 <HAL_I2C_Master_Receive+0x458>
 8001d92:	bf00      	nop
 8001d94:	00100002 	.word	0x00100002
 8001d98:	ffff0000 	.word	0xffff0000
 8001d9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e14:	e0c4      	b.n	8001fa0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	496c      	ldr	r1, [pc, #432]	@ (8001fd0 <HAL_I2C_Master_Receive+0x460>)
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 fa27 	bl	8002274 <I2C_WaitOnFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0cb      	b.n	8001fc8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e78:	2200      	movs	r2, #0
 8001e7a:	4955      	ldr	r1, [pc, #340]	@ (8001fd0 <HAL_I2C_Master_Receive+0x460>)
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 f9f9 	bl	8002274 <I2C_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e09d      	b.n	8001fc8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f00:	e04e      	b.n	8001fa0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 fb5e 	bl	80025c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e058      	b.n	8001fc8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d124      	bne.n	8001fa0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d107      	bne.n	8001f6e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f6c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f47f aeb6 	bne.w	8001d16 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2220      	movs	r2, #32
 8001fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001fc6:	2302      	movs	r3, #2
  }
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3728      	adds	r7, #40	@ 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	00010004 	.word	0x00010004

08001fd4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d006      	beq.n	8001ffe <I2C_MasterRequestWrite+0x2a>
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d003      	beq.n	8001ffe <I2C_MasterRequestWrite+0x2a>
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ffc:	d108      	bne.n	8002010 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e00b      	b.n	8002028 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002014:	2b12      	cmp	r3, #18
 8002016:	d107      	bne.n	8002028 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002026:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f91d 	bl	8002274 <I2C_WaitOnFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00d      	beq.n	800205c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800204e:	d103      	bne.n	8002058 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002056:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e035      	b.n	80020c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002064:	d108      	bne.n	8002078 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002066:	897b      	ldrh	r3, [r7, #10]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002074:	611a      	str	r2, [r3, #16]
 8002076:	e01b      	b.n	80020b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002078:	897b      	ldrh	r3, [r7, #10]
 800207a:	11db      	asrs	r3, r3, #7
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f003 0306 	and.w	r3, r3, #6
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f063 030f 	orn	r3, r3, #15
 8002088:	b2da      	uxtb	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	490e      	ldr	r1, [pc, #56]	@ (80020d0 <I2C_MasterRequestWrite+0xfc>)
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f966 	bl	8002368 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e010      	b.n	80020c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020a6:	897b      	ldrh	r3, [r7, #10]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	4907      	ldr	r1, [pc, #28]	@ (80020d4 <I2C_MasterRequestWrite+0x100>)
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f956 	bl	8002368 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	00010008 	.word	0x00010008
 80020d4:	00010002 	.word	0x00010002

080020d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af02      	add	r7, sp, #8
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	460b      	mov	r3, r1
 80020e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80020fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b08      	cmp	r3, #8
 8002102:	d006      	beq.n	8002112 <I2C_MasterRequestRead+0x3a>
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d003      	beq.n	8002112 <I2C_MasterRequestRead+0x3a>
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002110:	d108      	bne.n	8002124 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e00b      	b.n	800213c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002128:	2b11      	cmp	r3, #17
 800212a:	d107      	bne.n	800213c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800213a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f893 	bl	8002274 <I2C_WaitOnFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00d      	beq.n	8002170 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002162:	d103      	bne.n	800216c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800216a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e079      	b.n	8002264 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002178:	d108      	bne.n	800218c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800217a:	897b      	ldrh	r3, [r7, #10]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	b2da      	uxtb	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	611a      	str	r2, [r3, #16]
 800218a:	e05f      	b.n	800224c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800218c:	897b      	ldrh	r3, [r7, #10]
 800218e:	11db      	asrs	r3, r3, #7
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f003 0306 	and.w	r3, r3, #6
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f063 030f 	orn	r3, r3, #15
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4930      	ldr	r1, [pc, #192]	@ (800226c <I2C_MasterRequestRead+0x194>)
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f8dc 	bl	8002368 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e054      	b.n	8002264 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021ba:	897b      	ldrh	r3, [r7, #10]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	4929      	ldr	r1, [pc, #164]	@ (8002270 <I2C_MasterRequestRead+0x198>)
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f8cc 	bl	8002368 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e044      	b.n	8002264 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f831 	bl	8002274 <I2C_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00d      	beq.n	8002234 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002226:	d103      	bne.n	8002230 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e017      	b.n	8002264 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002234:	897b      	ldrh	r3, [r7, #10]
 8002236:	11db      	asrs	r3, r3, #7
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f003 0306 	and.w	r3, r3, #6
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f063 030e 	orn	r3, r3, #14
 8002244:	b2da      	uxtb	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4907      	ldr	r1, [pc, #28]	@ (8002270 <I2C_MasterRequestRead+0x198>)
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f888 	bl	8002368 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	00010008 	.word	0x00010008
 8002270:	00010002 	.word	0x00010002

08002274 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	4613      	mov	r3, r2
 8002282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002284:	e048      	b.n	8002318 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800228c:	d044      	beq.n	8002318 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800228e:	f7fe ff69 	bl	8001164 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d302      	bcc.n	80022a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d139      	bne.n	8002318 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	0c1b      	lsrs	r3, r3, #16
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10d      	bne.n	80022ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	43da      	mvns	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	4013      	ands	r3, r2
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	e00c      	b.n	80022e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	43da      	mvns	r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	4013      	ands	r3, r2
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d116      	bne.n	8002318 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	f043 0220 	orr.w	r2, r3, #32
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e023      	b.n	8002360 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	0c1b      	lsrs	r3, r3, #16
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d10d      	bne.n	800233e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	43da      	mvns	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4013      	ands	r3, r2
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf0c      	ite	eq
 8002334:	2301      	moveq	r3, #1
 8002336:	2300      	movne	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	e00c      	b.n	8002358 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	43da      	mvns	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	4013      	ands	r3, r2
 800234a:	b29b      	uxth	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf0c      	ite	eq
 8002350:	2301      	moveq	r3, #1
 8002352:	2300      	movne	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	429a      	cmp	r2, r3
 800235c:	d093      	beq.n	8002286 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002376:	e071      	b.n	800245c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002386:	d123      	bne.n	80023d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002396:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	f043 0204 	orr.w	r2, r3, #4
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e067      	b.n	80024a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023d6:	d041      	beq.n	800245c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d8:	f7fe fec4 	bl	8001164 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d302      	bcc.n	80023ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d136      	bne.n	800245c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	0c1b      	lsrs	r3, r3, #16
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d10c      	bne.n	8002412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4013      	ands	r3, r2
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	e00b      	b.n	800242a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	43da      	mvns	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4013      	ands	r3, r2
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf14      	ite	ne
 8002424:	2301      	movne	r3, #1
 8002426:	2300      	moveq	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d016      	beq.n	800245c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	f043 0220 	orr.w	r2, r3, #32
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e021      	b.n	80024a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	0c1b      	lsrs	r3, r3, #16
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d10c      	bne.n	8002480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	43da      	mvns	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4013      	ands	r3, r2
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf14      	ite	ne
 8002478:	2301      	movne	r3, #1
 800247a:	2300      	moveq	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	e00b      	b.n	8002498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4013      	ands	r3, r2
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf14      	ite	ne
 8002492:	2301      	movne	r3, #1
 8002494:	2300      	moveq	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	f47f af6d 	bne.w	8002378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024b4:	e034      	b.n	8002520 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f8e3 	bl	8002682 <I2C_IsAcknowledgeFailed>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e034      	b.n	8002530 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024cc:	d028      	beq.n	8002520 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ce:	f7fe fe49 	bl	8001164 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d302      	bcc.n	80024e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d11d      	bne.n	8002520 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ee:	2b80      	cmp	r3, #128	@ 0x80
 80024f0:	d016      	beq.n	8002520 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	f043 0220 	orr.w	r2, r3, #32
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e007      	b.n	8002530 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800252a:	2b80      	cmp	r3, #128	@ 0x80
 800252c:	d1c3      	bne.n	80024b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002544:	e034      	b.n	80025b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f89b 	bl	8002682 <I2C_IsAcknowledgeFailed>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e034      	b.n	80025c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800255c:	d028      	beq.n	80025b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255e:	f7fe fe01 	bl	8001164 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	429a      	cmp	r2, r3
 800256c:	d302      	bcc.n	8002574 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d11d      	bne.n	80025b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b04      	cmp	r3, #4
 8002580:	d016      	beq.n	80025b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259c:	f043 0220 	orr.w	r2, r3, #32
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e007      	b.n	80025c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d1c3      	bne.n	8002546 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025d4:	e049      	b.n	800266a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b10      	cmp	r3, #16
 80025e2:	d119      	bne.n	8002618 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0210 	mvn.w	r2, #16
 80025ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e030      	b.n	800267a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002618:	f7fe fda4 	bl	8001164 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	429a      	cmp	r2, r3
 8002626:	d302      	bcc.n	800262e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d11d      	bne.n	800266a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002638:	2b40      	cmp	r3, #64	@ 0x40
 800263a:	d016      	beq.n	800266a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	f043 0220 	orr.w	r2, r3, #32
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e007      	b.n	800267a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002674:	2b40      	cmp	r3, #64	@ 0x40
 8002676:	d1ae      	bne.n	80025d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002698:	d11b      	bne.n	80026d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f043 0204 	orr.w	r2, r3, #4
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0cc      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4b68      	ldr	r3, [pc, #416]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d90c      	bls.n	800271c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b65      	ldr	r3, [pc, #404]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b63      	ldr	r3, [pc, #396]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0b8      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002734:	4b59      	ldr	r3, [pc, #356]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a58      	ldr	r2, [pc, #352]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800273e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800274c:	4b53      	ldr	r3, [pc, #332]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a52      	ldr	r2, [pc, #328]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002758:	4b50      	ldr	r3, [pc, #320]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	494d      	ldr	r1, [pc, #308]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d044      	beq.n	8002800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	4b47      	ldr	r3, [pc, #284]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d119      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e07f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d003      	beq.n	800279e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279a:	2b03      	cmp	r3, #3
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279e:	4b3f      	ldr	r3, [pc, #252]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e06f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ae:	4b3b      	ldr	r3, [pc, #236]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e067      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027be:	4b37      	ldr	r3, [pc, #220]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f023 0203 	bic.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4934      	ldr	r1, [pc, #208]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d0:	f7fe fcc8 	bl	8001164 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d8:	f7fe fcc4 	bl	8001164 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e04f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	4b2b      	ldr	r3, [pc, #172]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 020c 	and.w	r2, r3, #12
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d1eb      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002800:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d20c      	bcs.n	8002828 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b22      	ldr	r3, [pc, #136]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b20      	ldr	r3, [pc, #128]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e032      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002834:	4b19      	ldr	r3, [pc, #100]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4916      	ldr	r1, [pc, #88]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002852:	4b12      	ldr	r3, [pc, #72]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	490e      	ldr	r1, [pc, #56]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002866:	f000 f855 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 800286a:	4602      	mov	r2, r0
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	490a      	ldr	r1, [pc, #40]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	5ccb      	ldrb	r3, [r1, r3]
 800287a:	fa22 f303 	lsr.w	r3, r2, r3
 800287e:	4a09      	ldr	r2, [pc, #36]	@ (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fc28 	bl	80010dc <HAL_InitTick>

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023c00 	.word	0x40023c00
 800289c:	40023800 	.word	0x40023800
 80028a0:	08004448 	.word	0x08004448
 80028a4:	20000000 	.word	0x20000000
 80028a8:	20000004 	.word	0x20000004

080028ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000000 	.word	0x20000000

080028c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028c8:	f7ff fff0 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	0a9b      	lsrs	r3, r3, #10
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4903      	ldr	r1, [pc, #12]	@ (80028e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40023800 	.word	0x40023800
 80028e8:	08004458 	.word	0x08004458

080028ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028f0:	f7ff ffdc 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b05      	ldr	r3, [pc, #20]	@ (800290c <HAL_RCC_GetPCLK2Freq+0x20>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	0b5b      	lsrs	r3, r3, #13
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	4903      	ldr	r1, [pc, #12]	@ (8002910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40023800 	.word	0x40023800
 8002910:	08004458 	.word	0x08004458

08002914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002918:	b0ae      	sub	sp, #184	@ 0xb8
 800291a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800293a:	4bcb      	ldr	r3, [pc, #812]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x354>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b0c      	cmp	r3, #12
 8002944:	f200 8206 	bhi.w	8002d54 <HAL_RCC_GetSysClockFreq+0x440>
 8002948:	a201      	add	r2, pc, #4	@ (adr r2, 8002950 <HAL_RCC_GetSysClockFreq+0x3c>)
 800294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294e:	bf00      	nop
 8002950:	08002985 	.word	0x08002985
 8002954:	08002d55 	.word	0x08002d55
 8002958:	08002d55 	.word	0x08002d55
 800295c:	08002d55 	.word	0x08002d55
 8002960:	0800298d 	.word	0x0800298d
 8002964:	08002d55 	.word	0x08002d55
 8002968:	08002d55 	.word	0x08002d55
 800296c:	08002d55 	.word	0x08002d55
 8002970:	08002995 	.word	0x08002995
 8002974:	08002d55 	.word	0x08002d55
 8002978:	08002d55 	.word	0x08002d55
 800297c:	08002d55 	.word	0x08002d55
 8002980:	08002b85 	.word	0x08002b85
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002984:	4bb9      	ldr	r3, [pc, #740]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x358>)
 8002986:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800298a:	e1e7      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800298c:	4bb8      	ldr	r3, [pc, #736]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x35c>)
 800298e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002992:	e1e3      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002994:	4bb4      	ldr	r3, [pc, #720]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x354>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800299c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029a0:	4bb1      	ldr	r3, [pc, #708]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x354>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d071      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ac:	4bae      	ldr	r3, [pc, #696]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	099b      	lsrs	r3, r3, #6
 80029b2:	2200      	movs	r2, #0
 80029b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029b8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80029bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029c8:	2300      	movs	r3, #0
 80029ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80029ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029d2:	4622      	mov	r2, r4
 80029d4:	462b      	mov	r3, r5
 80029d6:	f04f 0000 	mov.w	r0, #0
 80029da:	f04f 0100 	mov.w	r1, #0
 80029de:	0159      	lsls	r1, r3, #5
 80029e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029e4:	0150      	lsls	r0, r2, #5
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4621      	mov	r1, r4
 80029ec:	1a51      	subs	r1, r2, r1
 80029ee:	6439      	str	r1, [r7, #64]	@ 0x40
 80029f0:	4629      	mov	r1, r5
 80029f2:	eb63 0301 	sbc.w	r3, r3, r1
 80029f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002a04:	4649      	mov	r1, r9
 8002a06:	018b      	lsls	r3, r1, #6
 8002a08:	4641      	mov	r1, r8
 8002a0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a0e:	4641      	mov	r1, r8
 8002a10:	018a      	lsls	r2, r1, #6
 8002a12:	4641      	mov	r1, r8
 8002a14:	1a51      	subs	r1, r2, r1
 8002a16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a18:	4649      	mov	r1, r9
 8002a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002a2c:	4649      	mov	r1, r9
 8002a2e:	00cb      	lsls	r3, r1, #3
 8002a30:	4641      	mov	r1, r8
 8002a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a36:	4641      	mov	r1, r8
 8002a38:	00ca      	lsls	r2, r1, #3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4622      	mov	r2, r4
 8002a42:	189b      	adds	r3, r3, r2
 8002a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a46:	462b      	mov	r3, r5
 8002a48:	460a      	mov	r2, r1
 8002a4a:	eb42 0303 	adc.w	r3, r2, r3
 8002a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	024b      	lsls	r3, r1, #9
 8002a60:	4621      	mov	r1, r4
 8002a62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a66:	4621      	mov	r1, r4
 8002a68:	024a      	lsls	r2, r1, #9
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a72:	2200      	movs	r2, #0
 8002a74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a7c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002a80:	f7fd fdd2 	bl	8000628 <__aeabi_uldivmod>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4613      	mov	r3, r2
 8002a8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a8e:	e067      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a90:	4b75      	ldr	r3, [pc, #468]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	099b      	lsrs	r3, r3, #6
 8002a96:	2200      	movs	r2, #0
 8002a98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a9c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002aa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002aaa:	2300      	movs	r3, #0
 8002aac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002aae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	462b      	mov	r3, r5
 8002ab6:	f04f 0000 	mov.w	r0, #0
 8002aba:	f04f 0100 	mov.w	r1, #0
 8002abe:	0159      	lsls	r1, r3, #5
 8002ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac4:	0150      	lsls	r0, r2, #5
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4621      	mov	r1, r4
 8002acc:	1a51      	subs	r1, r2, r1
 8002ace:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002ad0:	4629      	mov	r1, r5
 8002ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002ae4:	4649      	mov	r1, r9
 8002ae6:	018b      	lsls	r3, r1, #6
 8002ae8:	4641      	mov	r1, r8
 8002aea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aee:	4641      	mov	r1, r8
 8002af0:	018a      	lsls	r2, r1, #6
 8002af2:	4641      	mov	r1, r8
 8002af4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002af8:	4649      	mov	r1, r9
 8002afa:	eb63 0b01 	sbc.w	fp, r3, r1
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b0a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b12:	4692      	mov	sl, r2
 8002b14:	469b      	mov	fp, r3
 8002b16:	4623      	mov	r3, r4
 8002b18:	eb1a 0303 	adds.w	r3, sl, r3
 8002b1c:	623b      	str	r3, [r7, #32]
 8002b1e:	462b      	mov	r3, r5
 8002b20:	eb4b 0303 	adc.w	r3, fp, r3
 8002b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b32:	4629      	mov	r1, r5
 8002b34:	028b      	lsls	r3, r1, #10
 8002b36:	4621      	mov	r1, r4
 8002b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	028a      	lsls	r2, r1, #10
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b48:	2200      	movs	r2, #0
 8002b4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b4c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b4e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b52:	f7fd fd69 	bl	8000628 <__aeabi_uldivmod>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b60:	4b41      	ldr	r3, [pc, #260]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b82:	e0eb      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b84:	4b38      	ldr	r3, [pc, #224]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b90:	4b35      	ldr	r3, [pc, #212]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d06b      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9c:	4b32      	ldr	r3, [pc, #200]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	099b      	lsrs	r3, r3, #6
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ba6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ba8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bae:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bb4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002bb8:	4622      	mov	r2, r4
 8002bba:	462b      	mov	r3, r5
 8002bbc:	f04f 0000 	mov.w	r0, #0
 8002bc0:	f04f 0100 	mov.w	r1, #0
 8002bc4:	0159      	lsls	r1, r3, #5
 8002bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bca:	0150      	lsls	r0, r2, #5
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	1a51      	subs	r1, r2, r1
 8002bd4:	61b9      	str	r1, [r7, #24]
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	eb63 0301 	sbc.w	r3, r3, r1
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002bea:	4659      	mov	r1, fp
 8002bec:	018b      	lsls	r3, r1, #6
 8002bee:	4651      	mov	r1, sl
 8002bf0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bf4:	4651      	mov	r1, sl
 8002bf6:	018a      	lsls	r2, r1, #6
 8002bf8:	4651      	mov	r1, sl
 8002bfa:	ebb2 0801 	subs.w	r8, r2, r1
 8002bfe:	4659      	mov	r1, fp
 8002c00:	eb63 0901 	sbc.w	r9, r3, r1
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c18:	4690      	mov	r8, r2
 8002c1a:	4699      	mov	r9, r3
 8002c1c:	4623      	mov	r3, r4
 8002c1e:	eb18 0303 	adds.w	r3, r8, r3
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	462b      	mov	r3, r5
 8002c26:	eb49 0303 	adc.w	r3, r9, r3
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c38:	4629      	mov	r1, r5
 8002c3a:	024b      	lsls	r3, r1, #9
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c42:	4621      	mov	r1, r4
 8002c44:	024a      	lsls	r2, r1, #9
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c4e:	2200      	movs	r2, #0
 8002c50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c52:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002c54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c58:	f7fd fce6 	bl	8000628 <__aeabi_uldivmod>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4613      	mov	r3, r2
 8002c62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c66:	e065      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x420>
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	00f42400 	.word	0x00f42400
 8002c70:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c74:	4b3d      	ldr	r3, [pc, #244]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x458>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	4611      	mov	r1, r2
 8002c80:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c84:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c86:	2300      	movs	r3, #0
 8002c88:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c8a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002c8e:	4642      	mov	r2, r8
 8002c90:	464b      	mov	r3, r9
 8002c92:	f04f 0000 	mov.w	r0, #0
 8002c96:	f04f 0100 	mov.w	r1, #0
 8002c9a:	0159      	lsls	r1, r3, #5
 8002c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca0:	0150      	lsls	r0, r2, #5
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4641      	mov	r1, r8
 8002ca8:	1a51      	subs	r1, r2, r1
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	4649      	mov	r1, r9
 8002cae:	eb63 0301 	sbc.w	r3, r3, r1
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	018b      	lsls	r3, r1, #6
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cca:	4651      	mov	r1, sl
 8002ccc:	018a      	lsls	r2, r1, #6
 8002cce:	4651      	mov	r1, sl
 8002cd0:	1a54      	subs	r4, r2, r1
 8002cd2:	4659      	mov	r1, fp
 8002cd4:	eb63 0501 	sbc.w	r5, r3, r1
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	00eb      	lsls	r3, r5, #3
 8002ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ce6:	00e2      	lsls	r2, r4, #3
 8002ce8:	4614      	mov	r4, r2
 8002cea:	461d      	mov	r5, r3
 8002cec:	4643      	mov	r3, r8
 8002cee:	18e3      	adds	r3, r4, r3
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	eb45 0303 	adc.w	r3, r5, r3
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d06:	4629      	mov	r1, r5
 8002d08:	028b      	lsls	r3, r1, #10
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d10:	4621      	mov	r1, r4
 8002d12:	028a      	lsls	r2, r1, #10
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d20:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002d22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d26:	f7fd fc7f 	bl	8000628 <__aeabi_uldivmod>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4613      	mov	r3, r2
 8002d30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d34:	4b0d      	ldr	r3, [pc, #52]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x458>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	0f1b      	lsrs	r3, r3, #28
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002d42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d52:	e003      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d54:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002d56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	37b8      	adds	r7, #184	@ 0xb8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	00f42400 	.word	0x00f42400

08002d74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e28d      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 8083 	beq.w	8002e9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d94:	4b94      	ldr	r3, [pc, #592]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d019      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002da0:	4b91      	ldr	r3, [pc, #580]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 030c 	and.w	r3, r3, #12
        || \
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002dac:	4b8e      	ldr	r3, [pc, #568]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002db8:	d00c      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dba:	4b8b      	ldr	r3, [pc, #556]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002dc2:	2b0c      	cmp	r3, #12
 8002dc4:	d112      	bne.n	8002dec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dc6:	4b88      	ldr	r3, [pc, #544]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dd2:	d10b      	bne.n	8002dec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd4:	4b84      	ldr	r3, [pc, #528]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d05b      	beq.n	8002e98 <HAL_RCC_OscConfig+0x124>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d157      	bne.n	8002e98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e25a      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df4:	d106      	bne.n	8002e04 <HAL_RCC_OscConfig+0x90>
 8002df6:	4b7c      	ldr	r3, [pc, #496]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a7b      	ldr	r2, [pc, #492]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e01d      	b.n	8002e40 <HAL_RCC_OscConfig+0xcc>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e0c:	d10c      	bne.n	8002e28 <HAL_RCC_OscConfig+0xb4>
 8002e0e:	4b76      	ldr	r3, [pc, #472]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a75      	ldr	r2, [pc, #468]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002e14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	4b73      	ldr	r3, [pc, #460]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a72      	ldr	r2, [pc, #456]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	e00b      	b.n	8002e40 <HAL_RCC_OscConfig+0xcc>
 8002e28:	4b6f      	ldr	r3, [pc, #444]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a6e      	ldr	r2, [pc, #440]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	4b6c      	ldr	r3, [pc, #432]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a6b      	ldr	r2, [pc, #428]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002e3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d013      	beq.n	8002e70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe f98c 	bl	8001164 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fe f988 	bl	8001164 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	@ 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e21f      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	4b61      	ldr	r3, [pc, #388]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0xdc>
 8002e6e:	e014      	b.n	8002e9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe f978 	bl	8001164 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fe f974 	bl	8001164 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	@ 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e20b      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8a:	4b57      	ldr	r3, [pc, #348]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x104>
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d06f      	beq.n	8002f86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ea6:	4b50      	ldr	r3, [pc, #320]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d017      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002eb2:	4b4d      	ldr	r3, [pc, #308]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
        || \
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d105      	bne.n	8002eca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ebe:	4b4a      	ldr	r3, [pc, #296]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eca:	4b47      	ldr	r3, [pc, #284]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ed2:	2b0c      	cmp	r3, #12
 8002ed4:	d11c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ed6:	4b44      	ldr	r3, [pc, #272]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d116      	bne.n	8002f10 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee2:	4b41      	ldr	r3, [pc, #260]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <HAL_RCC_OscConfig+0x186>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d001      	beq.n	8002efa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e1d3      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efa:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4937      	ldr	r1, [pc, #220]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0e:	e03a      	b.n	8002f86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f18:	4b34      	ldr	r3, [pc, #208]	@ (8002fec <HAL_RCC_OscConfig+0x278>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1e:	f7fe f921 	bl	8001164 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f26:	f7fe f91d 	bl	8001164 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e1b4      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f38:	4b2b      	ldr	r3, [pc, #172]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f44:	4b28      	ldr	r3, [pc, #160]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4925      	ldr	r1, [pc, #148]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	600b      	str	r3, [r1, #0]
 8002f58:	e015      	b.n	8002f86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5a:	4b24      	ldr	r3, [pc, #144]	@ (8002fec <HAL_RCC_OscConfig+0x278>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fe f900 	bl	8001164 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f68:	f7fe f8fc 	bl	8001164 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e193      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d036      	beq.n	8003000 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d016      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ff0 <HAL_RCC_OscConfig+0x27c>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa0:	f7fe f8e0 	bl	8001164 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa8:	f7fe f8dc 	bl	8001164 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e173      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fba:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x234>
 8002fc6:	e01b      	b.n	8003000 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc8:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <HAL_RCC_OscConfig+0x27c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fce:	f7fe f8c9 	bl	8001164 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd4:	e00e      	b.n	8002ff4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd6:	f7fe f8c5 	bl	8001164 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d907      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e15c      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	42470000 	.word	0x42470000
 8002ff0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff4:	4b8a      	ldr	r3, [pc, #552]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 8002ff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1ea      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8097 	beq.w	800313c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800300e:	2300      	movs	r3, #0
 8003010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003012:	4b83      	ldr	r3, [pc, #524]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10f      	bne.n	800303e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	4b7f      	ldr	r3, [pc, #508]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	4a7e      	ldr	r2, [pc, #504]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 8003028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800302c:	6413      	str	r3, [r2, #64]	@ 0x40
 800302e:	4b7c      	ldr	r3, [pc, #496]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800303a:	2301      	movs	r3, #1
 800303c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303e:	4b79      	ldr	r3, [pc, #484]	@ (8003224 <HAL_RCC_OscConfig+0x4b0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d118      	bne.n	800307c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800304a:	4b76      	ldr	r3, [pc, #472]	@ (8003224 <HAL_RCC_OscConfig+0x4b0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a75      	ldr	r2, [pc, #468]	@ (8003224 <HAL_RCC_OscConfig+0x4b0>)
 8003050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003056:	f7fe f885 	bl	8001164 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800305e:	f7fe f881 	bl	8001164 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e118      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003070:	4b6c      	ldr	r3, [pc, #432]	@ (8003224 <HAL_RCC_OscConfig+0x4b0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d106      	bne.n	8003092 <HAL_RCC_OscConfig+0x31e>
 8003084:	4b66      	ldr	r3, [pc, #408]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003088:	4a65      	ldr	r2, [pc, #404]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003090:	e01c      	b.n	80030cc <HAL_RCC_OscConfig+0x358>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b05      	cmp	r3, #5
 8003098:	d10c      	bne.n	80030b4 <HAL_RCC_OscConfig+0x340>
 800309a:	4b61      	ldr	r3, [pc, #388]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309e:	4a60      	ldr	r2, [pc, #384]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 80030a0:	f043 0304 	orr.w	r3, r3, #4
 80030a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a6:	4b5e      	ldr	r3, [pc, #376]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030aa:	4a5d      	ldr	r2, [pc, #372]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b2:	e00b      	b.n	80030cc <HAL_RCC_OscConfig+0x358>
 80030b4:	4b5a      	ldr	r3, [pc, #360]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b8:	4a59      	ldr	r2, [pc, #356]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c0:	4b57      	ldr	r3, [pc, #348]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 80030c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c4:	4a56      	ldr	r2, [pc, #344]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 80030c6:	f023 0304 	bic.w	r3, r3, #4
 80030ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d015      	beq.n	8003100 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d4:	f7fe f846 	bl	8001164 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030da:	e00a      	b.n	80030f2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030dc:	f7fe f842 	bl	8001164 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e0d7      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0ee      	beq.n	80030dc <HAL_RCC_OscConfig+0x368>
 80030fe:	e014      	b.n	800312a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003100:	f7fe f830 	bl	8001164 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003106:	e00a      	b.n	800311e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003108:	f7fe f82c 	bl	8001164 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e0c1      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311e:	4b40      	ldr	r3, [pc, #256]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1ee      	bne.n	8003108 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800312a:	7dfb      	ldrb	r3, [r7, #23]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003130:	4b3b      	ldr	r3, [pc, #236]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	4a3a      	ldr	r2, [pc, #232]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 8003136:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800313a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80ad 	beq.w	80032a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003146:	4b36      	ldr	r3, [pc, #216]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b08      	cmp	r3, #8
 8003150:	d060      	beq.n	8003214 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d145      	bne.n	80031e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	4b33      	ldr	r3, [pc, #204]	@ (8003228 <HAL_RCC_OscConfig+0x4b4>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe f800 	bl	8001164 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003168:	f7fd fffc 	bl	8001164 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e093      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317a:	4b29      	ldr	r3, [pc, #164]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	019b      	lsls	r3, r3, #6
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319c:	085b      	lsrs	r3, r3, #1
 800319e:	3b01      	subs	r3, #1
 80031a0:	041b      	lsls	r3, r3, #16
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a8:	061b      	lsls	r3, r3, #24
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b0:	071b      	lsls	r3, r3, #28
 80031b2:	491b      	ldr	r1, [pc, #108]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003228 <HAL_RCC_OscConfig+0x4b4>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fd ffd1 	bl	8001164 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c6:	f7fd ffcd 	bl	8001164 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e064      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d8:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x452>
 80031e4:	e05c      	b.n	80032a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e6:	4b10      	ldr	r3, [pc, #64]	@ (8003228 <HAL_RCC_OscConfig+0x4b4>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fd ffba 	bl	8001164 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fd ffb6 	bl	8001164 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e04d      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <HAL_RCC_OscConfig+0x4ac>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x480>
 8003212:	e045      	b.n	80032a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d107      	bne.n	800322c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e040      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
 8003220:	40023800 	.word	0x40023800
 8003224:	40007000 	.word	0x40007000
 8003228:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800322c:	4b1f      	ldr	r3, [pc, #124]	@ (80032ac <HAL_RCC_OscConfig+0x538>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d030      	beq.n	800329c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d129      	bne.n	800329c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d122      	bne.n	800329c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800325c:	4013      	ands	r3, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003262:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003264:	4293      	cmp	r3, r2
 8003266:	d119      	bne.n	800329c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	3b01      	subs	r3, #1
 8003276:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d10f      	bne.n	800329c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003286:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d107      	bne.n	800329c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800

080032b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e042      	b.n	8003348 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd fdf4 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2224      	movs	r2, #36	@ 0x24
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f973 	bl	80035e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003308:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003318:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003328:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	@ 0x28
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b20      	cmp	r3, #32
 800336e:	d175      	bne.n	800345c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_UART_Transmit+0x2c>
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e06e      	b.n	800345e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2221      	movs	r2, #33	@ 0x21
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800338e:	f7fd fee9 	bl	8001164 <HAL_GetTick>
 8003392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	88fa      	ldrh	r2, [r7, #6]
 800339e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a8:	d108      	bne.n	80033bc <HAL_UART_Transmit+0x6c>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d104      	bne.n	80033bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	e003      	b.n	80033c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033c4:	e02e      	b.n	8003424 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2200      	movs	r2, #0
 80033ce:	2180      	movs	r1, #128	@ 0x80
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f848 	bl	8003466 <UART_WaitOnFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e03a      	b.n	800345e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10b      	bne.n	8003406 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	3302      	adds	r3, #2
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	e007      	b.n	8003416 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	781a      	ldrb	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	3301      	adds	r3, #1
 8003414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1cb      	bne.n	80033c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2200      	movs	r2, #0
 8003436:	2140      	movs	r1, #64	@ 0x40
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f814 	bl	8003466 <UART_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e006      	b.n	800345e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	e000      	b.n	800345e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800345c:	2302      	movs	r3, #2
  }
}
 800345e:	4618      	mov	r0, r3
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	4613      	mov	r3, r2
 8003474:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003476:	e03b      	b.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800347e:	d037      	beq.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003480:	f7fd fe70 	bl	8001164 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	6a3a      	ldr	r2, [r7, #32]
 800348c:	429a      	cmp	r2, r3
 800348e:	d302      	bcc.n	8003496 <UART_WaitOnFlagUntilTimeout+0x30>
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e03a      	b.n	8003510 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d023      	beq.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b80      	cmp	r3, #128	@ 0x80
 80034ac:	d020      	beq.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b40      	cmp	r3, #64	@ 0x40
 80034b2:	d01d      	beq.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d116      	bne.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f81d 	bl	8003518 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2208      	movs	r2, #8
 80034e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e00f      	b.n	8003510 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	4013      	ands	r3, r2
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	429a      	cmp	r2, r3
 800350c:	d0b4      	beq.n	8003478 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003518:	b480      	push	{r7}
 800351a:	b095      	sub	sp, #84	@ 0x54
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	330c      	adds	r3, #12
 8003526:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800352a:	e853 3f00 	ldrex	r3, [r3]
 800352e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003532:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003540:	643a      	str	r2, [r7, #64]	@ 0x40
 8003542:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003544:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003546:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003548:	e841 2300 	strex	r3, r2, [r1]
 800354c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800354e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e5      	bne.n	8003520 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3314      	adds	r3, #20
 800355a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	e853 3f00 	ldrex	r3, [r3]
 8003562:	61fb      	str	r3, [r7, #28]
   return(result);
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f023 0301 	bic.w	r3, r3, #1
 800356a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3314      	adds	r3, #20
 8003572:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003574:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003576:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003578:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800357a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800357c:	e841 2300 	strex	r3, r2, [r1]
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e5      	bne.n	8003554 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	2b01      	cmp	r3, #1
 800358e:	d119      	bne.n	80035c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	330c      	adds	r3, #12
 8003596:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	60bb      	str	r3, [r7, #8]
   return(result);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f023 0310 	bic.w	r3, r3, #16
 80035a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035b0:	61ba      	str	r2, [r7, #24]
 80035b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	6979      	ldr	r1, [r7, #20]
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	613b      	str	r3, [r7, #16]
   return(result);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e5      	bne.n	8003590 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80035d2:	bf00      	nop
 80035d4:	3754      	adds	r7, #84	@ 0x54
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e4:	b0c0      	sub	sp, #256	@ 0x100
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80035f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035fc:	68d9      	ldr	r1, [r3, #12]
 80035fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	ea40 0301 	orr.w	r3, r0, r1
 8003608:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800360a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	431a      	orrs	r2, r3
 8003618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	431a      	orrs	r2, r3
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003638:	f021 010c 	bic.w	r1, r1, #12
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003646:	430b      	orrs	r3, r1
 8003648:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800365a:	6999      	ldr	r1, [r3, #24]
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	ea40 0301 	orr.w	r3, r0, r1
 8003666:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b8f      	ldr	r3, [pc, #572]	@ (80038ac <UART_SetConfig+0x2cc>)
 8003670:	429a      	cmp	r2, r3
 8003672:	d005      	beq.n	8003680 <UART_SetConfig+0xa0>
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4b8d      	ldr	r3, [pc, #564]	@ (80038b0 <UART_SetConfig+0x2d0>)
 800367c:	429a      	cmp	r2, r3
 800367e:	d104      	bne.n	800368a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003680:	f7ff f934 	bl	80028ec <HAL_RCC_GetPCLK2Freq>
 8003684:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003688:	e003      	b.n	8003692 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800368a:	f7ff f91b 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 800368e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800369c:	f040 810c 	bne.w	80038b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036a4:	2200      	movs	r2, #0
 80036a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036b2:	4622      	mov	r2, r4
 80036b4:	462b      	mov	r3, r5
 80036b6:	1891      	adds	r1, r2, r2
 80036b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80036ba:	415b      	adcs	r3, r3
 80036bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036c2:	4621      	mov	r1, r4
 80036c4:	eb12 0801 	adds.w	r8, r2, r1
 80036c8:	4629      	mov	r1, r5
 80036ca:	eb43 0901 	adc.w	r9, r3, r1
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036e2:	4690      	mov	r8, r2
 80036e4:	4699      	mov	r9, r3
 80036e6:	4623      	mov	r3, r4
 80036e8:	eb18 0303 	adds.w	r3, r8, r3
 80036ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036f0:	462b      	mov	r3, r5
 80036f2:	eb49 0303 	adc.w	r3, r9, r3
 80036f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003706:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800370a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800370e:	460b      	mov	r3, r1
 8003710:	18db      	adds	r3, r3, r3
 8003712:	653b      	str	r3, [r7, #80]	@ 0x50
 8003714:	4613      	mov	r3, r2
 8003716:	eb42 0303 	adc.w	r3, r2, r3
 800371a:	657b      	str	r3, [r7, #84]	@ 0x54
 800371c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003720:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003724:	f7fc ff80 	bl	8000628 <__aeabi_uldivmod>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4b61      	ldr	r3, [pc, #388]	@ (80038b4 <UART_SetConfig+0x2d4>)
 800372e:	fba3 2302 	umull	r2, r3, r3, r2
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	011c      	lsls	r4, r3, #4
 8003736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800373a:	2200      	movs	r2, #0
 800373c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003740:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003744:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003748:	4642      	mov	r2, r8
 800374a:	464b      	mov	r3, r9
 800374c:	1891      	adds	r1, r2, r2
 800374e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003750:	415b      	adcs	r3, r3
 8003752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003754:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003758:	4641      	mov	r1, r8
 800375a:	eb12 0a01 	adds.w	sl, r2, r1
 800375e:	4649      	mov	r1, r9
 8003760:	eb43 0b01 	adc.w	fp, r3, r1
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003770:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003774:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003778:	4692      	mov	sl, r2
 800377a:	469b      	mov	fp, r3
 800377c:	4643      	mov	r3, r8
 800377e:	eb1a 0303 	adds.w	r3, sl, r3
 8003782:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003786:	464b      	mov	r3, r9
 8003788:	eb4b 0303 	adc.w	r3, fp, r3
 800378c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800379c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80037a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037a4:	460b      	mov	r3, r1
 80037a6:	18db      	adds	r3, r3, r3
 80037a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80037aa:	4613      	mov	r3, r2
 80037ac:	eb42 0303 	adc.w	r3, r2, r3
 80037b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80037ba:	f7fc ff35 	bl	8000628 <__aeabi_uldivmod>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4611      	mov	r1, r2
 80037c4:	4b3b      	ldr	r3, [pc, #236]	@ (80038b4 <UART_SetConfig+0x2d4>)
 80037c6:	fba3 2301 	umull	r2, r3, r3, r1
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	2264      	movs	r2, #100	@ 0x64
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	1acb      	subs	r3, r1, r3
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80037da:	4b36      	ldr	r3, [pc, #216]	@ (80038b4 <UART_SetConfig+0x2d4>)
 80037dc:	fba3 2302 	umull	r2, r3, r3, r2
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80037e8:	441c      	add	r4, r3
 80037ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ee:	2200      	movs	r2, #0
 80037f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80037f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80037fc:	4642      	mov	r2, r8
 80037fe:	464b      	mov	r3, r9
 8003800:	1891      	adds	r1, r2, r2
 8003802:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003804:	415b      	adcs	r3, r3
 8003806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003808:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800380c:	4641      	mov	r1, r8
 800380e:	1851      	adds	r1, r2, r1
 8003810:	6339      	str	r1, [r7, #48]	@ 0x30
 8003812:	4649      	mov	r1, r9
 8003814:	414b      	adcs	r3, r1
 8003816:	637b      	str	r3, [r7, #52]	@ 0x34
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003824:	4659      	mov	r1, fp
 8003826:	00cb      	lsls	r3, r1, #3
 8003828:	4651      	mov	r1, sl
 800382a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800382e:	4651      	mov	r1, sl
 8003830:	00ca      	lsls	r2, r1, #3
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	4603      	mov	r3, r0
 8003838:	4642      	mov	r2, r8
 800383a:	189b      	adds	r3, r3, r2
 800383c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003840:	464b      	mov	r3, r9
 8003842:	460a      	mov	r2, r1
 8003844:	eb42 0303 	adc.w	r3, r2, r3
 8003848:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003858:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800385c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003860:	460b      	mov	r3, r1
 8003862:	18db      	adds	r3, r3, r3
 8003864:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003866:	4613      	mov	r3, r2
 8003868:	eb42 0303 	adc.w	r3, r2, r3
 800386c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800386e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003872:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003876:	f7fc fed7 	bl	8000628 <__aeabi_uldivmod>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4b0d      	ldr	r3, [pc, #52]	@ (80038b4 <UART_SetConfig+0x2d4>)
 8003880:	fba3 1302 	umull	r1, r3, r3, r2
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	2164      	movs	r1, #100	@ 0x64
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	3332      	adds	r3, #50	@ 0x32
 8003892:	4a08      	ldr	r2, [pc, #32]	@ (80038b4 <UART_SetConfig+0x2d4>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	095b      	lsrs	r3, r3, #5
 800389a:	f003 0207 	and.w	r2, r3, #7
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4422      	add	r2, r4
 80038a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038a8:	e106      	b.n	8003ab8 <UART_SetConfig+0x4d8>
 80038aa:	bf00      	nop
 80038ac:	40011000 	.word	0x40011000
 80038b0:	40011400 	.word	0x40011400
 80038b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038bc:	2200      	movs	r2, #0
 80038be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80038c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80038ca:	4642      	mov	r2, r8
 80038cc:	464b      	mov	r3, r9
 80038ce:	1891      	adds	r1, r2, r2
 80038d0:	6239      	str	r1, [r7, #32]
 80038d2:	415b      	adcs	r3, r3
 80038d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038da:	4641      	mov	r1, r8
 80038dc:	1854      	adds	r4, r2, r1
 80038de:	4649      	mov	r1, r9
 80038e0:	eb43 0501 	adc.w	r5, r3, r1
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	00eb      	lsls	r3, r5, #3
 80038ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038f2:	00e2      	lsls	r2, r4, #3
 80038f4:	4614      	mov	r4, r2
 80038f6:	461d      	mov	r5, r3
 80038f8:	4643      	mov	r3, r8
 80038fa:	18e3      	adds	r3, r4, r3
 80038fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003900:	464b      	mov	r3, r9
 8003902:	eb45 0303 	adc.w	r3, r5, r3
 8003906:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003916:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003926:	4629      	mov	r1, r5
 8003928:	008b      	lsls	r3, r1, #2
 800392a:	4621      	mov	r1, r4
 800392c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003930:	4621      	mov	r1, r4
 8003932:	008a      	lsls	r2, r1, #2
 8003934:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003938:	f7fc fe76 	bl	8000628 <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4b60      	ldr	r3, [pc, #384]	@ (8003ac4 <UART_SetConfig+0x4e4>)
 8003942:	fba3 2302 	umull	r2, r3, r3, r2
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	011c      	lsls	r4, r3, #4
 800394a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800394e:	2200      	movs	r2, #0
 8003950:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003954:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003958:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800395c:	4642      	mov	r2, r8
 800395e:	464b      	mov	r3, r9
 8003960:	1891      	adds	r1, r2, r2
 8003962:	61b9      	str	r1, [r7, #24]
 8003964:	415b      	adcs	r3, r3
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800396c:	4641      	mov	r1, r8
 800396e:	1851      	adds	r1, r2, r1
 8003970:	6139      	str	r1, [r7, #16]
 8003972:	4649      	mov	r1, r9
 8003974:	414b      	adcs	r3, r1
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003984:	4659      	mov	r1, fp
 8003986:	00cb      	lsls	r3, r1, #3
 8003988:	4651      	mov	r1, sl
 800398a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800398e:	4651      	mov	r1, sl
 8003990:	00ca      	lsls	r2, r1, #3
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	4603      	mov	r3, r0
 8003998:	4642      	mov	r2, r8
 800399a:	189b      	adds	r3, r3, r2
 800399c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039a0:	464b      	mov	r3, r9
 80039a2:	460a      	mov	r2, r1
 80039a4:	eb42 0303 	adc.w	r3, r2, r3
 80039a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80039c4:	4649      	mov	r1, r9
 80039c6:	008b      	lsls	r3, r1, #2
 80039c8:	4641      	mov	r1, r8
 80039ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039ce:	4641      	mov	r1, r8
 80039d0:	008a      	lsls	r2, r1, #2
 80039d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80039d6:	f7fc fe27 	bl	8000628 <__aeabi_uldivmod>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	4b38      	ldr	r3, [pc, #224]	@ (8003ac4 <UART_SetConfig+0x4e4>)
 80039e2:	fba3 2301 	umull	r2, r3, r3, r1
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2264      	movs	r2, #100	@ 0x64
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	1acb      	subs	r3, r1, r3
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	3332      	adds	r3, #50	@ 0x32
 80039f4:	4a33      	ldr	r2, [pc, #204]	@ (8003ac4 <UART_SetConfig+0x4e4>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a00:	441c      	add	r4, r3
 8003a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a06:	2200      	movs	r2, #0
 8003a08:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a10:	4642      	mov	r2, r8
 8003a12:	464b      	mov	r3, r9
 8003a14:	1891      	adds	r1, r2, r2
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	415b      	adcs	r3, r3
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a20:	4641      	mov	r1, r8
 8003a22:	1851      	adds	r1, r2, r1
 8003a24:	6039      	str	r1, [r7, #0]
 8003a26:	4649      	mov	r1, r9
 8003a28:	414b      	adcs	r3, r1
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a38:	4659      	mov	r1, fp
 8003a3a:	00cb      	lsls	r3, r1, #3
 8003a3c:	4651      	mov	r1, sl
 8003a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a42:	4651      	mov	r1, sl
 8003a44:	00ca      	lsls	r2, r1, #3
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4642      	mov	r2, r8
 8003a4e:	189b      	adds	r3, r3, r2
 8003a50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a52:	464b      	mov	r3, r9
 8003a54:	460a      	mov	r2, r1
 8003a56:	eb42 0303 	adc.w	r3, r2, r3
 8003a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a66:	667a      	str	r2, [r7, #100]	@ 0x64
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003a74:	4649      	mov	r1, r9
 8003a76:	008b      	lsls	r3, r1, #2
 8003a78:	4641      	mov	r1, r8
 8003a7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a7e:	4641      	mov	r1, r8
 8003a80:	008a      	lsls	r2, r1, #2
 8003a82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003a86:	f7fc fdcf 	bl	8000628 <__aeabi_uldivmod>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac4 <UART_SetConfig+0x4e4>)
 8003a90:	fba3 1302 	umull	r1, r3, r3, r2
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	2164      	movs	r1, #100	@ 0x64
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	3332      	adds	r3, #50	@ 0x32
 8003aa2:	4a08      	ldr	r2, [pc, #32]	@ (8003ac4 <UART_SetConfig+0x4e4>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	f003 020f 	and.w	r2, r3, #15
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4422      	add	r2, r4
 8003ab6:	609a      	str	r2, [r3, #8]
}
 8003ab8:	bf00      	nop
 8003aba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac4:	51eb851f 	.word	0x51eb851f

08003ac8 <siprintf>:
 8003ac8:	b40e      	push	{r1, r2, r3}
 8003aca:	b500      	push	{lr}
 8003acc:	b09c      	sub	sp, #112	@ 0x70
 8003ace:	ab1d      	add	r3, sp, #116	@ 0x74
 8003ad0:	9002      	str	r0, [sp, #8]
 8003ad2:	9006      	str	r0, [sp, #24]
 8003ad4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003ad8:	4809      	ldr	r0, [pc, #36]	@ (8003b00 <siprintf+0x38>)
 8003ada:	9107      	str	r1, [sp, #28]
 8003adc:	9104      	str	r1, [sp, #16]
 8003ade:	4909      	ldr	r1, [pc, #36]	@ (8003b04 <siprintf+0x3c>)
 8003ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ae4:	9105      	str	r1, [sp, #20]
 8003ae6:	6800      	ldr	r0, [r0, #0]
 8003ae8:	9301      	str	r3, [sp, #4]
 8003aea:	a902      	add	r1, sp, #8
 8003aec:	f000 f994 	bl	8003e18 <_svfiprintf_r>
 8003af0:	9b02      	ldr	r3, [sp, #8]
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	b01c      	add	sp, #112	@ 0x70
 8003af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003afc:	b003      	add	sp, #12
 8003afe:	4770      	bx	lr
 8003b00:	2000000c 	.word	0x2000000c
 8003b04:	ffff0208 	.word	0xffff0208

08003b08 <memset>:
 8003b08:	4402      	add	r2, r0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d100      	bne.n	8003b12 <memset+0xa>
 8003b10:	4770      	bx	lr
 8003b12:	f803 1b01 	strb.w	r1, [r3], #1
 8003b16:	e7f9      	b.n	8003b0c <memset+0x4>

08003b18 <__errno>:
 8003b18:	4b01      	ldr	r3, [pc, #4]	@ (8003b20 <__errno+0x8>)
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	2000000c 	.word	0x2000000c

08003b24 <__libc_init_array>:
 8003b24:	b570      	push	{r4, r5, r6, lr}
 8003b26:	4d0d      	ldr	r5, [pc, #52]	@ (8003b5c <__libc_init_array+0x38>)
 8003b28:	4c0d      	ldr	r4, [pc, #52]	@ (8003b60 <__libc_init_array+0x3c>)
 8003b2a:	1b64      	subs	r4, r4, r5
 8003b2c:	10a4      	asrs	r4, r4, #2
 8003b2e:	2600      	movs	r6, #0
 8003b30:	42a6      	cmp	r6, r4
 8003b32:	d109      	bne.n	8003b48 <__libc_init_array+0x24>
 8003b34:	4d0b      	ldr	r5, [pc, #44]	@ (8003b64 <__libc_init_array+0x40>)
 8003b36:	4c0c      	ldr	r4, [pc, #48]	@ (8003b68 <__libc_init_array+0x44>)
 8003b38:	f000 fc66 	bl	8004408 <_init>
 8003b3c:	1b64      	subs	r4, r4, r5
 8003b3e:	10a4      	asrs	r4, r4, #2
 8003b40:	2600      	movs	r6, #0
 8003b42:	42a6      	cmp	r6, r4
 8003b44:	d105      	bne.n	8003b52 <__libc_init_array+0x2e>
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4c:	4798      	blx	r3
 8003b4e:	3601      	adds	r6, #1
 8003b50:	e7ee      	b.n	8003b30 <__libc_init_array+0xc>
 8003b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b56:	4798      	blx	r3
 8003b58:	3601      	adds	r6, #1
 8003b5a:	e7f2      	b.n	8003b42 <__libc_init_array+0x1e>
 8003b5c:	0800449c 	.word	0x0800449c
 8003b60:	0800449c 	.word	0x0800449c
 8003b64:	0800449c 	.word	0x0800449c
 8003b68:	080044a4 	.word	0x080044a4

08003b6c <__retarget_lock_acquire_recursive>:
 8003b6c:	4770      	bx	lr

08003b6e <__retarget_lock_release_recursive>:
 8003b6e:	4770      	bx	lr

08003b70 <_free_r>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4605      	mov	r5, r0
 8003b74:	2900      	cmp	r1, #0
 8003b76:	d041      	beq.n	8003bfc <_free_r+0x8c>
 8003b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b7c:	1f0c      	subs	r4, r1, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	bfb8      	it	lt
 8003b82:	18e4      	addlt	r4, r4, r3
 8003b84:	f000 f8e0 	bl	8003d48 <__malloc_lock>
 8003b88:	4a1d      	ldr	r2, [pc, #116]	@ (8003c00 <_free_r+0x90>)
 8003b8a:	6813      	ldr	r3, [r2, #0]
 8003b8c:	b933      	cbnz	r3, 8003b9c <_free_r+0x2c>
 8003b8e:	6063      	str	r3, [r4, #4]
 8003b90:	6014      	str	r4, [r2, #0]
 8003b92:	4628      	mov	r0, r5
 8003b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b98:	f000 b8dc 	b.w	8003d54 <__malloc_unlock>
 8003b9c:	42a3      	cmp	r3, r4
 8003b9e:	d908      	bls.n	8003bb2 <_free_r+0x42>
 8003ba0:	6820      	ldr	r0, [r4, #0]
 8003ba2:	1821      	adds	r1, r4, r0
 8003ba4:	428b      	cmp	r3, r1
 8003ba6:	bf01      	itttt	eq
 8003ba8:	6819      	ldreq	r1, [r3, #0]
 8003baa:	685b      	ldreq	r3, [r3, #4]
 8003bac:	1809      	addeq	r1, r1, r0
 8003bae:	6021      	streq	r1, [r4, #0]
 8003bb0:	e7ed      	b.n	8003b8e <_free_r+0x1e>
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	b10b      	cbz	r3, 8003bbc <_free_r+0x4c>
 8003bb8:	42a3      	cmp	r3, r4
 8003bba:	d9fa      	bls.n	8003bb2 <_free_r+0x42>
 8003bbc:	6811      	ldr	r1, [r2, #0]
 8003bbe:	1850      	adds	r0, r2, r1
 8003bc0:	42a0      	cmp	r0, r4
 8003bc2:	d10b      	bne.n	8003bdc <_free_r+0x6c>
 8003bc4:	6820      	ldr	r0, [r4, #0]
 8003bc6:	4401      	add	r1, r0
 8003bc8:	1850      	adds	r0, r2, r1
 8003bca:	4283      	cmp	r3, r0
 8003bcc:	6011      	str	r1, [r2, #0]
 8003bce:	d1e0      	bne.n	8003b92 <_free_r+0x22>
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	6053      	str	r3, [r2, #4]
 8003bd6:	4408      	add	r0, r1
 8003bd8:	6010      	str	r0, [r2, #0]
 8003bda:	e7da      	b.n	8003b92 <_free_r+0x22>
 8003bdc:	d902      	bls.n	8003be4 <_free_r+0x74>
 8003bde:	230c      	movs	r3, #12
 8003be0:	602b      	str	r3, [r5, #0]
 8003be2:	e7d6      	b.n	8003b92 <_free_r+0x22>
 8003be4:	6820      	ldr	r0, [r4, #0]
 8003be6:	1821      	adds	r1, r4, r0
 8003be8:	428b      	cmp	r3, r1
 8003bea:	bf04      	itt	eq
 8003bec:	6819      	ldreq	r1, [r3, #0]
 8003bee:	685b      	ldreq	r3, [r3, #4]
 8003bf0:	6063      	str	r3, [r4, #4]
 8003bf2:	bf04      	itt	eq
 8003bf4:	1809      	addeq	r1, r1, r0
 8003bf6:	6021      	streq	r1, [r4, #0]
 8003bf8:	6054      	str	r4, [r2, #4]
 8003bfa:	e7ca      	b.n	8003b92 <_free_r+0x22>
 8003bfc:	bd38      	pop	{r3, r4, r5, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000264 	.word	0x20000264

08003c04 <sbrk_aligned>:
 8003c04:	b570      	push	{r4, r5, r6, lr}
 8003c06:	4e0f      	ldr	r6, [pc, #60]	@ (8003c44 <sbrk_aligned+0x40>)
 8003c08:	460c      	mov	r4, r1
 8003c0a:	6831      	ldr	r1, [r6, #0]
 8003c0c:	4605      	mov	r5, r0
 8003c0e:	b911      	cbnz	r1, 8003c16 <sbrk_aligned+0x12>
 8003c10:	f000 fba6 	bl	8004360 <_sbrk_r>
 8003c14:	6030      	str	r0, [r6, #0]
 8003c16:	4621      	mov	r1, r4
 8003c18:	4628      	mov	r0, r5
 8003c1a:	f000 fba1 	bl	8004360 <_sbrk_r>
 8003c1e:	1c43      	adds	r3, r0, #1
 8003c20:	d103      	bne.n	8003c2a <sbrk_aligned+0x26>
 8003c22:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003c26:	4620      	mov	r0, r4
 8003c28:	bd70      	pop	{r4, r5, r6, pc}
 8003c2a:	1cc4      	adds	r4, r0, #3
 8003c2c:	f024 0403 	bic.w	r4, r4, #3
 8003c30:	42a0      	cmp	r0, r4
 8003c32:	d0f8      	beq.n	8003c26 <sbrk_aligned+0x22>
 8003c34:	1a21      	subs	r1, r4, r0
 8003c36:	4628      	mov	r0, r5
 8003c38:	f000 fb92 	bl	8004360 <_sbrk_r>
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	d1f2      	bne.n	8003c26 <sbrk_aligned+0x22>
 8003c40:	e7ef      	b.n	8003c22 <sbrk_aligned+0x1e>
 8003c42:	bf00      	nop
 8003c44:	20000260 	.word	0x20000260

08003c48 <_malloc_r>:
 8003c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c4c:	1ccd      	adds	r5, r1, #3
 8003c4e:	f025 0503 	bic.w	r5, r5, #3
 8003c52:	3508      	adds	r5, #8
 8003c54:	2d0c      	cmp	r5, #12
 8003c56:	bf38      	it	cc
 8003c58:	250c      	movcc	r5, #12
 8003c5a:	2d00      	cmp	r5, #0
 8003c5c:	4606      	mov	r6, r0
 8003c5e:	db01      	blt.n	8003c64 <_malloc_r+0x1c>
 8003c60:	42a9      	cmp	r1, r5
 8003c62:	d904      	bls.n	8003c6e <_malloc_r+0x26>
 8003c64:	230c      	movs	r3, #12
 8003c66:	6033      	str	r3, [r6, #0]
 8003c68:	2000      	movs	r0, #0
 8003c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d44 <_malloc_r+0xfc>
 8003c72:	f000 f869 	bl	8003d48 <__malloc_lock>
 8003c76:	f8d8 3000 	ldr.w	r3, [r8]
 8003c7a:	461c      	mov	r4, r3
 8003c7c:	bb44      	cbnz	r4, 8003cd0 <_malloc_r+0x88>
 8003c7e:	4629      	mov	r1, r5
 8003c80:	4630      	mov	r0, r6
 8003c82:	f7ff ffbf 	bl	8003c04 <sbrk_aligned>
 8003c86:	1c43      	adds	r3, r0, #1
 8003c88:	4604      	mov	r4, r0
 8003c8a:	d158      	bne.n	8003d3e <_malloc_r+0xf6>
 8003c8c:	f8d8 4000 	ldr.w	r4, [r8]
 8003c90:	4627      	mov	r7, r4
 8003c92:	2f00      	cmp	r7, #0
 8003c94:	d143      	bne.n	8003d1e <_malloc_r+0xd6>
 8003c96:	2c00      	cmp	r4, #0
 8003c98:	d04b      	beq.n	8003d32 <_malloc_r+0xea>
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	4639      	mov	r1, r7
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	eb04 0903 	add.w	r9, r4, r3
 8003ca4:	f000 fb5c 	bl	8004360 <_sbrk_r>
 8003ca8:	4581      	cmp	r9, r0
 8003caa:	d142      	bne.n	8003d32 <_malloc_r+0xea>
 8003cac:	6821      	ldr	r1, [r4, #0]
 8003cae:	1a6d      	subs	r5, r5, r1
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	f7ff ffa6 	bl	8003c04 <sbrk_aligned>
 8003cb8:	3001      	adds	r0, #1
 8003cba:	d03a      	beq.n	8003d32 <_malloc_r+0xea>
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	442b      	add	r3, r5
 8003cc0:	6023      	str	r3, [r4, #0]
 8003cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	bb62      	cbnz	r2, 8003d24 <_malloc_r+0xdc>
 8003cca:	f8c8 7000 	str.w	r7, [r8]
 8003cce:	e00f      	b.n	8003cf0 <_malloc_r+0xa8>
 8003cd0:	6822      	ldr	r2, [r4, #0]
 8003cd2:	1b52      	subs	r2, r2, r5
 8003cd4:	d420      	bmi.n	8003d18 <_malloc_r+0xd0>
 8003cd6:	2a0b      	cmp	r2, #11
 8003cd8:	d917      	bls.n	8003d0a <_malloc_r+0xc2>
 8003cda:	1961      	adds	r1, r4, r5
 8003cdc:	42a3      	cmp	r3, r4
 8003cde:	6025      	str	r5, [r4, #0]
 8003ce0:	bf18      	it	ne
 8003ce2:	6059      	strne	r1, [r3, #4]
 8003ce4:	6863      	ldr	r3, [r4, #4]
 8003ce6:	bf08      	it	eq
 8003ce8:	f8c8 1000 	streq.w	r1, [r8]
 8003cec:	5162      	str	r2, [r4, r5]
 8003cee:	604b      	str	r3, [r1, #4]
 8003cf0:	4630      	mov	r0, r6
 8003cf2:	f000 f82f 	bl	8003d54 <__malloc_unlock>
 8003cf6:	f104 000b 	add.w	r0, r4, #11
 8003cfa:	1d23      	adds	r3, r4, #4
 8003cfc:	f020 0007 	bic.w	r0, r0, #7
 8003d00:	1ac2      	subs	r2, r0, r3
 8003d02:	bf1c      	itt	ne
 8003d04:	1a1b      	subne	r3, r3, r0
 8003d06:	50a3      	strne	r3, [r4, r2]
 8003d08:	e7af      	b.n	8003c6a <_malloc_r+0x22>
 8003d0a:	6862      	ldr	r2, [r4, #4]
 8003d0c:	42a3      	cmp	r3, r4
 8003d0e:	bf0c      	ite	eq
 8003d10:	f8c8 2000 	streq.w	r2, [r8]
 8003d14:	605a      	strne	r2, [r3, #4]
 8003d16:	e7eb      	b.n	8003cf0 <_malloc_r+0xa8>
 8003d18:	4623      	mov	r3, r4
 8003d1a:	6864      	ldr	r4, [r4, #4]
 8003d1c:	e7ae      	b.n	8003c7c <_malloc_r+0x34>
 8003d1e:	463c      	mov	r4, r7
 8003d20:	687f      	ldr	r7, [r7, #4]
 8003d22:	e7b6      	b.n	8003c92 <_malloc_r+0x4a>
 8003d24:	461a      	mov	r2, r3
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	42a3      	cmp	r3, r4
 8003d2a:	d1fb      	bne.n	8003d24 <_malloc_r+0xdc>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	6053      	str	r3, [r2, #4]
 8003d30:	e7de      	b.n	8003cf0 <_malloc_r+0xa8>
 8003d32:	230c      	movs	r3, #12
 8003d34:	6033      	str	r3, [r6, #0]
 8003d36:	4630      	mov	r0, r6
 8003d38:	f000 f80c 	bl	8003d54 <__malloc_unlock>
 8003d3c:	e794      	b.n	8003c68 <_malloc_r+0x20>
 8003d3e:	6005      	str	r5, [r0, #0]
 8003d40:	e7d6      	b.n	8003cf0 <_malloc_r+0xa8>
 8003d42:	bf00      	nop
 8003d44:	20000264 	.word	0x20000264

08003d48 <__malloc_lock>:
 8003d48:	4801      	ldr	r0, [pc, #4]	@ (8003d50 <__malloc_lock+0x8>)
 8003d4a:	f7ff bf0f 	b.w	8003b6c <__retarget_lock_acquire_recursive>
 8003d4e:	bf00      	nop
 8003d50:	2000025c 	.word	0x2000025c

08003d54 <__malloc_unlock>:
 8003d54:	4801      	ldr	r0, [pc, #4]	@ (8003d5c <__malloc_unlock+0x8>)
 8003d56:	f7ff bf0a 	b.w	8003b6e <__retarget_lock_release_recursive>
 8003d5a:	bf00      	nop
 8003d5c:	2000025c 	.word	0x2000025c

08003d60 <__ssputs_r>:
 8003d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d64:	688e      	ldr	r6, [r1, #8]
 8003d66:	461f      	mov	r7, r3
 8003d68:	42be      	cmp	r6, r7
 8003d6a:	680b      	ldr	r3, [r1, #0]
 8003d6c:	4682      	mov	sl, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	4690      	mov	r8, r2
 8003d72:	d82d      	bhi.n	8003dd0 <__ssputs_r+0x70>
 8003d74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003d7c:	d026      	beq.n	8003dcc <__ssputs_r+0x6c>
 8003d7e:	6965      	ldr	r5, [r4, #20]
 8003d80:	6909      	ldr	r1, [r1, #16]
 8003d82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d86:	eba3 0901 	sub.w	r9, r3, r1
 8003d8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d8e:	1c7b      	adds	r3, r7, #1
 8003d90:	444b      	add	r3, r9
 8003d92:	106d      	asrs	r5, r5, #1
 8003d94:	429d      	cmp	r5, r3
 8003d96:	bf38      	it	cc
 8003d98:	461d      	movcc	r5, r3
 8003d9a:	0553      	lsls	r3, r2, #21
 8003d9c:	d527      	bpl.n	8003dee <__ssputs_r+0x8e>
 8003d9e:	4629      	mov	r1, r5
 8003da0:	f7ff ff52 	bl	8003c48 <_malloc_r>
 8003da4:	4606      	mov	r6, r0
 8003da6:	b360      	cbz	r0, 8003e02 <__ssputs_r+0xa2>
 8003da8:	6921      	ldr	r1, [r4, #16]
 8003daa:	464a      	mov	r2, r9
 8003dac:	f000 fae8 	bl	8004380 <memcpy>
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dba:	81a3      	strh	r3, [r4, #12]
 8003dbc:	6126      	str	r6, [r4, #16]
 8003dbe:	6165      	str	r5, [r4, #20]
 8003dc0:	444e      	add	r6, r9
 8003dc2:	eba5 0509 	sub.w	r5, r5, r9
 8003dc6:	6026      	str	r6, [r4, #0]
 8003dc8:	60a5      	str	r5, [r4, #8]
 8003dca:	463e      	mov	r6, r7
 8003dcc:	42be      	cmp	r6, r7
 8003dce:	d900      	bls.n	8003dd2 <__ssputs_r+0x72>
 8003dd0:	463e      	mov	r6, r7
 8003dd2:	6820      	ldr	r0, [r4, #0]
 8003dd4:	4632      	mov	r2, r6
 8003dd6:	4641      	mov	r1, r8
 8003dd8:	f000 faa8 	bl	800432c <memmove>
 8003ddc:	68a3      	ldr	r3, [r4, #8]
 8003dde:	1b9b      	subs	r3, r3, r6
 8003de0:	60a3      	str	r3, [r4, #8]
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	4433      	add	r3, r6
 8003de6:	6023      	str	r3, [r4, #0]
 8003de8:	2000      	movs	r0, #0
 8003dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dee:	462a      	mov	r2, r5
 8003df0:	f000 fad4 	bl	800439c <_realloc_r>
 8003df4:	4606      	mov	r6, r0
 8003df6:	2800      	cmp	r0, #0
 8003df8:	d1e0      	bne.n	8003dbc <__ssputs_r+0x5c>
 8003dfa:	6921      	ldr	r1, [r4, #16]
 8003dfc:	4650      	mov	r0, sl
 8003dfe:	f7ff feb7 	bl	8003b70 <_free_r>
 8003e02:	230c      	movs	r3, #12
 8003e04:	f8ca 3000 	str.w	r3, [sl]
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e0e:	81a3      	strh	r3, [r4, #12]
 8003e10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e14:	e7e9      	b.n	8003dea <__ssputs_r+0x8a>
	...

08003e18 <_svfiprintf_r>:
 8003e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e1c:	4698      	mov	r8, r3
 8003e1e:	898b      	ldrh	r3, [r1, #12]
 8003e20:	061b      	lsls	r3, r3, #24
 8003e22:	b09d      	sub	sp, #116	@ 0x74
 8003e24:	4607      	mov	r7, r0
 8003e26:	460d      	mov	r5, r1
 8003e28:	4614      	mov	r4, r2
 8003e2a:	d510      	bpl.n	8003e4e <_svfiprintf_r+0x36>
 8003e2c:	690b      	ldr	r3, [r1, #16]
 8003e2e:	b973      	cbnz	r3, 8003e4e <_svfiprintf_r+0x36>
 8003e30:	2140      	movs	r1, #64	@ 0x40
 8003e32:	f7ff ff09 	bl	8003c48 <_malloc_r>
 8003e36:	6028      	str	r0, [r5, #0]
 8003e38:	6128      	str	r0, [r5, #16]
 8003e3a:	b930      	cbnz	r0, 8003e4a <_svfiprintf_r+0x32>
 8003e3c:	230c      	movs	r3, #12
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e44:	b01d      	add	sp, #116	@ 0x74
 8003e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e4a:	2340      	movs	r3, #64	@ 0x40
 8003e4c:	616b      	str	r3, [r5, #20]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e52:	2320      	movs	r3, #32
 8003e54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e58:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e5c:	2330      	movs	r3, #48	@ 0x30
 8003e5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ffc <_svfiprintf_r+0x1e4>
 8003e62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e66:	f04f 0901 	mov.w	r9, #1
 8003e6a:	4623      	mov	r3, r4
 8003e6c:	469a      	mov	sl, r3
 8003e6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e72:	b10a      	cbz	r2, 8003e78 <_svfiprintf_r+0x60>
 8003e74:	2a25      	cmp	r2, #37	@ 0x25
 8003e76:	d1f9      	bne.n	8003e6c <_svfiprintf_r+0x54>
 8003e78:	ebba 0b04 	subs.w	fp, sl, r4
 8003e7c:	d00b      	beq.n	8003e96 <_svfiprintf_r+0x7e>
 8003e7e:	465b      	mov	r3, fp
 8003e80:	4622      	mov	r2, r4
 8003e82:	4629      	mov	r1, r5
 8003e84:	4638      	mov	r0, r7
 8003e86:	f7ff ff6b 	bl	8003d60 <__ssputs_r>
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	f000 80a7 	beq.w	8003fde <_svfiprintf_r+0x1c6>
 8003e90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e92:	445a      	add	r2, fp
 8003e94:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e96:	f89a 3000 	ldrb.w	r3, [sl]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 809f 	beq.w	8003fde <_svfiprintf_r+0x1c6>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eaa:	f10a 0a01 	add.w	sl, sl, #1
 8003eae:	9304      	str	r3, [sp, #16]
 8003eb0:	9307      	str	r3, [sp, #28]
 8003eb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003eb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003eb8:	4654      	mov	r4, sl
 8003eba:	2205      	movs	r2, #5
 8003ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec0:	484e      	ldr	r0, [pc, #312]	@ (8003ffc <_svfiprintf_r+0x1e4>)
 8003ec2:	f7fc f9a5 	bl	8000210 <memchr>
 8003ec6:	9a04      	ldr	r2, [sp, #16]
 8003ec8:	b9d8      	cbnz	r0, 8003f02 <_svfiprintf_r+0xea>
 8003eca:	06d0      	lsls	r0, r2, #27
 8003ecc:	bf44      	itt	mi
 8003ece:	2320      	movmi	r3, #32
 8003ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ed4:	0711      	lsls	r1, r2, #28
 8003ed6:	bf44      	itt	mi
 8003ed8:	232b      	movmi	r3, #43	@ 0x2b
 8003eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ede:	f89a 3000 	ldrb.w	r3, [sl]
 8003ee2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ee4:	d015      	beq.n	8003f12 <_svfiprintf_r+0xfa>
 8003ee6:	9a07      	ldr	r2, [sp, #28]
 8003ee8:	4654      	mov	r4, sl
 8003eea:	2000      	movs	r0, #0
 8003eec:	f04f 0c0a 	mov.w	ip, #10
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ef6:	3b30      	subs	r3, #48	@ 0x30
 8003ef8:	2b09      	cmp	r3, #9
 8003efa:	d94b      	bls.n	8003f94 <_svfiprintf_r+0x17c>
 8003efc:	b1b0      	cbz	r0, 8003f2c <_svfiprintf_r+0x114>
 8003efe:	9207      	str	r2, [sp, #28]
 8003f00:	e014      	b.n	8003f2c <_svfiprintf_r+0x114>
 8003f02:	eba0 0308 	sub.w	r3, r0, r8
 8003f06:	fa09 f303 	lsl.w	r3, r9, r3
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	9304      	str	r3, [sp, #16]
 8003f0e:	46a2      	mov	sl, r4
 8003f10:	e7d2      	b.n	8003eb8 <_svfiprintf_r+0xa0>
 8003f12:	9b03      	ldr	r3, [sp, #12]
 8003f14:	1d19      	adds	r1, r3, #4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	9103      	str	r1, [sp, #12]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	bfbb      	ittet	lt
 8003f1e:	425b      	neglt	r3, r3
 8003f20:	f042 0202 	orrlt.w	r2, r2, #2
 8003f24:	9307      	strge	r3, [sp, #28]
 8003f26:	9307      	strlt	r3, [sp, #28]
 8003f28:	bfb8      	it	lt
 8003f2a:	9204      	strlt	r2, [sp, #16]
 8003f2c:	7823      	ldrb	r3, [r4, #0]
 8003f2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f30:	d10a      	bne.n	8003f48 <_svfiprintf_r+0x130>
 8003f32:	7863      	ldrb	r3, [r4, #1]
 8003f34:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f36:	d132      	bne.n	8003f9e <_svfiprintf_r+0x186>
 8003f38:	9b03      	ldr	r3, [sp, #12]
 8003f3a:	1d1a      	adds	r2, r3, #4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	9203      	str	r2, [sp, #12]
 8003f40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f44:	3402      	adds	r4, #2
 8003f46:	9305      	str	r3, [sp, #20]
 8003f48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800400c <_svfiprintf_r+0x1f4>
 8003f4c:	7821      	ldrb	r1, [r4, #0]
 8003f4e:	2203      	movs	r2, #3
 8003f50:	4650      	mov	r0, sl
 8003f52:	f7fc f95d 	bl	8000210 <memchr>
 8003f56:	b138      	cbz	r0, 8003f68 <_svfiprintf_r+0x150>
 8003f58:	9b04      	ldr	r3, [sp, #16]
 8003f5a:	eba0 000a 	sub.w	r0, r0, sl
 8003f5e:	2240      	movs	r2, #64	@ 0x40
 8003f60:	4082      	lsls	r2, r0
 8003f62:	4313      	orrs	r3, r2
 8003f64:	3401      	adds	r4, #1
 8003f66:	9304      	str	r3, [sp, #16]
 8003f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f6c:	4824      	ldr	r0, [pc, #144]	@ (8004000 <_svfiprintf_r+0x1e8>)
 8003f6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f72:	2206      	movs	r2, #6
 8003f74:	f7fc f94c 	bl	8000210 <memchr>
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	d036      	beq.n	8003fea <_svfiprintf_r+0x1d2>
 8003f7c:	4b21      	ldr	r3, [pc, #132]	@ (8004004 <_svfiprintf_r+0x1ec>)
 8003f7e:	bb1b      	cbnz	r3, 8003fc8 <_svfiprintf_r+0x1b0>
 8003f80:	9b03      	ldr	r3, [sp, #12]
 8003f82:	3307      	adds	r3, #7
 8003f84:	f023 0307 	bic.w	r3, r3, #7
 8003f88:	3308      	adds	r3, #8
 8003f8a:	9303      	str	r3, [sp, #12]
 8003f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f8e:	4433      	add	r3, r6
 8003f90:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f92:	e76a      	b.n	8003e6a <_svfiprintf_r+0x52>
 8003f94:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f98:	460c      	mov	r4, r1
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	e7a8      	b.n	8003ef0 <_svfiprintf_r+0xd8>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	3401      	adds	r4, #1
 8003fa2:	9305      	str	r3, [sp, #20]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f04f 0c0a 	mov.w	ip, #10
 8003faa:	4620      	mov	r0, r4
 8003fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fb0:	3a30      	subs	r2, #48	@ 0x30
 8003fb2:	2a09      	cmp	r2, #9
 8003fb4:	d903      	bls.n	8003fbe <_svfiprintf_r+0x1a6>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0c6      	beq.n	8003f48 <_svfiprintf_r+0x130>
 8003fba:	9105      	str	r1, [sp, #20]
 8003fbc:	e7c4      	b.n	8003f48 <_svfiprintf_r+0x130>
 8003fbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e7f0      	b.n	8003faa <_svfiprintf_r+0x192>
 8003fc8:	ab03      	add	r3, sp, #12
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	462a      	mov	r2, r5
 8003fce:	4b0e      	ldr	r3, [pc, #56]	@ (8004008 <_svfiprintf_r+0x1f0>)
 8003fd0:	a904      	add	r1, sp, #16
 8003fd2:	4638      	mov	r0, r7
 8003fd4:	f3af 8000 	nop.w
 8003fd8:	1c42      	adds	r2, r0, #1
 8003fda:	4606      	mov	r6, r0
 8003fdc:	d1d6      	bne.n	8003f8c <_svfiprintf_r+0x174>
 8003fde:	89ab      	ldrh	r3, [r5, #12]
 8003fe0:	065b      	lsls	r3, r3, #25
 8003fe2:	f53f af2d 	bmi.w	8003e40 <_svfiprintf_r+0x28>
 8003fe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003fe8:	e72c      	b.n	8003e44 <_svfiprintf_r+0x2c>
 8003fea:	ab03      	add	r3, sp, #12
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	462a      	mov	r2, r5
 8003ff0:	4b05      	ldr	r3, [pc, #20]	@ (8004008 <_svfiprintf_r+0x1f0>)
 8003ff2:	a904      	add	r1, sp, #16
 8003ff4:	4638      	mov	r0, r7
 8003ff6:	f000 f879 	bl	80040ec <_printf_i>
 8003ffa:	e7ed      	b.n	8003fd8 <_svfiprintf_r+0x1c0>
 8003ffc:	08004460 	.word	0x08004460
 8004000:	0800446a 	.word	0x0800446a
 8004004:	00000000 	.word	0x00000000
 8004008:	08003d61 	.word	0x08003d61
 800400c:	08004466 	.word	0x08004466

08004010 <_printf_common>:
 8004010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004014:	4616      	mov	r6, r2
 8004016:	4698      	mov	r8, r3
 8004018:	688a      	ldr	r2, [r1, #8]
 800401a:	690b      	ldr	r3, [r1, #16]
 800401c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004020:	4293      	cmp	r3, r2
 8004022:	bfb8      	it	lt
 8004024:	4613      	movlt	r3, r2
 8004026:	6033      	str	r3, [r6, #0]
 8004028:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800402c:	4607      	mov	r7, r0
 800402e:	460c      	mov	r4, r1
 8004030:	b10a      	cbz	r2, 8004036 <_printf_common+0x26>
 8004032:	3301      	adds	r3, #1
 8004034:	6033      	str	r3, [r6, #0]
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	0699      	lsls	r1, r3, #26
 800403a:	bf42      	ittt	mi
 800403c:	6833      	ldrmi	r3, [r6, #0]
 800403e:	3302      	addmi	r3, #2
 8004040:	6033      	strmi	r3, [r6, #0]
 8004042:	6825      	ldr	r5, [r4, #0]
 8004044:	f015 0506 	ands.w	r5, r5, #6
 8004048:	d106      	bne.n	8004058 <_printf_common+0x48>
 800404a:	f104 0a19 	add.w	sl, r4, #25
 800404e:	68e3      	ldr	r3, [r4, #12]
 8004050:	6832      	ldr	r2, [r6, #0]
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	42ab      	cmp	r3, r5
 8004056:	dc26      	bgt.n	80040a6 <_printf_common+0x96>
 8004058:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800405c:	6822      	ldr	r2, [r4, #0]
 800405e:	3b00      	subs	r3, #0
 8004060:	bf18      	it	ne
 8004062:	2301      	movne	r3, #1
 8004064:	0692      	lsls	r2, r2, #26
 8004066:	d42b      	bmi.n	80040c0 <_printf_common+0xb0>
 8004068:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800406c:	4641      	mov	r1, r8
 800406e:	4638      	mov	r0, r7
 8004070:	47c8      	blx	r9
 8004072:	3001      	adds	r0, #1
 8004074:	d01e      	beq.n	80040b4 <_printf_common+0xa4>
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	6922      	ldr	r2, [r4, #16]
 800407a:	f003 0306 	and.w	r3, r3, #6
 800407e:	2b04      	cmp	r3, #4
 8004080:	bf02      	ittt	eq
 8004082:	68e5      	ldreq	r5, [r4, #12]
 8004084:	6833      	ldreq	r3, [r6, #0]
 8004086:	1aed      	subeq	r5, r5, r3
 8004088:	68a3      	ldr	r3, [r4, #8]
 800408a:	bf0c      	ite	eq
 800408c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004090:	2500      	movne	r5, #0
 8004092:	4293      	cmp	r3, r2
 8004094:	bfc4      	itt	gt
 8004096:	1a9b      	subgt	r3, r3, r2
 8004098:	18ed      	addgt	r5, r5, r3
 800409a:	2600      	movs	r6, #0
 800409c:	341a      	adds	r4, #26
 800409e:	42b5      	cmp	r5, r6
 80040a0:	d11a      	bne.n	80040d8 <_printf_common+0xc8>
 80040a2:	2000      	movs	r0, #0
 80040a4:	e008      	b.n	80040b8 <_printf_common+0xa8>
 80040a6:	2301      	movs	r3, #1
 80040a8:	4652      	mov	r2, sl
 80040aa:	4641      	mov	r1, r8
 80040ac:	4638      	mov	r0, r7
 80040ae:	47c8      	blx	r9
 80040b0:	3001      	adds	r0, #1
 80040b2:	d103      	bne.n	80040bc <_printf_common+0xac>
 80040b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040bc:	3501      	adds	r5, #1
 80040be:	e7c6      	b.n	800404e <_printf_common+0x3e>
 80040c0:	18e1      	adds	r1, r4, r3
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	2030      	movs	r0, #48	@ 0x30
 80040c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040ca:	4422      	add	r2, r4
 80040cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040d4:	3302      	adds	r3, #2
 80040d6:	e7c7      	b.n	8004068 <_printf_common+0x58>
 80040d8:	2301      	movs	r3, #1
 80040da:	4622      	mov	r2, r4
 80040dc:	4641      	mov	r1, r8
 80040de:	4638      	mov	r0, r7
 80040e0:	47c8      	blx	r9
 80040e2:	3001      	adds	r0, #1
 80040e4:	d0e6      	beq.n	80040b4 <_printf_common+0xa4>
 80040e6:	3601      	adds	r6, #1
 80040e8:	e7d9      	b.n	800409e <_printf_common+0x8e>
	...

080040ec <_printf_i>:
 80040ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040f0:	7e0f      	ldrb	r7, [r1, #24]
 80040f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040f4:	2f78      	cmp	r7, #120	@ 0x78
 80040f6:	4691      	mov	r9, r2
 80040f8:	4680      	mov	r8, r0
 80040fa:	460c      	mov	r4, r1
 80040fc:	469a      	mov	sl, r3
 80040fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004102:	d807      	bhi.n	8004114 <_printf_i+0x28>
 8004104:	2f62      	cmp	r7, #98	@ 0x62
 8004106:	d80a      	bhi.n	800411e <_printf_i+0x32>
 8004108:	2f00      	cmp	r7, #0
 800410a:	f000 80d2 	beq.w	80042b2 <_printf_i+0x1c6>
 800410e:	2f58      	cmp	r7, #88	@ 0x58
 8004110:	f000 80b9 	beq.w	8004286 <_printf_i+0x19a>
 8004114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004118:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800411c:	e03a      	b.n	8004194 <_printf_i+0xa8>
 800411e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004122:	2b15      	cmp	r3, #21
 8004124:	d8f6      	bhi.n	8004114 <_printf_i+0x28>
 8004126:	a101      	add	r1, pc, #4	@ (adr r1, 800412c <_printf_i+0x40>)
 8004128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800412c:	08004185 	.word	0x08004185
 8004130:	08004199 	.word	0x08004199
 8004134:	08004115 	.word	0x08004115
 8004138:	08004115 	.word	0x08004115
 800413c:	08004115 	.word	0x08004115
 8004140:	08004115 	.word	0x08004115
 8004144:	08004199 	.word	0x08004199
 8004148:	08004115 	.word	0x08004115
 800414c:	08004115 	.word	0x08004115
 8004150:	08004115 	.word	0x08004115
 8004154:	08004115 	.word	0x08004115
 8004158:	08004299 	.word	0x08004299
 800415c:	080041c3 	.word	0x080041c3
 8004160:	08004253 	.word	0x08004253
 8004164:	08004115 	.word	0x08004115
 8004168:	08004115 	.word	0x08004115
 800416c:	080042bb 	.word	0x080042bb
 8004170:	08004115 	.word	0x08004115
 8004174:	080041c3 	.word	0x080041c3
 8004178:	08004115 	.word	0x08004115
 800417c:	08004115 	.word	0x08004115
 8004180:	0800425b 	.word	0x0800425b
 8004184:	6833      	ldr	r3, [r6, #0]
 8004186:	1d1a      	adds	r2, r3, #4
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6032      	str	r2, [r6, #0]
 800418c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004190:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004194:	2301      	movs	r3, #1
 8004196:	e09d      	b.n	80042d4 <_printf_i+0x1e8>
 8004198:	6833      	ldr	r3, [r6, #0]
 800419a:	6820      	ldr	r0, [r4, #0]
 800419c:	1d19      	adds	r1, r3, #4
 800419e:	6031      	str	r1, [r6, #0]
 80041a0:	0606      	lsls	r6, r0, #24
 80041a2:	d501      	bpl.n	80041a8 <_printf_i+0xbc>
 80041a4:	681d      	ldr	r5, [r3, #0]
 80041a6:	e003      	b.n	80041b0 <_printf_i+0xc4>
 80041a8:	0645      	lsls	r5, r0, #25
 80041aa:	d5fb      	bpl.n	80041a4 <_printf_i+0xb8>
 80041ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041b0:	2d00      	cmp	r5, #0
 80041b2:	da03      	bge.n	80041bc <_printf_i+0xd0>
 80041b4:	232d      	movs	r3, #45	@ 0x2d
 80041b6:	426d      	negs	r5, r5
 80041b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041bc:	4859      	ldr	r0, [pc, #356]	@ (8004324 <_printf_i+0x238>)
 80041be:	230a      	movs	r3, #10
 80041c0:	e011      	b.n	80041e6 <_printf_i+0xfa>
 80041c2:	6821      	ldr	r1, [r4, #0]
 80041c4:	6833      	ldr	r3, [r6, #0]
 80041c6:	0608      	lsls	r0, r1, #24
 80041c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80041cc:	d402      	bmi.n	80041d4 <_printf_i+0xe8>
 80041ce:	0649      	lsls	r1, r1, #25
 80041d0:	bf48      	it	mi
 80041d2:	b2ad      	uxthmi	r5, r5
 80041d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80041d6:	4853      	ldr	r0, [pc, #332]	@ (8004324 <_printf_i+0x238>)
 80041d8:	6033      	str	r3, [r6, #0]
 80041da:	bf14      	ite	ne
 80041dc:	230a      	movne	r3, #10
 80041de:	2308      	moveq	r3, #8
 80041e0:	2100      	movs	r1, #0
 80041e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80041e6:	6866      	ldr	r6, [r4, #4]
 80041e8:	60a6      	str	r6, [r4, #8]
 80041ea:	2e00      	cmp	r6, #0
 80041ec:	bfa2      	ittt	ge
 80041ee:	6821      	ldrge	r1, [r4, #0]
 80041f0:	f021 0104 	bicge.w	r1, r1, #4
 80041f4:	6021      	strge	r1, [r4, #0]
 80041f6:	b90d      	cbnz	r5, 80041fc <_printf_i+0x110>
 80041f8:	2e00      	cmp	r6, #0
 80041fa:	d04b      	beq.n	8004294 <_printf_i+0x1a8>
 80041fc:	4616      	mov	r6, r2
 80041fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004202:	fb03 5711 	mls	r7, r3, r1, r5
 8004206:	5dc7      	ldrb	r7, [r0, r7]
 8004208:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800420c:	462f      	mov	r7, r5
 800420e:	42bb      	cmp	r3, r7
 8004210:	460d      	mov	r5, r1
 8004212:	d9f4      	bls.n	80041fe <_printf_i+0x112>
 8004214:	2b08      	cmp	r3, #8
 8004216:	d10b      	bne.n	8004230 <_printf_i+0x144>
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	07df      	lsls	r7, r3, #31
 800421c:	d508      	bpl.n	8004230 <_printf_i+0x144>
 800421e:	6923      	ldr	r3, [r4, #16]
 8004220:	6861      	ldr	r1, [r4, #4]
 8004222:	4299      	cmp	r1, r3
 8004224:	bfde      	ittt	le
 8004226:	2330      	movle	r3, #48	@ 0x30
 8004228:	f806 3c01 	strble.w	r3, [r6, #-1]
 800422c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004230:	1b92      	subs	r2, r2, r6
 8004232:	6122      	str	r2, [r4, #16]
 8004234:	f8cd a000 	str.w	sl, [sp]
 8004238:	464b      	mov	r3, r9
 800423a:	aa03      	add	r2, sp, #12
 800423c:	4621      	mov	r1, r4
 800423e:	4640      	mov	r0, r8
 8004240:	f7ff fee6 	bl	8004010 <_printf_common>
 8004244:	3001      	adds	r0, #1
 8004246:	d14a      	bne.n	80042de <_printf_i+0x1f2>
 8004248:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800424c:	b004      	add	sp, #16
 800424e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	f043 0320 	orr.w	r3, r3, #32
 8004258:	6023      	str	r3, [r4, #0]
 800425a:	4833      	ldr	r0, [pc, #204]	@ (8004328 <_printf_i+0x23c>)
 800425c:	2778      	movs	r7, #120	@ 0x78
 800425e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	6831      	ldr	r1, [r6, #0]
 8004266:	061f      	lsls	r7, r3, #24
 8004268:	f851 5b04 	ldr.w	r5, [r1], #4
 800426c:	d402      	bmi.n	8004274 <_printf_i+0x188>
 800426e:	065f      	lsls	r7, r3, #25
 8004270:	bf48      	it	mi
 8004272:	b2ad      	uxthmi	r5, r5
 8004274:	6031      	str	r1, [r6, #0]
 8004276:	07d9      	lsls	r1, r3, #31
 8004278:	bf44      	itt	mi
 800427a:	f043 0320 	orrmi.w	r3, r3, #32
 800427e:	6023      	strmi	r3, [r4, #0]
 8004280:	b11d      	cbz	r5, 800428a <_printf_i+0x19e>
 8004282:	2310      	movs	r3, #16
 8004284:	e7ac      	b.n	80041e0 <_printf_i+0xf4>
 8004286:	4827      	ldr	r0, [pc, #156]	@ (8004324 <_printf_i+0x238>)
 8004288:	e7e9      	b.n	800425e <_printf_i+0x172>
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	f023 0320 	bic.w	r3, r3, #32
 8004290:	6023      	str	r3, [r4, #0]
 8004292:	e7f6      	b.n	8004282 <_printf_i+0x196>
 8004294:	4616      	mov	r6, r2
 8004296:	e7bd      	b.n	8004214 <_printf_i+0x128>
 8004298:	6833      	ldr	r3, [r6, #0]
 800429a:	6825      	ldr	r5, [r4, #0]
 800429c:	6961      	ldr	r1, [r4, #20]
 800429e:	1d18      	adds	r0, r3, #4
 80042a0:	6030      	str	r0, [r6, #0]
 80042a2:	062e      	lsls	r6, r5, #24
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	d501      	bpl.n	80042ac <_printf_i+0x1c0>
 80042a8:	6019      	str	r1, [r3, #0]
 80042aa:	e002      	b.n	80042b2 <_printf_i+0x1c6>
 80042ac:	0668      	lsls	r0, r5, #25
 80042ae:	d5fb      	bpl.n	80042a8 <_printf_i+0x1bc>
 80042b0:	8019      	strh	r1, [r3, #0]
 80042b2:	2300      	movs	r3, #0
 80042b4:	6123      	str	r3, [r4, #16]
 80042b6:	4616      	mov	r6, r2
 80042b8:	e7bc      	b.n	8004234 <_printf_i+0x148>
 80042ba:	6833      	ldr	r3, [r6, #0]
 80042bc:	1d1a      	adds	r2, r3, #4
 80042be:	6032      	str	r2, [r6, #0]
 80042c0:	681e      	ldr	r6, [r3, #0]
 80042c2:	6862      	ldr	r2, [r4, #4]
 80042c4:	2100      	movs	r1, #0
 80042c6:	4630      	mov	r0, r6
 80042c8:	f7fb ffa2 	bl	8000210 <memchr>
 80042cc:	b108      	cbz	r0, 80042d2 <_printf_i+0x1e6>
 80042ce:	1b80      	subs	r0, r0, r6
 80042d0:	6060      	str	r0, [r4, #4]
 80042d2:	6863      	ldr	r3, [r4, #4]
 80042d4:	6123      	str	r3, [r4, #16]
 80042d6:	2300      	movs	r3, #0
 80042d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042dc:	e7aa      	b.n	8004234 <_printf_i+0x148>
 80042de:	6923      	ldr	r3, [r4, #16]
 80042e0:	4632      	mov	r2, r6
 80042e2:	4649      	mov	r1, r9
 80042e4:	4640      	mov	r0, r8
 80042e6:	47d0      	blx	sl
 80042e8:	3001      	adds	r0, #1
 80042ea:	d0ad      	beq.n	8004248 <_printf_i+0x15c>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	079b      	lsls	r3, r3, #30
 80042f0:	d413      	bmi.n	800431a <_printf_i+0x22e>
 80042f2:	68e0      	ldr	r0, [r4, #12]
 80042f4:	9b03      	ldr	r3, [sp, #12]
 80042f6:	4298      	cmp	r0, r3
 80042f8:	bfb8      	it	lt
 80042fa:	4618      	movlt	r0, r3
 80042fc:	e7a6      	b.n	800424c <_printf_i+0x160>
 80042fe:	2301      	movs	r3, #1
 8004300:	4632      	mov	r2, r6
 8004302:	4649      	mov	r1, r9
 8004304:	4640      	mov	r0, r8
 8004306:	47d0      	blx	sl
 8004308:	3001      	adds	r0, #1
 800430a:	d09d      	beq.n	8004248 <_printf_i+0x15c>
 800430c:	3501      	adds	r5, #1
 800430e:	68e3      	ldr	r3, [r4, #12]
 8004310:	9903      	ldr	r1, [sp, #12]
 8004312:	1a5b      	subs	r3, r3, r1
 8004314:	42ab      	cmp	r3, r5
 8004316:	dcf2      	bgt.n	80042fe <_printf_i+0x212>
 8004318:	e7eb      	b.n	80042f2 <_printf_i+0x206>
 800431a:	2500      	movs	r5, #0
 800431c:	f104 0619 	add.w	r6, r4, #25
 8004320:	e7f5      	b.n	800430e <_printf_i+0x222>
 8004322:	bf00      	nop
 8004324:	08004471 	.word	0x08004471
 8004328:	08004482 	.word	0x08004482

0800432c <memmove>:
 800432c:	4288      	cmp	r0, r1
 800432e:	b510      	push	{r4, lr}
 8004330:	eb01 0402 	add.w	r4, r1, r2
 8004334:	d902      	bls.n	800433c <memmove+0x10>
 8004336:	4284      	cmp	r4, r0
 8004338:	4623      	mov	r3, r4
 800433a:	d807      	bhi.n	800434c <memmove+0x20>
 800433c:	1e43      	subs	r3, r0, #1
 800433e:	42a1      	cmp	r1, r4
 8004340:	d008      	beq.n	8004354 <memmove+0x28>
 8004342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004346:	f803 2f01 	strb.w	r2, [r3, #1]!
 800434a:	e7f8      	b.n	800433e <memmove+0x12>
 800434c:	4402      	add	r2, r0
 800434e:	4601      	mov	r1, r0
 8004350:	428a      	cmp	r2, r1
 8004352:	d100      	bne.n	8004356 <memmove+0x2a>
 8004354:	bd10      	pop	{r4, pc}
 8004356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800435a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800435e:	e7f7      	b.n	8004350 <memmove+0x24>

08004360 <_sbrk_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4d06      	ldr	r5, [pc, #24]	@ (800437c <_sbrk_r+0x1c>)
 8004364:	2300      	movs	r3, #0
 8004366:	4604      	mov	r4, r0
 8004368:	4608      	mov	r0, r1
 800436a:	602b      	str	r3, [r5, #0]
 800436c:	f7fc fe22 	bl	8000fb4 <_sbrk>
 8004370:	1c43      	adds	r3, r0, #1
 8004372:	d102      	bne.n	800437a <_sbrk_r+0x1a>
 8004374:	682b      	ldr	r3, [r5, #0]
 8004376:	b103      	cbz	r3, 800437a <_sbrk_r+0x1a>
 8004378:	6023      	str	r3, [r4, #0]
 800437a:	bd38      	pop	{r3, r4, r5, pc}
 800437c:	20000258 	.word	0x20000258

08004380 <memcpy>:
 8004380:	440a      	add	r2, r1
 8004382:	4291      	cmp	r1, r2
 8004384:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004388:	d100      	bne.n	800438c <memcpy+0xc>
 800438a:	4770      	bx	lr
 800438c:	b510      	push	{r4, lr}
 800438e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004396:	4291      	cmp	r1, r2
 8004398:	d1f9      	bne.n	800438e <memcpy+0xe>
 800439a:	bd10      	pop	{r4, pc}

0800439c <_realloc_r>:
 800439c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043a0:	4680      	mov	r8, r0
 80043a2:	4615      	mov	r5, r2
 80043a4:	460c      	mov	r4, r1
 80043a6:	b921      	cbnz	r1, 80043b2 <_realloc_r+0x16>
 80043a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ac:	4611      	mov	r1, r2
 80043ae:	f7ff bc4b 	b.w	8003c48 <_malloc_r>
 80043b2:	b92a      	cbnz	r2, 80043c0 <_realloc_r+0x24>
 80043b4:	f7ff fbdc 	bl	8003b70 <_free_r>
 80043b8:	2400      	movs	r4, #0
 80043ba:	4620      	mov	r0, r4
 80043bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043c0:	f000 f81a 	bl	80043f8 <_malloc_usable_size_r>
 80043c4:	4285      	cmp	r5, r0
 80043c6:	4606      	mov	r6, r0
 80043c8:	d802      	bhi.n	80043d0 <_realloc_r+0x34>
 80043ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80043ce:	d8f4      	bhi.n	80043ba <_realloc_r+0x1e>
 80043d0:	4629      	mov	r1, r5
 80043d2:	4640      	mov	r0, r8
 80043d4:	f7ff fc38 	bl	8003c48 <_malloc_r>
 80043d8:	4607      	mov	r7, r0
 80043da:	2800      	cmp	r0, #0
 80043dc:	d0ec      	beq.n	80043b8 <_realloc_r+0x1c>
 80043de:	42b5      	cmp	r5, r6
 80043e0:	462a      	mov	r2, r5
 80043e2:	4621      	mov	r1, r4
 80043e4:	bf28      	it	cs
 80043e6:	4632      	movcs	r2, r6
 80043e8:	f7ff ffca 	bl	8004380 <memcpy>
 80043ec:	4621      	mov	r1, r4
 80043ee:	4640      	mov	r0, r8
 80043f0:	f7ff fbbe 	bl	8003b70 <_free_r>
 80043f4:	463c      	mov	r4, r7
 80043f6:	e7e0      	b.n	80043ba <_realloc_r+0x1e>

080043f8 <_malloc_usable_size_r>:
 80043f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043fc:	1f18      	subs	r0, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bfbc      	itt	lt
 8004402:	580b      	ldrlt	r3, [r1, r0]
 8004404:	18c0      	addlt	r0, r0, r3
 8004406:	4770      	bx	lr

08004408 <_init>:
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	bf00      	nop
 800440c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440e:	bc08      	pop	{r3}
 8004410:	469e      	mov	lr, r3
 8004412:	4770      	bx	lr

08004414 <_fini>:
 8004414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004416:	bf00      	nop
 8004418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441a:	bc08      	pop	{r3}
 800441c:	469e      	mov	lr, r3
 800441e:	4770      	bx	lr
