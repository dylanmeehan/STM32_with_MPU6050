
MPU6500_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b88  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005d58  08005d58  00006d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dcc  08005dcc  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005dcc  08005dcc  00006dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dd4  08005dd4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005dd4  08005dd4  00006dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ddc  08005ddc  00006ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005de0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000005c  08005e3c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08005e3c  000072b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113f9  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002472  00000000  00000000  00018485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  0001a8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c48  00000000  00000000  0001b880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246ae  00000000  00000000  0001c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f70  00000000  00000000  00040b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d40a7  00000000  00000000  00053ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127b8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000484c  00000000  00000000  00127bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012c41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005d40 	.word	0x08005d40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005d40 	.word	0x08005d40

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2f>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000884:	bf24      	itt	cs
 8000886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800088a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800088e:	d90d      	bls.n	80008ac <__aeabi_d2f+0x30>
 8000890:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800089c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a4:	bf08      	it	eq
 80008a6:	f020 0001 	biceq.w	r0, r0, #1
 80008aa:	4770      	bx	lr
 80008ac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008b0:	d121      	bne.n	80008f6 <__aeabi_d2f+0x7a>
 80008b2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008b6:	bfbc      	itt	lt
 80008b8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008bc:	4770      	bxlt	lr
 80008be:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008c6:	f1c2 0218 	rsb	r2, r2, #24
 80008ca:	f1c2 0c20 	rsb	ip, r2, #32
 80008ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d2:	fa20 f002 	lsr.w	r0, r0, r2
 80008d6:	bf18      	it	ne
 80008d8:	f040 0001 	orrne.w	r0, r0, #1
 80008dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e8:	ea40 000c 	orr.w	r0, r0, ip
 80008ec:	fa23 f302 	lsr.w	r3, r3, r2
 80008f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f4:	e7cc      	b.n	8000890 <__aeabi_d2f+0x14>
 80008f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fa:	d107      	bne.n	800090c <__aeabi_d2f+0x90>
 80008fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000900:	bf1e      	ittt	ne
 8000902:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000906:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800090a:	4770      	bxne	lr
 800090c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000910:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000914:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800092c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000930:	f000 b96a 	b.w	8000c08 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9d08      	ldr	r5, [sp, #32]
 8000952:	460c      	mov	r4, r1
 8000954:	2b00      	cmp	r3, #0
 8000956:	d14e      	bne.n	80009f6 <__udivmoddi4+0xaa>
 8000958:	4694      	mov	ip, r2
 800095a:	458c      	cmp	ip, r1
 800095c:	4686      	mov	lr, r0
 800095e:	fab2 f282 	clz	r2, r2
 8000962:	d962      	bls.n	8000a2a <__udivmoddi4+0xde>
 8000964:	b14a      	cbz	r2, 800097a <__udivmoddi4+0x2e>
 8000966:	f1c2 0320 	rsb	r3, r2, #32
 800096a:	4091      	lsls	r1, r2
 800096c:	fa20 f303 	lsr.w	r3, r0, r3
 8000970:	fa0c fc02 	lsl.w	ip, ip, r2
 8000974:	4319      	orrs	r1, r3
 8000976:	fa00 fe02 	lsl.w	lr, r0, r2
 800097a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800097e:	fa1f f68c 	uxth.w	r6, ip
 8000982:	fbb1 f4f7 	udiv	r4, r1, r7
 8000986:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800098a:	fb07 1114 	mls	r1, r7, r4, r1
 800098e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000992:	fb04 f106 	mul.w	r1, r4, r6
 8000996:	4299      	cmp	r1, r3
 8000998:	d90a      	bls.n	80009b0 <__udivmoddi4+0x64>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80009a2:	f080 8112 	bcs.w	8000bca <__udivmoddi4+0x27e>
 80009a6:	4299      	cmp	r1, r3
 80009a8:	f240 810f 	bls.w	8000bca <__udivmoddi4+0x27e>
 80009ac:	3c02      	subs	r4, #2
 80009ae:	4463      	add	r3, ip
 80009b0:	1a59      	subs	r1, r3, r1
 80009b2:	fa1f f38e 	uxth.w	r3, lr
 80009b6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009ba:	fb07 1110 	mls	r1, r7, r0, r1
 80009be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009c2:	fb00 f606 	mul.w	r6, r0, r6
 80009c6:	429e      	cmp	r6, r3
 80009c8:	d90a      	bls.n	80009e0 <__udivmoddi4+0x94>
 80009ca:	eb1c 0303 	adds.w	r3, ip, r3
 80009ce:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80009d2:	f080 80fc 	bcs.w	8000bce <__udivmoddi4+0x282>
 80009d6:	429e      	cmp	r6, r3
 80009d8:	f240 80f9 	bls.w	8000bce <__udivmoddi4+0x282>
 80009dc:	4463      	add	r3, ip
 80009de:	3802      	subs	r0, #2
 80009e0:	1b9b      	subs	r3, r3, r6
 80009e2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009e6:	2100      	movs	r1, #0
 80009e8:	b11d      	cbz	r5, 80009f2 <__udivmoddi4+0xa6>
 80009ea:	40d3      	lsrs	r3, r2
 80009ec:	2200      	movs	r2, #0
 80009ee:	e9c5 3200 	strd	r3, r2, [r5]
 80009f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f6:	428b      	cmp	r3, r1
 80009f8:	d905      	bls.n	8000a06 <__udivmoddi4+0xba>
 80009fa:	b10d      	cbz	r5, 8000a00 <__udivmoddi4+0xb4>
 80009fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000a00:	2100      	movs	r1, #0
 8000a02:	4608      	mov	r0, r1
 8000a04:	e7f5      	b.n	80009f2 <__udivmoddi4+0xa6>
 8000a06:	fab3 f183 	clz	r1, r3
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d146      	bne.n	8000a9c <__udivmoddi4+0x150>
 8000a0e:	42a3      	cmp	r3, r4
 8000a10:	d302      	bcc.n	8000a18 <__udivmoddi4+0xcc>
 8000a12:	4290      	cmp	r0, r2
 8000a14:	f0c0 80f0 	bcc.w	8000bf8 <__udivmoddi4+0x2ac>
 8000a18:	1a86      	subs	r6, r0, r2
 8000a1a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a1e:	2001      	movs	r0, #1
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d0e6      	beq.n	80009f2 <__udivmoddi4+0xa6>
 8000a24:	e9c5 6300 	strd	r6, r3, [r5]
 8000a28:	e7e3      	b.n	80009f2 <__udivmoddi4+0xa6>
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	f040 8090 	bne.w	8000b50 <__udivmoddi4+0x204>
 8000a30:	eba1 040c 	sub.w	r4, r1, ip
 8000a34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a38:	fa1f f78c 	uxth.w	r7, ip
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a46:	fb08 4416 	mls	r4, r8, r6, r4
 8000a4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a4e:	fb07 f006 	mul.w	r0, r7, r6
 8000a52:	4298      	cmp	r0, r3
 8000a54:	d908      	bls.n	8000a68 <__udivmoddi4+0x11c>
 8000a56:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000a5e:	d202      	bcs.n	8000a66 <__udivmoddi4+0x11a>
 8000a60:	4298      	cmp	r0, r3
 8000a62:	f200 80cd 	bhi.w	8000c00 <__udivmoddi4+0x2b4>
 8000a66:	4626      	mov	r6, r4
 8000a68:	1a1c      	subs	r4, r3, r0
 8000a6a:	fa1f f38e 	uxth.w	r3, lr
 8000a6e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a72:	fb08 4410 	mls	r4, r8, r0, r4
 8000a76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a7a:	fb00 f707 	mul.w	r7, r0, r7
 8000a7e:	429f      	cmp	r7, r3
 8000a80:	d908      	bls.n	8000a94 <__udivmoddi4+0x148>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000a8a:	d202      	bcs.n	8000a92 <__udivmoddi4+0x146>
 8000a8c:	429f      	cmp	r7, r3
 8000a8e:	f200 80b0 	bhi.w	8000bf2 <__udivmoddi4+0x2a6>
 8000a92:	4620      	mov	r0, r4
 8000a94:	1bdb      	subs	r3, r3, r7
 8000a96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a9a:	e7a5      	b.n	80009e8 <__udivmoddi4+0x9c>
 8000a9c:	f1c1 0620 	rsb	r6, r1, #32
 8000aa0:	408b      	lsls	r3, r1
 8000aa2:	fa22 f706 	lsr.w	r7, r2, r6
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000aac:	fa04 f301 	lsl.w	r3, r4, r1
 8000ab0:	ea43 030c 	orr.w	r3, r3, ip
 8000ab4:	40f4      	lsrs	r4, r6
 8000ab6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aba:	0c38      	lsrs	r0, r7, #16
 8000abc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ac0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ac4:	fa1f fc87 	uxth.w	ip, r7
 8000ac8:	fb00 441e 	mls	r4, r0, lr, r4
 8000acc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ad0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ad4:	45a1      	cmp	r9, r4
 8000ad6:	fa02 f201 	lsl.w	r2, r2, r1
 8000ada:	d90a      	bls.n	8000af2 <__udivmoddi4+0x1a6>
 8000adc:	193c      	adds	r4, r7, r4
 8000ade:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ae2:	f080 8084 	bcs.w	8000bee <__udivmoddi4+0x2a2>
 8000ae6:	45a1      	cmp	r9, r4
 8000ae8:	f240 8081 	bls.w	8000bee <__udivmoddi4+0x2a2>
 8000aec:	f1ae 0e02 	sub.w	lr, lr, #2
 8000af0:	443c      	add	r4, r7
 8000af2:	eba4 0409 	sub.w	r4, r4, r9
 8000af6:	fa1f f983 	uxth.w	r9, r3
 8000afa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000afe:	fb00 4413 	mls	r4, r0, r3, r4
 8000b02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b0a:	45a4      	cmp	ip, r4
 8000b0c:	d907      	bls.n	8000b1e <__udivmoddi4+0x1d2>
 8000b0e:	193c      	adds	r4, r7, r4
 8000b10:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000b14:	d267      	bcs.n	8000be6 <__udivmoddi4+0x29a>
 8000b16:	45a4      	cmp	ip, r4
 8000b18:	d965      	bls.n	8000be6 <__udivmoddi4+0x29a>
 8000b1a:	3b02      	subs	r3, #2
 8000b1c:	443c      	add	r4, r7
 8000b1e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b22:	fba0 9302 	umull	r9, r3, r0, r2
 8000b26:	eba4 040c 	sub.w	r4, r4, ip
 8000b2a:	429c      	cmp	r4, r3
 8000b2c:	46ce      	mov	lr, r9
 8000b2e:	469c      	mov	ip, r3
 8000b30:	d351      	bcc.n	8000bd6 <__udivmoddi4+0x28a>
 8000b32:	d04e      	beq.n	8000bd2 <__udivmoddi4+0x286>
 8000b34:	b155      	cbz	r5, 8000b4c <__udivmoddi4+0x200>
 8000b36:	ebb8 030e 	subs.w	r3, r8, lr
 8000b3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b42:	40cb      	lsrs	r3, r1
 8000b44:	431e      	orrs	r6, r3
 8000b46:	40cc      	lsrs	r4, r1
 8000b48:	e9c5 6400 	strd	r6, r4, [r5]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e750      	b.n	80009f2 <__udivmoddi4+0xa6>
 8000b50:	f1c2 0320 	rsb	r3, r2, #32
 8000b54:	fa20 f103 	lsr.w	r1, r0, r3
 8000b58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b60:	4094      	lsls	r4, r2
 8000b62:	430c      	orrs	r4, r1
 8000b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b68:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b6c:	fa1f f78c 	uxth.w	r7, ip
 8000b70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b74:	fb08 3110 	mls	r1, r8, r0, r3
 8000b78:	0c23      	lsrs	r3, r4, #16
 8000b7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7e:	fb00 f107 	mul.w	r1, r0, r7
 8000b82:	4299      	cmp	r1, r3
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0x24c>
 8000b86:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000b8e:	d22c      	bcs.n	8000bea <__udivmoddi4+0x29e>
 8000b90:	4299      	cmp	r1, r3
 8000b92:	d92a      	bls.n	8000bea <__udivmoddi4+0x29e>
 8000b94:	3802      	subs	r0, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ba0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ba4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba8:	fb01 f307 	mul.w	r3, r1, r7
 8000bac:	42a3      	cmp	r3, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x276>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000bb8:	d213      	bcs.n	8000be2 <__udivmoddi4+0x296>
 8000bba:	42a3      	cmp	r3, r4
 8000bbc:	d911      	bls.n	8000be2 <__udivmoddi4+0x296>
 8000bbe:	3902      	subs	r1, #2
 8000bc0:	4464      	add	r4, ip
 8000bc2:	1ae4      	subs	r4, r4, r3
 8000bc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bc8:	e739      	b.n	8000a3e <__udivmoddi4+0xf2>
 8000bca:	4604      	mov	r4, r0
 8000bcc:	e6f0      	b.n	80009b0 <__udivmoddi4+0x64>
 8000bce:	4608      	mov	r0, r1
 8000bd0:	e706      	b.n	80009e0 <__udivmoddi4+0x94>
 8000bd2:	45c8      	cmp	r8, r9
 8000bd4:	d2ae      	bcs.n	8000b34 <__udivmoddi4+0x1e8>
 8000bd6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bda:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bde:	3801      	subs	r0, #1
 8000be0:	e7a8      	b.n	8000b34 <__udivmoddi4+0x1e8>
 8000be2:	4631      	mov	r1, r6
 8000be4:	e7ed      	b.n	8000bc2 <__udivmoddi4+0x276>
 8000be6:	4603      	mov	r3, r0
 8000be8:	e799      	b.n	8000b1e <__udivmoddi4+0x1d2>
 8000bea:	4630      	mov	r0, r6
 8000bec:	e7d4      	b.n	8000b98 <__udivmoddi4+0x24c>
 8000bee:	46d6      	mov	lr, sl
 8000bf0:	e77f      	b.n	8000af2 <__udivmoddi4+0x1a6>
 8000bf2:	4463      	add	r3, ip
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	e74d      	b.n	8000a94 <__udivmoddi4+0x148>
 8000bf8:	4606      	mov	r6, r0
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	e70f      	b.n	8000a20 <__udivmoddi4+0xd4>
 8000c00:	3e02      	subs	r6, #2
 8000c02:	4463      	add	r3, ip
 8000c04:	e730      	b.n	8000a68 <__udivmoddi4+0x11c>
 8000c06:	bf00      	nop

08000c08 <__aeabi_idiv0>:
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <_ZN7Mpu6050C1Ev>:


extern UART_HandleTypeDef huart2; 
extern I2C_HandleTypeDef hi2c1;

Mpu6050::Mpu6050(){
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	721a      	strb	r2, [r3, #8]

}
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <_ZN7Mpu60504InitE9GyroScale10AccelScale>:

void Mpu6050::Init(GyroScale gyro_scale, AccelScale accel_scale){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b092      	sub	sp, #72	@ 0x48
 8000c38:	af02      	add	r7, sp, #8
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  gyro_scale_ = gyro_scale;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	601a      	str	r2, [r3, #0]
  accel_scale_ = accel_scale;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	605a      	str	r2, [r3, #4]

  HAL_StatusTypeDef transmit_status;


  // turn on device
  uint8_t pwr_mgmt_1_register = 0x6B;
 8000c4c:	236b      	movs	r3, #107	@ 0x6b
 8000c4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint8_t pwr_mgmt_1_data = 0x01; // 1 to use gryoscope mems and clock
 8000c52:	2301      	movs	r3, #1
 8000c54:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  uint8_t data[2] = {pwr_mgmt_1_register, pwr_mgmt_1_data};
 8000c58:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000c5c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000c60:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000c64:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  transmit_status = HAL_I2C_Master_Transmit(&hi2c1, Mpu6050::address,
 8000c68:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2302      	movs	r3, #2
 8000c74:	21d0      	movs	r1, #208	@ 0xd0
 8000c76:	4864      	ldr	r0, [pc, #400]	@ (8000e08 <_ZN7Mpu60504InitE9GyroScale10AccelScale+0x1d4>)
 8000c78:	f001 fab8 	bl	80021ec <HAL_I2C_Master_Transmit>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                                         data, 2, HAL_MAX_DELAY);

  // sample rate config
  uint8_t sample_rate_register = 0x19;
 8000c82:	2319      	movs	r3, #25
 8000c84:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  uint8_t sample_rate_data =  800; //31; // 8000 Hz / (1 + 31) = 250 Hz
 8000c88:	2320      	movs	r3, #32
 8000c8a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  uint8_t sample_rate_data_array[2] = {sample_rate_register, sample_rate_data};
 8000c8e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000c92:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000c96:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000c9a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  transmit_status = HAL_I2C_Master_Transmit(&hi2c1, Mpu6050::address,
 8000c9e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2302      	movs	r3, #2
 8000caa:	21d0      	movs	r1, #208	@ 0xd0
 8000cac:	4856      	ldr	r0, [pc, #344]	@ (8000e08 <_ZN7Mpu60504InitE9GyroScale10AccelScale+0x1d4>)
 8000cae:	f001 fa9d 	bl	80021ec <HAL_I2C_Master_Transmit>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                                         sample_rate_data_array, 2, HAL_MAX_DELAY);

  // set general config
  uint8_t config_register = 0x1A;
 8000cb8:	231a      	movs	r3, #26
 8000cba:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  uint8_t config_data = 0x00;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  config_data |= 0x00; // 250 Hz
  uint8_t config_data_array[2] = {config_register, config_data};
 8000cc4:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000cc8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000ccc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000cd0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  transmit_status = HAL_I2C_Master_Transmit(&hi2c1, Mpu6050::address,
 8000cd4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	2302      	movs	r3, #2
 8000ce0:	21d0      	movs	r1, #208	@ 0xd0
 8000ce2:	4849      	ldr	r0, [pc, #292]	@ (8000e08 <_ZN7Mpu60504InitE9GyroScale10AccelScale+0x1d4>)
 8000ce4:	f001 fa82 	bl	80021ec <HAL_I2C_Master_Transmit>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                                         config_data_array, 2, HAL_MAX_DELAY);

  // set accel config
  uint8_t accel_config_register = 0x1C;
 8000cee:	231c      	movs	r3, #28
 8000cf0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  uint8_t accel_config = 0x00;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	accel_config |= (static_cast<uint8_t>(accel_scale_) << 3);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	b25a      	sxtb	r2, r3
 8000d04:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b25b      	sxtb	r3, r3
 8000d0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint8_t accel_data[2] = {accel_config_register, accel_config};
 8000d10:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000d14:	f887 3020 	strb.w	r3, [r7, #32]
 8000d18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d1c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  transmit_status = HAL_I2C_Master_Transmit(&hi2c1, Mpu6050::address,
 8000d20:	f107 0220 	add.w	r2, r7, #32
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	21d0      	movs	r1, #208	@ 0xd0
 8000d2e:	4836      	ldr	r0, [pc, #216]	@ (8000e08 <_ZN7Mpu60504InitE9GyroScale10AccelScale+0x1d4>)
 8000d30:	f001 fa5c 	bl	80021ec <HAL_I2C_Master_Transmit>
 8000d34:	4603      	mov	r3, r0
 8000d36:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                                         accel_data, 2, HAL_MAX_DELAY);

  // set gyro config
  uint8_t gyro_config_register = 0x1B;
 8000d3a:	231b      	movs	r3, #27
 8000d3c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint8_t gyro_config = 0x00;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  gyro_config |= (static_cast<uint8_t>(gyro_scale_) << 3);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	b25a      	sxtb	r2, r3
 8000d50:	f997 3035 	ldrsb.w	r3, [r7, #53]	@ 0x35
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  uint8_t gyro_data[2] = {gyro_config_register, gyro_config};
 8000d5c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000d60:	773b      	strb	r3, [r7, #28]
 8000d62:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000d66:	777b      	strb	r3, [r7, #29]
  transmit_status = HAL_I2C_Master_Transmit(&hi2c1, Mpu6050::address,
 8000d68:	f107 021c 	add.w	r2, r7, #28
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2302      	movs	r3, #2
 8000d74:	21d0      	movs	r1, #208	@ 0xd0
 8000d76:	4824      	ldr	r0, [pc, #144]	@ (8000e08 <_ZN7Mpu60504InitE9GyroScale10AccelScale+0x1d4>)
 8000d78:	f001 fa38 	bl	80021ec <HAL_I2C_Master_Transmit>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                                         gyro_data, 2, HAL_MAX_DELAY);
     
  // set interrupt config
  uint8_t int_pin_config_register = 0x37;
 8000d82:	2337      	movs	r3, #55	@ 0x37
 8000d84:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  uint8_t int_pin_config = 0x00;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  int_pin_config |= 0x1 << 7; // active low
 8000d8e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d96:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  int_pin_config |= 0x0 << 6; // push pull
  int_pin_config |= 0x0 << 5; // don't latch
  int_pin_config |= 0x1 << 4; // clear on any read
 8000d9a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  int_pin_config |= 0x0 << 3; // doesn't matter (FSYNC)
  int_pin_config |= 0x0 << 2; // don't use FSYNC as int
  int_pin_config |= 0x0 << 1; // don't access axillary I2C bus
  uint8_t int_pin_data[2] = {int_pin_config_register, int_pin_config};
 8000da6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000daa:	763b      	strb	r3, [r7, #24]
 8000dac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000db0:	767b      	strb	r3, [r7, #25]
  transmit_status = HAL_I2C_Master_Transmit(&hi2c1, Mpu6050::address,
 8000db2:	f107 0218 	add.w	r2, r7, #24
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	21d0      	movs	r1, #208	@ 0xd0
 8000dc0:	4811      	ldr	r0, [pc, #68]	@ (8000e08 <_ZN7Mpu60504InitE9GyroScale10AccelScale+0x1d4>)
 8000dc2:	f001 fa13 	bl	80021ec <HAL_I2C_Master_Transmit>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                                         int_pin_data, 2, HAL_MAX_DELAY);

  // int enable
  uint8_t int_enable_register = 0x38;
 8000dcc:	2338      	movs	r3, #56	@ 0x38
 8000dce:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  uint8_t int_enable = 0x01; // YES data ready int
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  uint8_t int_enable_data[2] = {int_enable_register, int_enable};
 8000dd8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000ddc:	753b      	strb	r3, [r7, #20]
 8000dde:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000de2:	757b      	strb	r3, [r7, #21]
  transmit_status = HAL_I2C_Master_Transmit(&hi2c1, Mpu6050::address,
 8000de4:	f107 0214 	add.w	r2, r7, #20
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	2302      	movs	r3, #2
 8000df0:	21d0      	movs	r1, #208	@ 0xd0
 8000df2:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <_ZN7Mpu60504InitE9GyroScale10AccelScale+0x1d4>)
 8000df4:	f001 f9fa 	bl	80021ec <HAL_I2C_Master_Transmit>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                                         int_enable_data, 2, HAL_MAX_DELAY);
}
 8000dfe:	bf00      	nop
 8000e00:	3740      	adds	r7, #64	@ 0x40
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000078 	.word	0x20000078

08000e0c <_ZN7Mpu605017DataReadyCallbackEv>:

void Mpu6050::DataReadyCallback(){
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  is_data_ready_ = true;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	721a      	strb	r2, [r3, #8]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <_ZN7Mpu60509ReadAccelEv>:

void Mpu6050::ReadAccel(){
 8000e28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e2c:	b09e      	sub	sp, #120	@ 0x78
 8000e2e:	af04      	add	r7, sp, #16
 8000e30:	6078      	str	r0, [r7, #4]
  // read accels
  uint8_t accel_data_register = 0x3B;
 8000e32:	233b      	movs	r3, #59	@ 0x3b
 8000e34:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  HAL_StatusTypeDef transmit_status = HAL_I2C_Master_Transmit(&hi2c1, Mpu6050::address,
 8000e38:	f107 0247 	add.w	r2, r7, #71	@ 0x47
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2301      	movs	r3, #1
 8000e44:	21d0      	movs	r1, #208	@ 0xd0
 8000e46:	4848      	ldr	r0, [pc, #288]	@ (8000f68 <_ZN7Mpu60509ReadAccelEv+0x140>)
 8000e48:	f001 f9d0 	bl	80021ec <HAL_I2C_Master_Transmit>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                                         &accel_data_register, 1, HAL_MAX_DELAY);

  uint8_t raw_accel_data[6];
  HAL_StatusTypeDef read_status = HAL_I2C_Master_Receive(&hi2c1, Mpu6050::address,
 8000e52:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2306      	movs	r3, #6
 8000e5e:	21d0      	movs	r1, #208	@ 0xd0
 8000e60:	4841      	ldr	r0, [pc, #260]	@ (8000f68 <_ZN7Mpu60509ReadAccelEv+0x140>)
 8000e62:	f001 fac1 	bl	80023e8 <HAL_I2C_Master_Receive>
 8000e66:	4603      	mov	r3, r0
 8000e68:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
                                              raw_accel_data, 6, HAL_MAX_DELAY);

  int16_t raw_x_accel = raw_accel_data[0] << 8 | raw_accel_data[1];
 8000e6c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	b21a      	sxth	r2, r3
 8000e74:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
  int16_t raw_y_accel = raw_accel_data[2] << 8 | raw_accel_data[3];
 8000e80:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
  int16_t raw_z_accel = raw_accel_data[4] << 8 | raw_accel_data[5];
 8000e94:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000e98:	021b      	lsls	r3, r3, #8
 8000e9a:	b21a      	sxth	r2, r3
 8000e9c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000ea0:	b21b      	sxth	r3, r3
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

  float max_reading = 2 << static_cast<int>(accel_scale_);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2202      	movs	r2, #2
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	ee07 3a90 	vmov	s15, r3
 8000eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eba:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
  float scale_factor = max_reading / 0x7FFF;
 8000ebe:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8000ec2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8000f6c <_ZN7Mpu60509ReadAccelEv+0x144>
 8000ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eca:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
  float x_accel = raw_x_accel * scale_factor;
 8000ece:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eda:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8000ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
  float y_accel = raw_y_accel * scale_factor;
 8000ee6:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8000ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000efa:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
  float z_accel = raw_z_accel * scale_factor;
 8000efe:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	@ 0x60
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8000f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f12:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

  char buffer[50];
  int len = sprintf(buffer, "x_accel %d,  y_accel %d, z_accel %d\r\n", x_accel, y_accel, z_accel);
 8000f16:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000f18:	f7ff fc58 	bl	80007cc <__aeabi_f2d>
 8000f1c:	4680      	mov	r8, r0
 8000f1e:	4689      	mov	r9, r1
 8000f20:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000f22:	f7ff fc53 	bl	80007cc <__aeabi_f2d>
 8000f26:	4604      	mov	r4, r0
 8000f28:	460d      	mov	r5, r1
 8000f2a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000f2c:	f7ff fc4e 	bl	80007cc <__aeabi_f2d>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	f107 000c 	add.w	r0, r7, #12
 8000f38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f3c:	e9cd 4500 	strd	r4, r5, [sp]
 8000f40:	4642      	mov	r2, r8
 8000f42:	464b      	mov	r3, r9
 8000f44:	490a      	ldr	r1, [pc, #40]	@ (8000f70 <_ZN7Mpu60509ReadAccelEv+0x148>)
 8000f46:	f004 fa5b 	bl	8005400 <siprintf>
 8000f4a:	64b8      	str	r0, [r7, #72]	@ 0x48
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len,  HAL_MAX_DELAY);
 8000f4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	f107 010c 	add.w	r1, r7, #12
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f58:	4806      	ldr	r0, [pc, #24]	@ (8000f74 <_ZN7Mpu60509ReadAccelEv+0x14c>)
 8000f5a:	f003 fe95 	bl	8004c88 <HAL_UART_Transmit>
}
 8000f5e:	bf00      	nop
 8000f60:	3768      	adds	r7, #104	@ 0x68
 8000f62:	46bd      	mov	sp, r7
 8000f64:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000f68:	20000078 	.word	0x20000078
 8000f6c:	46fffe00 	.word	0x46fffe00
 8000f70:	08005d58 	.word	0x08005d58
 8000f74:	20000114 	.word	0x20000114

08000f78 <_ZN7Mpu60508ReadGyroEv>:
  HAL_StatusTypeDef read_status = HAL_I2C_Master_Receive(&hi2c1, Mpu6050::address,
                                              &int_status_data, 1, HAL_MAX_DELAY);
  return int_status_data & 0x01; // 1 if data ready, 0 if data has been read
}

void Mpu6050::ReadGyro(){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08e      	sub	sp, #56	@ 0x38
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	6078      	str	r0, [r7, #4]

  uint8_t gyro_data[6];

  uint8_t gyro_data_register = 0x43;
 8000f80:	2343      	movs	r3, #67	@ 0x43
 8000f82:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef transmit_status = HAL_I2C_Master_Transmit(&hi2c1, Mpu6050::address,
 8000f84:	f107 020b 	add.w	r2, r7, #11
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	21d0      	movs	r1, #208	@ 0xd0
 8000f92:	4836      	ldr	r0, [pc, #216]	@ (800106c <_ZN7Mpu60508ReadGyroEv+0xf4>)
 8000f94:	f001 f92a 	bl	80021ec <HAL_I2C_Master_Transmit>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                         &gyro_data_register, 1, HAL_MAX_DELAY);
  HAL_StatusTypeDef read_status = HAL_I2C_Master_Receive(&hi2c1, Mpu6050::address,
 8000f9e:	f107 020c 	add.w	r2, r7, #12
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2306      	movs	r3, #6
 8000faa:	21d0      	movs	r1, #208	@ 0xd0
 8000fac:	482f      	ldr	r0, [pc, #188]	@ (800106c <_ZN7Mpu60508ReadGyroEv+0xf4>)
 8000fae:	f001 fa1b 	bl	80023e8 <HAL_I2C_Master_Receive>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                                              gyro_data, 6, HAL_MAX_DELAY);

  int16_t gyro_x_raw = gyro_data[0] << 8 | gyro_data[1];
 8000fb8:	7b3b      	ldrb	r3, [r7, #12]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	7b7b      	ldrb	r3, [r7, #13]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  int16_t gyro_y_raw = gyro_data[2] << 8 | gyro_data[3];
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	857b      	strh	r3, [r7, #42]	@ 0x2a
  int16_t gyro_z_raw = gyro_data[4] << 8 | gyro_data[5];
 8000fd4:	7c3b      	ldrb	r3, [r7, #16]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	7c7b      	ldrb	r3, [r7, #17]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	853b      	strh	r3, [r7, #40]	@ 0x28

  float max_reading = 250.0 * (1 << static_cast<int>(gyro_scale_));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fbdb 	bl	80007a8 <__aeabi_i2d>
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <_ZN7Mpu60508ReadGyroEv+0xf8>)
 8000ff8:	f7ff f95a 	bl	80002b0 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	f7ff fc3a 	bl	800087c <__aeabi_d2f>
 8001008:	4603      	mov	r3, r0
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
  float scale_factor = max_reading /  0x7FFF ;
 800100c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001010:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001074 <_ZN7Mpu60508ReadGyroEv+0xfc>
 8001014:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001018:	edc7 7a08 	vstr	s15, [r7, #32]
  float gyro_x_dps = gyro_x_raw * scale_factor;
 800101c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001028:	ed97 7a08 	vldr	s14, [r7, #32]
 800102c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001030:	edc7 7a07 	vstr	s15, [r7, #28]
  float gyro_y_dps = gyro_y_raw * scale_factor;
 8001034:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001038:	ee07 3a90 	vmov	s15, r3
 800103c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001040:	ed97 7a08 	vldr	s14, [r7, #32]
 8001044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001048:	edc7 7a06 	vstr	s15, [r7, #24]
  float gyro_z_dps = gyro_z_raw * scale_factor;
 800104c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001058:	ed97 7a08 	vldr	s14, [r7, #32]
 800105c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001060:	edc7 7a05 	vstr	s15, [r7, #20]



}
 8001064:	bf00      	nop
 8001066:	3730      	adds	r7, #48	@ 0x30
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000078 	.word	0x20000078
 8001070:	406f4000 	.word	0x406f4000
 8001074:	46fffe00 	.word	0x46fffe00

08001078 <_ZN7Mpu605011ReadIfReadyEv>:

void Mpu6050::ReadIfReady(){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if (is_data_ready_){
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7a1b      	ldrb	r3, [r3, #8]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d008      	beq.n	800109a <_ZN7Mpu605011ReadIfReadyEv+0x22>
    ReadAccel();
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff fecd 	bl	8000e28 <_ZN7Mpu60509ReadAccelEv>
    ReadGyro(); 
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ff72 	bl	8000f78 <_ZN7Mpu60508ReadGyroEv>
    is_data_ready_ = false;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	721a      	strb	r2, [r3, #8]
  }  else{

  }
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a6:	f000 fc13 	bl	80018d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010aa:	f000 f80d 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ae:	f000 f971 	bl	8001394 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010b2:	f000 f945 	bl	8001340 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010b6:	f000 f875 	bl	80011a4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80010ba:	f000 f8a1 	bl	8001200 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Main_Wrapper_Init();
 80010be:	f000 fa25 	bl	800150c <Main_Wrapper_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Main_Wrapper_Loop();
 80010c2:	f000 fa37 	bl	8001534 <Main_Wrapper_Loop>
 80010c6:	e7fc      	b.n	80010c2 <main+0x20>

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b094      	sub	sp, #80	@ 0x50
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2234      	movs	r2, #52	@ 0x34
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 f9b2 	bl	8005440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	4b2a      	ldr	r3, [pc, #168]	@ (800119c <SystemClock_Config+0xd4>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f4:	4a29      	ldr	r2, [pc, #164]	@ (800119c <SystemClock_Config+0xd4>)
 80010f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fc:	4b27      	ldr	r3, [pc, #156]	@ (800119c <SystemClock_Config+0xd4>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001108:	2300      	movs	r3, #0
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <SystemClock_Config+0xd8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001114:	4a22      	ldr	r2, [pc, #136]	@ (80011a0 <SystemClock_Config+0xd8>)
 8001116:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <SystemClock_Config+0xd8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001128:	2302      	movs	r3, #2
 800112a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112c:	2301      	movs	r3, #1
 800112e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001130:	2310      	movs	r3, #16
 8001132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001134:	2302      	movs	r3, #2
 8001136:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001138:	2300      	movs	r3, #0
 800113a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800113c:	2310      	movs	r3, #16
 800113e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001140:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001144:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001146:	2304      	movs	r3, #4
 8001148:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800114a:	2302      	movs	r3, #2
 800114c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800114e:	2302      	movs	r3, #2
 8001150:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fa48 	bl	80035ec <HAL_RCC_OscConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001162:	f000 f98d 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001166:	230f      	movs	r3, #15
 8001168:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116a:	2302      	movs	r3, #2
 800116c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001172:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	2102      	movs	r1, #2
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fee8 	bl	8002f58 <HAL_RCC_ClockConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800118e:	f000 f977 	bl	8001480 <Error_Handler>
  }
}
 8001192:	bf00      	nop
 8001194:	3750      	adds	r7, #80	@ 0x50
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40007000 	.word	0x40007000

080011a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011aa:	4a13      	ldr	r2, [pc, #76]	@ (80011f8 <MX_I2C1_Init+0x54>)
 80011ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011b0:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <MX_I2C1_Init+0x58>)
 80011b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011e2:	f000 febf 	bl	8001f64 <HAL_I2C_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011ec:	f000 f948 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000078 	.word	0x20000078
 80011f8:	40005400 	.word	0x40005400
 80011fc:	00061a80 	.word	0x00061a80

08001200 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b096      	sub	sp, #88	@ 0x58
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	615a      	str	r2, [r3, #20]
 8001230:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2220      	movs	r2, #32
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f004 f901 	bl	8005440 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800123e:	4b3e      	ldr	r3, [pc, #248]	@ (8001338 <MX_TIM1_Init+0x138>)
 8001240:	4a3e      	ldr	r2, [pc, #248]	@ (800133c <MX_TIM1_Init+0x13c>)
 8001242:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8399;
 8001244:	4b3c      	ldr	r3, [pc, #240]	@ (8001338 <MX_TIM1_Init+0x138>)
 8001246:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800124a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b3a      	ldr	r3, [pc, #232]	@ (8001338 <MX_TIM1_Init+0x138>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001252:	4b39      	ldr	r3, [pc, #228]	@ (8001338 <MX_TIM1_Init+0x138>)
 8001254:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001258:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b37      	ldr	r3, [pc, #220]	@ (8001338 <MX_TIM1_Init+0x138>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001260:	4b35      	ldr	r3, [pc, #212]	@ (8001338 <MX_TIM1_Init+0x138>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <MX_TIM1_Init+0x138>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800126c:	4832      	ldr	r0, [pc, #200]	@ (8001338 <MX_TIM1_Init+0x138>)
 800126e:	f002 fc5b 	bl	8003b28 <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001278:	f000 f902 	bl	8001480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001280:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001282:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001286:	4619      	mov	r1, r3
 8001288:	482b      	ldr	r0, [pc, #172]	@ (8001338 <MX_TIM1_Init+0x138>)
 800128a:	f002 ffc9 	bl	8004220 <HAL_TIM_ConfigClockSource>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001294:	f000 f8f4 	bl	8001480 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001298:	4827      	ldr	r0, [pc, #156]	@ (8001338 <MX_TIM1_Init+0x138>)
 800129a:	f002 fd05 	bl	8003ca8 <HAL_TIM_OC_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012a4:	f000 f8ec 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012b4:	4619      	mov	r1, r3
 80012b6:	4820      	ldr	r0, [pc, #128]	@ (8001338 <MX_TIM1_Init+0x138>)
 80012b8:	f003 fbb4 	bl	8004a24 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80012c2:	f000 f8dd 	bl	8001480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 5000;
 80012ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80012ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012d4:	2300      	movs	r3, #0
 80012d6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e8:	2200      	movs	r2, #0
 80012ea:	4619      	mov	r1, r3
 80012ec:	4812      	ldr	r0, [pc, #72]	@ (8001338 <MX_TIM1_Init+0x138>)
 80012ee:	f002 ff3b 	bl	8004168 <HAL_TIM_OC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80012f8:	f000 f8c2 	bl	8001480 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001310:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001314:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	4806      	ldr	r0, [pc, #24]	@ (8001338 <MX_TIM1_Init+0x138>)
 8001320:	f003 fbfc 	bl	8004b1c <HAL_TIMEx_ConfigBreakDeadTime>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800132a:	f000 f8a9 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	3758      	adds	r7, #88	@ 0x58
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200000cc 	.word	0x200000cc
 800133c:	40010000 	.word	0x40010000

08001340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001344:	4b11      	ldr	r3, [pc, #68]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 8001346:	4a12      	ldr	r2, [pc, #72]	@ (8001390 <MX_USART2_UART_Init+0x50>)
 8001348:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 800134c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001350:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b09      	ldr	r3, [pc, #36]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b08      	ldr	r3, [pc, #32]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	@ (800138c <MX_USART2_UART_Init+0x4c>)
 8001378:	f003 fc36 	bl	8004be8 <HAL_UART_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001382:	f000 f87d 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000114 	.word	0x20000114
 8001390:	40004400 	.word	0x40004400

08001394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	@ 0x28
 8001398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b31      	ldr	r3, [pc, #196]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a30      	ldr	r2, [pc, #192]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a29      	ldr	r2, [pc, #164]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b27      	ldr	r3, [pc, #156]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b23      	ldr	r3, [pc, #140]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a22      	ldr	r2, [pc, #136]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <MX_GPIO_Init+0xe0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <MX_GPIO_Init+0xe0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a1b      	ldr	r2, [pc, #108]	@ (8001474 <MX_GPIO_Init+0xe0>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <MX_GPIO_Init+0xe0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2120      	movs	r1, #32
 800141e:	4816      	ldr	r0, [pc, #88]	@ (8001478 <MX_GPIO_Init+0xe4>)
 8001420:	f000 fd6e 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin MPU_INT_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MPU_INT_Pin;
 8001424:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8001428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800142a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800142e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	4810      	ldr	r0, [pc, #64]	@ (800147c <MX_GPIO_Init+0xe8>)
 800143c:	f000 fbcc 	bl	8001bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : G_LED_Pin */
  GPIO_InitStruct.Pin = G_LED_Pin;
 8001440:	2320      	movs	r3, #32
 8001442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(G_LED_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4808      	ldr	r0, [pc, #32]	@ (8001478 <MX_GPIO_Init+0xe4>)
 8001458:	f000 fbbe 	bl	8001bd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	2017      	movs	r0, #23
 8001462:	f000 fb82 	bl	8001b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001466:	2017      	movs	r0, #23
 8001468:	f000 fb9b 	bl	8001ba2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	@ 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000
 800147c:	40020800 	.word	0x40020800

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <Error_Handler+0x8>

0800148c <HAL_TIM_PeriodElapsedCallback>:

static Mpu6050 mpu6050;

extern TIM_HandleTypeDef htim1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1){
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a05      	ldr	r2, [pc, #20]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d104      	bne.n	80014a8 <HAL_TIM_PeriodElapsedCallback+0x1c>
    // when timer rolls over (arr), set green led on
    HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_SET);
 800149e:	2201      	movs	r2, #1
 80014a0:	2120      	movs	r1, #32
 80014a2:	4804      	ldr	r0, [pc, #16]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80014a4:	f000 fd2c 	bl	8001f00 <HAL_GPIO_WritePin>
  }
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40010000 	.word	0x40010000
 80014b4:	40020000 	.word	0x40020000

080014b8 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1){
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d104      	bne.n	80014d4 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
    // when timer1 hits OC value, set green led off
    HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2120      	movs	r1, #32
 80014ce:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 80014d0:	f000 fd16 	bl	8001f00 <HAL_GPIO_WritePin>
  }
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40010000 	.word	0x40010000
 80014e0:	40020000 	.word	0x40020000

080014e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin){
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014f4:	d103      	bne.n	80014fe <HAL_GPIO_EXTI_Callback+0x1a>
    case MPU_INT_Pin:
      mpu6050.DataReadyCallback();
 80014f6:	4804      	ldr	r0, [pc, #16]	@ (8001508 <HAL_GPIO_EXTI_Callback+0x24>)
 80014f8:	f7ff fc88 	bl	8000e0c <_ZN7Mpu605017DataReadyCallbackEv>
      break;
 80014fc:	e000      	b.n	8001500 <HAL_GPIO_EXTI_Callback+0x1c>
    default:
      break;
 80014fe:	bf00      	nop
  }

}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	2000015c 	.word	0x2000015c

0800150c <Main_Wrapper_Init>:

void Main_Wrapper_Init(){
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim1);
 8001510:	4806      	ldr	r0, [pc, #24]	@ (800152c <Main_Wrapper_Init+0x20>)
 8001512:	f002 fb59 	bl	8003bc8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);  
 8001516:	2100      	movs	r1, #0
 8001518:	4804      	ldr	r0, [pc, #16]	@ (800152c <Main_Wrapper_Init+0x20>)
 800151a:	f002 fc1f 	bl	8003d5c <HAL_TIM_OC_Start_IT>

  mpu6050.Init(GyroScale::GYRO_250DPS, AccelScale::ACCEL_2G);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	4803      	ldr	r0, [pc, #12]	@ (8001530 <Main_Wrapper_Init+0x24>)
 8001524:	f7ff fb86 	bl	8000c34 <_ZN7Mpu60504InitE9GyroScale10AccelScale>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200000cc 	.word	0x200000cc
 8001530:	2000015c 	.word	0x2000015c

08001534 <Main_Wrapper_Loop>:

void Main_Wrapper_Loop(){
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  
  mpu6050.ReadIfReady();
 8001538:	4802      	ldr	r0, [pc, #8]	@ (8001544 <Main_Wrapper_Loop+0x10>)
 800153a:	f7ff fd9d 	bl	8001078 <_ZN7Mpu605011ReadIfReadyEv>

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2000015c 	.word	0x2000015c

08001548 <_Z41__static_initialization_and_destruction_0ii>:


} // extern "C"
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d107      	bne.n	8001568 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800155e:	4293      	cmp	r3, r2
 8001560:	d102      	bne.n	8001568 <_Z41__static_initialization_and_destruction_0ii+0x20>
static Mpu6050 mpu6050;
 8001562:	4803      	ldr	r0, [pc, #12]	@ (8001570 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001564:	f7ff fb52 	bl	8000c0c <_ZN7Mpu6050C1Ev>
} // extern "C"
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000015c 	.word	0x2000015c

08001574 <_GLOBAL__sub_I_HAL_TIM_PeriodElapsedCallback>:
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
 8001578:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800157c:	2001      	movs	r0, #1
 800157e:	f7ff ffe3 	bl	8001548 <_Z41__static_initialization_and_destruction_0ii>
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <HAL_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	4a0f      	ldr	r2, [pc, #60]	@ (80015d0 <HAL_MspInit+0x4c>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001598:	6453      	str	r3, [r2, #68]	@ 0x44
 800159a:	4b0d      	ldr	r3, [pc, #52]	@ (80015d0 <HAL_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <HAL_MspInit+0x4c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_MspInit+0x4c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_MspInit+0x4c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015c2:	2007      	movs	r0, #7
 80015c4:	f000 fac6 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	@ (8001658 <HAL_I2C_MspInit+0x84>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d12c      	bne.n	8001650 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b18      	ldr	r3, [pc, #96]	@ (800165c <HAL_I2C_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a17      	ldr	r2, [pc, #92]	@ (800165c <HAL_I2C_MspInit+0x88>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <HAL_I2C_MspInit+0x88>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001612:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001618:	2312      	movs	r3, #18
 800161a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161c:	2301      	movs	r3, #1
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001624:	2304      	movs	r3, #4
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	480c      	ldr	r0, [pc, #48]	@ (8001660 <HAL_I2C_MspInit+0x8c>)
 8001630:	f000 fad2 	bl	8001bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	4b08      	ldr	r3, [pc, #32]	@ (800165c <HAL_I2C_MspInit+0x88>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	4a07      	ldr	r2, [pc, #28]	@ (800165c <HAL_I2C_MspInit+0x88>)
 800163e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001642:	6413      	str	r3, [r2, #64]	@ 0x40
 8001644:	4b05      	ldr	r3, [pc, #20]	@ (800165c <HAL_I2C_MspInit+0x88>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	@ 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40005400 	.word	0x40005400
 800165c:	40023800 	.word	0x40023800
 8001660:	40020400 	.word	0x40020400

08001664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a12      	ldr	r2, [pc, #72]	@ (80016bc <HAL_TIM_Base_MspInit+0x58>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d11d      	bne.n	80016b2 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <HAL_TIM_Base_MspInit+0x5c>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	4a10      	ldr	r2, [pc, #64]	@ (80016c0 <HAL_TIM_Base_MspInit+0x5c>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6453      	str	r3, [r2, #68]	@ 0x44
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <HAL_TIM_Base_MspInit+0x5c>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	2019      	movs	r0, #25
 8001698:	f000 fa67 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800169c:	2019      	movs	r0, #25
 800169e:	f000 fa80 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	201b      	movs	r0, #27
 80016a8:	f000 fa5f 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016ac:	201b      	movs	r0, #27
 80016ae:	f000 fa78 	bl	8001ba2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40010000 	.word	0x40010000
 80016c0:	40023800 	.word	0x40023800

080016c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	@ 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a19      	ldr	r2, [pc, #100]	@ (8001748 <HAL_UART_MspInit+0x84>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d12b      	bne.n	800173e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b18      	ldr	r3, [pc, #96]	@ (800174c <HAL_UART_MspInit+0x88>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	4a17      	ldr	r2, [pc, #92]	@ (800174c <HAL_UART_MspInit+0x88>)
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <HAL_UART_MspInit+0x88>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <HAL_UART_MspInit+0x88>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a10      	ldr	r2, [pc, #64]	@ (800174c <HAL_UART_MspInit+0x88>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <HAL_UART_MspInit+0x88>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800171e:	230c      	movs	r3, #12
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800172e:	2307      	movs	r3, #7
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	@ (8001750 <HAL_UART_MspInit+0x8c>)
 800173a:	f000 fa4d 	bl	8001bd8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800173e:	bf00      	nop
 8001740:	3728      	adds	r7, #40	@ 0x28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40004400 	.word	0x40004400
 800174c:	40023800 	.word	0x40023800
 8001750:	40020000 	.word	0x40020000

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <NMI_Handler+0x4>

0800175c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <MemManage_Handler+0x4>

0800176c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <BusFault_Handler+0x4>

08001774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <UsageFault_Handler+0x4>

0800177c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017aa:	f000 f8e3 	bl	8001974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU_INT_Pin);
 80017b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80017ba:	f000 fbbb 	bl	8001f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017ca:	f002 fbdd 	bl	8003f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200000cc 	.word	0x200000cc

080017d8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <TIM1_CC_IRQHandler+0x10>)
 80017de:	f002 fbd3 	bl	8003f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200000cc 	.word	0x200000cc

080017ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f4:	4a14      	ldr	r2, [pc, #80]	@ (8001848 <_sbrk+0x5c>)
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <_sbrk+0x60>)
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001808:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <_sbrk+0x64>)
 800180a:	4a12      	ldr	r2, [pc, #72]	@ (8001854 <_sbrk+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4b10      	ldr	r3, [pc, #64]	@ (8001850 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800181c:	f003 fe18 	bl	8005450 <__errno>
 8001820:	4603      	mov	r3, r0
 8001822:	220c      	movs	r2, #12
 8001824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800182a:	e009      	b.n	8001840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800182c:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001832:	4b07      	ldr	r3, [pc, #28]	@ (8001850 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	4a05      	ldr	r2, [pc, #20]	@ (8001850 <_sbrk+0x64>)
 800183c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20020000 	.word	0x20020000
 800184c:	00000400 	.word	0x00000400
 8001850:	20000168 	.word	0x20000168
 8001854:	200002b8 	.word	0x200002b8

08001858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <SystemInit+0x20>)
 800185e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001862:	4a05      	ldr	r2, [pc, #20]	@ (8001878 <SystemInit+0x20>)
 8001864:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001868:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800187c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001880:	f7ff ffea 	bl	8001858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001884:	480c      	ldr	r0, [pc, #48]	@ (80018b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001886:	490d      	ldr	r1, [pc, #52]	@ (80018bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001888:	4a0d      	ldr	r2, [pc, #52]	@ (80018c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189a:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800189c:	4c0a      	ldr	r4, [pc, #40]	@ (80018c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018aa:	f003 fdd7 	bl	800545c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ae:	f7ff fbf8 	bl	80010a2 <main>
  bx  lr    
 80018b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80018c0:	08005de0 	.word	0x08005de0
  ldr r2, =_sbss
 80018c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80018c8:	200002b8 	.word	0x200002b8

080018cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC_IRQHandler>
	...

080018d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001910 <HAL_Init+0x40>)
 80018da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <HAL_Init+0x40>)
 80018e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a07      	ldr	r2, [pc, #28]	@ (8001910 <HAL_Init+0x40>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f000 f92b 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fe:	2000      	movs	r0, #0
 8001900:	f000 f808 	bl	8001914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001904:	f7ff fe3e 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023c00 	.word	0x40023c00

08001914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800191c:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_InitTick+0x54>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_InitTick+0x58>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800192a:	fbb3 f3f1 	udiv	r3, r3, r1
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f943 	bl	8001bbe <HAL_SYSTICK_Config>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00e      	b.n	8001960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b0f      	cmp	r3, #15
 8001946:	d80a      	bhi.n	800195e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001948:	2200      	movs	r2, #0
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001950:	f000 f90b 	bl	8001b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001954:	4a06      	ldr	r2, [pc, #24]	@ (8001970 <HAL_InitTick+0x5c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000000 	.word	0x20000000
 800196c:	20000008 	.word	0x20000008
 8001970:	20000004 	.word	0x20000004

08001974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_IncTick+0x20>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_IncTick+0x24>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <HAL_IncTick+0x24>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000008 	.word	0x20000008
 8001998:	2000016c 	.word	0x2000016c

0800199c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b03      	ldr	r3, [pc, #12]	@ (80019b0 <HAL_GetTick+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	2000016c 	.word	0x2000016c

080019b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019d0:	4013      	ands	r3, r2
 80019d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e6:	4a04      	ldr	r2, [pc, #16]	@ (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	60d3      	str	r3, [r2, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a00:	4b04      	ldr	r3, [pc, #16]	@ (8001a14 <__NVIC_GetPriorityGrouping+0x18>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	f003 0307 	and.w	r3, r3, #7
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	db0b      	blt.n	8001a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	f003 021f 	and.w	r2, r3, #31
 8001a30:	4907      	ldr	r1, [pc, #28]	@ (8001a50 <__NVIC_EnableIRQ+0x38>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	2001      	movs	r0, #1
 8001a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	@ (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	@ (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	@ 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	@ 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b20:	d301      	bcc.n	8001b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00f      	b.n	8001b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b26:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <SysTick_Config+0x40>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2e:	210f      	movs	r1, #15
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b34:	f7ff ff8e 	bl	8001a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b38:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <SysTick_Config+0x40>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3e:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <SysTick_Config+0x40>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	e000e010 	.word	0xe000e010

08001b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff29 	bl	80019b4 <__NVIC_SetPriorityGrouping>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b7c:	f7ff ff3e 	bl	80019fc <__NVIC_GetPriorityGrouping>
 8001b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	f7ff ff8e 	bl	8001aa8 <NVIC_EncodePriority>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff5d 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff31 	bl	8001a18 <__NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffa2 	bl	8001b10 <SysTick_Config>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	@ 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	e165      	b.n	8001ec0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	f040 8154 	bne.w	8001eba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d005      	beq.n	8001c2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d130      	bne.n	8001c8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2203      	movs	r2, #3
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c60:	2201      	movs	r2, #1
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 0201 	and.w	r2, r3, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d017      	beq.n	8001cc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d123      	bne.n	8001d1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	08da      	lsrs	r2, r3, #3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3208      	adds	r2, #8
 8001cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	220f      	movs	r2, #15
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	08da      	lsrs	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3208      	adds	r2, #8
 8001d16:	69b9      	ldr	r1, [r7, #24]
 8001d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0203 	and.w	r2, r3, #3
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80ae 	beq.w	8001eba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed8 <HAL_GPIO_Init+0x300>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d66:	4a5c      	ldr	r2, [pc, #368]	@ (8001ed8 <HAL_GPIO_Init+0x300>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ed8 <HAL_GPIO_Init+0x300>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7a:	4a58      	ldr	r2, [pc, #352]	@ (8001edc <HAL_GPIO_Init+0x304>)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3302      	adds	r3, #2
 8001d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee0 <HAL_GPIO_Init+0x308>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d025      	beq.n	8001df2 <HAL_GPIO_Init+0x21a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4e      	ldr	r2, [pc, #312]	@ (8001ee4 <HAL_GPIO_Init+0x30c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d01f      	beq.n	8001dee <HAL_GPIO_Init+0x216>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee8 <HAL_GPIO_Init+0x310>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d019      	beq.n	8001dea <HAL_GPIO_Init+0x212>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4c      	ldr	r2, [pc, #304]	@ (8001eec <HAL_GPIO_Init+0x314>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d013      	beq.n	8001de6 <HAL_GPIO_Init+0x20e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ef0 <HAL_GPIO_Init+0x318>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d00d      	beq.n	8001de2 <HAL_GPIO_Init+0x20a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4a      	ldr	r2, [pc, #296]	@ (8001ef4 <HAL_GPIO_Init+0x31c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d007      	beq.n	8001dde <HAL_GPIO_Init+0x206>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a49      	ldr	r2, [pc, #292]	@ (8001ef8 <HAL_GPIO_Init+0x320>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d101      	bne.n	8001dda <HAL_GPIO_Init+0x202>
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	e00c      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001dda:	2307      	movs	r3, #7
 8001ddc:	e00a      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001dde:	2305      	movs	r3, #5
 8001de0:	e008      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001de2:	2304      	movs	r3, #4
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001de6:	2303      	movs	r3, #3
 8001de8:	e004      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e002      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_Init+0x21c>
 8001df2:	2300      	movs	r3, #0
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	f002 0203 	and.w	r2, r2, #3
 8001dfa:	0092      	lsls	r2, r2, #2
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e04:	4935      	ldr	r1, [pc, #212]	@ (8001edc <HAL_GPIO_Init+0x304>)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e12:	4b3a      	ldr	r3, [pc, #232]	@ (8001efc <HAL_GPIO_Init+0x324>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e36:	4a31      	ldr	r2, [pc, #196]	@ (8001efc <HAL_GPIO_Init+0x324>)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001efc <HAL_GPIO_Init+0x324>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e60:	4a26      	ldr	r2, [pc, #152]	@ (8001efc <HAL_GPIO_Init+0x324>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e66:	4b25      	ldr	r3, [pc, #148]	@ (8001efc <HAL_GPIO_Init+0x324>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001efc <HAL_GPIO_Init+0x324>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e90:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <HAL_GPIO_Init+0x324>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb4:	4a11      	ldr	r2, [pc, #68]	@ (8001efc <HAL_GPIO_Init+0x324>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	2b0f      	cmp	r3, #15
 8001ec4:	f67f ae96 	bls.w	8001bf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3724      	adds	r7, #36	@ 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40013800 	.word	0x40013800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40021400 	.word	0x40021400
 8001ef8:	40021800 	.word	0x40021800
 8001efc:	40013c00 	.word	0x40013c00

08001f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f1c:	e003      	b.n	8001f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f1e:	887b      	ldrh	r3, [r7, #2]
 8001f20:	041a      	lsls	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	619a      	str	r2, [r3, #24]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f3e:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f4a:	4a05      	ldr	r2, [pc, #20]	@ (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fac6 	bl	80014e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40013c00 	.word	0x40013c00

08001f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e12b      	b.n	80021ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff fb22 	bl	80015d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2224      	movs	r2, #36	@ 0x24
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fc8:	f001 f8b8 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8001fcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4a81      	ldr	r2, [pc, #516]	@ (80021d8 <HAL_I2C_Init+0x274>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d807      	bhi.n	8001fe8 <HAL_I2C_Init+0x84>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4a80      	ldr	r2, [pc, #512]	@ (80021dc <HAL_I2C_Init+0x278>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	bf94      	ite	ls
 8001fe0:	2301      	movls	r3, #1
 8001fe2:	2300      	movhi	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	e006      	b.n	8001ff6 <HAL_I2C_Init+0x92>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4a7d      	ldr	r2, [pc, #500]	@ (80021e0 <HAL_I2C_Init+0x27c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	bf94      	ite	ls
 8001ff0:	2301      	movls	r3, #1
 8001ff2:	2300      	movhi	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e0e7      	b.n	80021ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4a78      	ldr	r2, [pc, #480]	@ (80021e4 <HAL_I2C_Init+0x280>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	0c9b      	lsrs	r3, r3, #18
 8002008:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	430a      	orrs	r2, r1
 800201c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4a6a      	ldr	r2, [pc, #424]	@ (80021d8 <HAL_I2C_Init+0x274>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d802      	bhi.n	8002038 <HAL_I2C_Init+0xd4>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3301      	adds	r3, #1
 8002036:	e009      	b.n	800204c <HAL_I2C_Init+0xe8>
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	4a69      	ldr	r2, [pc, #420]	@ (80021e8 <HAL_I2C_Init+0x284>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	3301      	adds	r3, #1
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	430b      	orrs	r3, r1
 8002052:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800205e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	495c      	ldr	r1, [pc, #368]	@ (80021d8 <HAL_I2C_Init+0x274>)
 8002068:	428b      	cmp	r3, r1
 800206a:	d819      	bhi.n	80020a0 <HAL_I2C_Init+0x13c>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1e59      	subs	r1, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	fbb1 f3f3 	udiv	r3, r1, r3
 800207a:	1c59      	adds	r1, r3, #1
 800207c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002080:	400b      	ands	r3, r1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_I2C_Init+0x138>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1e59      	subs	r1, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fbb1 f3f3 	udiv	r3, r1, r3
 8002094:	3301      	adds	r3, #1
 8002096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209a:	e051      	b.n	8002140 <HAL_I2C_Init+0x1dc>
 800209c:	2304      	movs	r3, #4
 800209e:	e04f      	b.n	8002140 <HAL_I2C_Init+0x1dc>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d111      	bne.n	80020cc <HAL_I2C_Init+0x168>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1e58      	subs	r0, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	440b      	add	r3, r1
 80020b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ba:	3301      	adds	r3, #1
 80020bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	e012      	b.n	80020f2 <HAL_I2C_Init+0x18e>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1e58      	subs	r0, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	0099      	lsls	r1, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_Init+0x196>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e022      	b.n	8002140 <HAL_I2C_Init+0x1dc>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10e      	bne.n	8002120 <HAL_I2C_Init+0x1bc>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1e58      	subs	r0, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6859      	ldr	r1, [r3, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	440b      	add	r3, r1
 8002110:	fbb0 f3f3 	udiv	r3, r0, r3
 8002114:	3301      	adds	r3, #1
 8002116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800211e:	e00f      	b.n	8002140 <HAL_I2C_Init+0x1dc>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1e58      	subs	r0, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	0099      	lsls	r1, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	fbb0 f3f3 	udiv	r3, r0, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	6809      	ldr	r1, [r1, #0]
 8002144:	4313      	orrs	r3, r2
 8002146:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69da      	ldr	r2, [r3, #28]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800216e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6911      	ldr	r1, [r2, #16]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68d2      	ldr	r2, [r2, #12]
 800217a:	4311      	orrs	r1, r2
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	430b      	orrs	r3, r1
 8002182:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	000186a0 	.word	0x000186a0
 80021dc:	001e847f 	.word	0x001e847f
 80021e0:	003d08ff 	.word	0x003d08ff
 80021e4:	431bde83 	.word	0x431bde83
 80021e8:	10624dd3 	.word	0x10624dd3

080021ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	461a      	mov	r2, r3
 80021f8:	460b      	mov	r3, r1
 80021fa:	817b      	strh	r3, [r7, #10]
 80021fc:	4613      	mov	r3, r2
 80021fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002200:	f7ff fbcc 	bl	800199c <HAL_GetTick>
 8002204:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b20      	cmp	r3, #32
 8002210:	f040 80e0 	bne.w	80023d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2319      	movs	r3, #25
 800221a:	2201      	movs	r2, #1
 800221c:	4970      	ldr	r1, [pc, #448]	@ (80023e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 fc64 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800222a:	2302      	movs	r3, #2
 800222c:	e0d3      	b.n	80023d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_I2C_Master_Transmit+0x50>
 8002238:	2302      	movs	r3, #2
 800223a:	e0cc      	b.n	80023d6 <HAL_I2C_Master_Transmit+0x1ea>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b01      	cmp	r3, #1
 8002250:	d007      	beq.n	8002262 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0201 	orr.w	r2, r2, #1
 8002260:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002270:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2221      	movs	r2, #33	@ 0x21
 8002276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2210      	movs	r2, #16
 800227e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	893a      	ldrh	r2, [r7, #8]
 8002292:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4a50      	ldr	r2, [pc, #320]	@ (80023e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80022a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022a4:	8979      	ldrh	r1, [r7, #10]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	6a3a      	ldr	r2, [r7, #32]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 face 	bl	800284c <I2C_MasterRequestWrite>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e08d      	b.n	80023d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022d0:	e066      	b.n	80023a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	6a39      	ldr	r1, [r7, #32]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fd22 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00d      	beq.n	80022fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d107      	bne.n	80022fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e06b      	b.n	80023d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002302:	781a      	ldrb	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002318:	b29b      	uxth	r3, r3
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b04      	cmp	r3, #4
 800233a:	d11b      	bne.n	8002374 <HAL_I2C_Master_Transmit+0x188>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002340:	2b00      	cmp	r3, #0
 8002342:	d017      	beq.n	8002374 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	781a      	ldrb	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	6a39      	ldr	r1, [r7, #32]
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 fd19 	bl	8002db0 <I2C_WaitOnBTFFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00d      	beq.n	80023a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002388:	2b04      	cmp	r3, #4
 800238a:	d107      	bne.n	800239c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800239a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e01a      	b.n	80023d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d194      	bne.n	80022d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	e000      	b.n	80023d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023d4:	2302      	movs	r3, #2
  }
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	00100002 	.word	0x00100002
 80023e4:	ffff0000 	.word	0xffff0000

080023e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08c      	sub	sp, #48	@ 0x30
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	461a      	mov	r2, r3
 80023f4:	460b      	mov	r3, r1
 80023f6:	817b      	strh	r3, [r7, #10]
 80023f8:	4613      	mov	r3, r2
 80023fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff face 	bl	800199c <HAL_GetTick>
 8002400:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b20      	cmp	r3, #32
 800240c:	f040 8217 	bne.w	800283e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2319      	movs	r3, #25
 8002416:	2201      	movs	r2, #1
 8002418:	497c      	ldr	r1, [pc, #496]	@ (800260c <HAL_I2C_Master_Receive+0x224>)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fb66 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002426:	2302      	movs	r3, #2
 8002428:	e20a      	b.n	8002840 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_I2C_Master_Receive+0x50>
 8002434:	2302      	movs	r3, #2
 8002436:	e203      	b.n	8002840 <HAL_I2C_Master_Receive+0x458>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d007      	beq.n	800245e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0201 	orr.w	r2, r2, #1
 800245c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800246c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2222      	movs	r2, #34	@ 0x22
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2210      	movs	r2, #16
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	893a      	ldrh	r2, [r7, #8]
 800248e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4a5c      	ldr	r2, [pc, #368]	@ (8002610 <HAL_I2C_Master_Receive+0x228>)
 800249e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024a0:	8979      	ldrh	r1, [r7, #10]
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 fa52 	bl	8002950 <I2C_MasterRequestRead>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e1c4      	b.n	8002840 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d113      	bne.n	80024e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	e198      	b.n	8002818 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d11b      	bne.n	8002526 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e178      	b.n	8002818 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252a:	2b02      	cmp	r3, #2
 800252c:	d11b      	bne.n	8002566 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800253c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800254c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	e158      	b.n	8002818 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002574:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800258c:	e144      	b.n	8002818 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002592:	2b03      	cmp	r3, #3
 8002594:	f200 80f1 	bhi.w	800277a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259c:	2b01      	cmp	r3, #1
 800259e:	d123      	bne.n	80025e8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 fc4b 	bl	8002e40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e145      	b.n	8002840 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025e6:	e117      	b.n	8002818 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d14e      	bne.n	800268e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f6:	2200      	movs	r2, #0
 80025f8:	4906      	ldr	r1, [pc, #24]	@ (8002614 <HAL_I2C_Master_Receive+0x22c>)
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 fa76 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e11a      	b.n	8002840 <HAL_I2C_Master_Receive+0x458>
 800260a:	bf00      	nop
 800260c:	00100002 	.word	0x00100002
 8002610:	ffff0000 	.word	0xffff0000
 8002614:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002626:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691a      	ldr	r2, [r3, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800268c:	e0c4      	b.n	8002818 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002694:	2200      	movs	r2, #0
 8002696:	496c      	ldr	r1, [pc, #432]	@ (8002848 <HAL_I2C_Master_Receive+0x460>)
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fa27 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0cb      	b.n	8002840 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f0:	2200      	movs	r2, #0
 80026f2:	4955      	ldr	r1, [pc, #340]	@ (8002848 <HAL_I2C_Master_Receive+0x460>)
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f9f9 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e09d      	b.n	8002840 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002778:	e04e      	b.n	8002818 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800277a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800277c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fb5e 	bl	8002e40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e058      	b.n	8002840 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d124      	bne.n	8002818 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d107      	bne.n	80027e6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027e4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281c:	2b00      	cmp	r3, #0
 800281e:	f47f aeb6 	bne.w	800258e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e000      	b.n	8002840 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800283e:	2302      	movs	r3, #2
  }
}
 8002840:	4618      	mov	r0, r3
 8002842:	3728      	adds	r7, #40	@ 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	00010004 	.word	0x00010004

0800284c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	607a      	str	r2, [r7, #4]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	460b      	mov	r3, r1
 800285a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002860:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b08      	cmp	r3, #8
 8002866:	d006      	beq.n	8002876 <I2C_MasterRequestWrite+0x2a>
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d003      	beq.n	8002876 <I2C_MasterRequestWrite+0x2a>
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002874:	d108      	bne.n	8002888 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	e00b      	b.n	80028a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288c:	2b12      	cmp	r3, #18
 800288e:	d107      	bne.n	80028a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800289e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f91d 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00d      	beq.n	80028d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028c6:	d103      	bne.n	80028d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e035      	b.n	8002940 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028dc:	d108      	bne.n	80028f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028ec:	611a      	str	r2, [r3, #16]
 80028ee:	e01b      	b.n	8002928 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028f0:	897b      	ldrh	r3, [r7, #10]
 80028f2:	11db      	asrs	r3, r3, #7
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f003 0306 	and.w	r3, r3, #6
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f063 030f 	orn	r3, r3, #15
 8002900:	b2da      	uxtb	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	490e      	ldr	r1, [pc, #56]	@ (8002948 <I2C_MasterRequestWrite+0xfc>)
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f966 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e010      	b.n	8002940 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800291e:	897b      	ldrh	r3, [r7, #10]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4907      	ldr	r1, [pc, #28]	@ (800294c <I2C_MasterRequestWrite+0x100>)
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f956 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	00010008 	.word	0x00010008
 800294c:	00010002 	.word	0x00010002

08002950 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	460b      	mov	r3, r1
 800295e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002964:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002974:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b08      	cmp	r3, #8
 800297a:	d006      	beq.n	800298a <I2C_MasterRequestRead+0x3a>
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d003      	beq.n	800298a <I2C_MasterRequestRead+0x3a>
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002988:	d108      	bne.n	800299c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e00b      	b.n	80029b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a0:	2b11      	cmp	r3, #17
 80029a2:	d107      	bne.n	80029b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f893 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00d      	beq.n	80029e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029da:	d103      	bne.n	80029e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e079      	b.n	8002adc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029f0:	d108      	bne.n	8002a04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029f2:	897b      	ldrh	r3, [r7, #10]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	611a      	str	r2, [r3, #16]
 8002a02:	e05f      	b.n	8002ac4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a04:	897b      	ldrh	r3, [r7, #10]
 8002a06:	11db      	asrs	r3, r3, #7
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	f003 0306 	and.w	r3, r3, #6
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f063 030f 	orn	r3, r3, #15
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	4930      	ldr	r1, [pc, #192]	@ (8002ae4 <I2C_MasterRequestRead+0x194>)
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f8dc 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e054      	b.n	8002adc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a32:	897b      	ldrh	r3, [r7, #10]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	4929      	ldr	r1, [pc, #164]	@ (8002ae8 <I2C_MasterRequestRead+0x198>)
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f8cc 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e044      	b.n	8002adc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f831 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00d      	beq.n	8002aac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a9e:	d103      	bne.n	8002aa8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aa6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e017      	b.n	8002adc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002aac:	897b      	ldrh	r3, [r7, #10]
 8002aae:	11db      	asrs	r3, r3, #7
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f003 0306 	and.w	r3, r3, #6
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f063 030e 	orn	r3, r3, #14
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4907      	ldr	r1, [pc, #28]	@ (8002ae8 <I2C_MasterRequestRead+0x198>)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f888 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	00010008 	.word	0x00010008
 8002ae8:	00010002 	.word	0x00010002

08002aec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002afc:	e048      	b.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b04:	d044      	beq.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7fe ff49 	bl	800199c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d139      	bne.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	0c1b      	lsrs	r3, r3, #16
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d10d      	bne.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	43da      	mvns	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	e00c      	b.n	8002b5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d116      	bne.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e023      	b.n	8002bd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10d      	bne.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	e00c      	b.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d093      	beq.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bee:	e071      	b.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bfe:	d123      	bne.n	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e067      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c4e:	d041      	beq.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c50:	f7fe fea4 	bl	800199c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d302      	bcc.n	8002c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d136      	bne.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d10c      	bne.n	8002c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf14      	ite	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	2300      	moveq	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	e00b      	b.n	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d016      	beq.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e021      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	0c1b      	lsrs	r3, r3, #16
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d10c      	bne.n	8002cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e00b      	b.n	8002d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4013      	ands	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f47f af6d 	bne.w	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d2c:	e034      	b.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f8e3 	bl	8002efa <I2C_IsAcknowledgeFailed>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e034      	b.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d44:	d028      	beq.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7fe fe29 	bl	800199c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d11d      	bne.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d66:	2b80      	cmp	r3, #128	@ 0x80
 8002d68:	d016      	beq.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da2:	2b80      	cmp	r3, #128	@ 0x80
 8002da4:	d1c3      	bne.n	8002d2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dbc:	e034      	b.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f89b 	bl	8002efa <I2C_IsAcknowledgeFailed>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e034      	b.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dd4:	d028      	beq.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd6:	f7fe fde1 	bl	800199c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d11d      	bne.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d016      	beq.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e007      	b.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d1c3      	bne.n	8002dbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e4c:	e049      	b.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b10      	cmp	r3, #16
 8002e5a:	d119      	bne.n	8002e90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0210 	mvn.w	r2, #16
 8002e64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e030      	b.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e90:	f7fe fd84 	bl	800199c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d302      	bcc.n	8002ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d11d      	bne.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb0:	2b40      	cmp	r3, #64	@ 0x40
 8002eb2:	d016      	beq.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	f043 0220 	orr.w	r2, r3, #32
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e007      	b.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eec:	2b40      	cmp	r3, #64	@ 0x40
 8002eee:	d1ae      	bne.n	8002e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f10:	d11b      	bne.n	8002f4a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f043 0204 	orr.w	r2, r3, #4
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0cc      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b68      	ldr	r3, [pc, #416]	@ (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d90c      	bls.n	8002f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b65      	ldr	r3, [pc, #404]	@ (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	4b63      	ldr	r3, [pc, #396]	@ (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0b8      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d020      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fac:	4b59      	ldr	r3, [pc, #356]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a58      	ldr	r2, [pc, #352]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc4:	4b53      	ldr	r3, [pc, #332]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a52      	ldr	r2, [pc, #328]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd0:	4b50      	ldr	r3, [pc, #320]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	494d      	ldr	r1, [pc, #308]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d044      	beq.n	8003078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b47      	ldr	r3, [pc, #284]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d119      	bne.n	8003036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e07f      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d003      	beq.n	8003016 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003012:	2b03      	cmp	r3, #3
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003016:	4b3f      	ldr	r3, [pc, #252]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e06f      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003026:	4b3b      	ldr	r3, [pc, #236]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e067      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003036:	4b37      	ldr	r3, [pc, #220]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f023 0203 	bic.w	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4934      	ldr	r1, [pc, #208]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	4313      	orrs	r3, r2
 8003046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003048:	f7fe fca8 	bl	800199c <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	e00a      	b.n	8003066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003050:	f7fe fca4 	bl	800199c <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e04f      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	4b2b      	ldr	r3, [pc, #172]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 020c 	and.w	r2, r3, #12
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	429a      	cmp	r2, r3
 8003076:	d1eb      	bne.n	8003050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003078:	4b25      	ldr	r3, [pc, #148]	@ (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d20c      	bcs.n	80030a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b22      	ldr	r3, [pc, #136]	@ (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b20      	ldr	r3, [pc, #128]	@ (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e032      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ac:	4b19      	ldr	r3, [pc, #100]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4916      	ldr	r1, [pc, #88]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ca:	4b12      	ldr	r3, [pc, #72]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	490e      	ldr	r1, [pc, #56]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030de:	f000 f855 	bl	800318c <HAL_RCC_GetSysClockFreq>
 80030e2:	4602      	mov	r2, r0
 80030e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	490a      	ldr	r1, [pc, #40]	@ (8003118 <HAL_RCC_ClockConfig+0x1c0>)
 80030f0:	5ccb      	ldrb	r3, [r1, r3]
 80030f2:	fa22 f303 	lsr.w	r3, r2, r3
 80030f6:	4a09      	ldr	r2, [pc, #36]	@ (800311c <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030fa:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <HAL_RCC_ClockConfig+0x1c8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fc08 	bl	8001914 <HAL_InitTick>

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023c00 	.word	0x40023c00
 8003114:	40023800 	.word	0x40023800
 8003118:	08005d80 	.word	0x08005d80
 800311c:	20000000 	.word	0x20000000
 8003120:	20000004 	.word	0x20000004

08003124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003128:	4b03      	ldr	r3, [pc, #12]	@ (8003138 <HAL_RCC_GetHCLKFreq+0x14>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000000 	.word	0x20000000

0800313c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003140:	f7ff fff0 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 8003144:	4602      	mov	r2, r0
 8003146:	4b05      	ldr	r3, [pc, #20]	@ (800315c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	0a9b      	lsrs	r3, r3, #10
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	4903      	ldr	r1, [pc, #12]	@ (8003160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003152:	5ccb      	ldrb	r3, [r1, r3]
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40023800 	.word	0x40023800
 8003160:	08005d90 	.word	0x08005d90

08003164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003168:	f7ff ffdc 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	0b5b      	lsrs	r3, r3, #13
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	4903      	ldr	r1, [pc, #12]	@ (8003188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40023800 	.word	0x40023800
 8003188:	08005d90 	.word	0x08005d90

0800318c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800318c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003190:	b0ae      	sub	sp, #184	@ 0xb8
 8003192:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b2:	4bcb      	ldr	r3, [pc, #812]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	f200 8206 	bhi.w	80035cc <HAL_RCC_GetSysClockFreq+0x440>
 80031c0:	a201      	add	r2, pc, #4	@ (adr r2, 80031c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80031c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c6:	bf00      	nop
 80031c8:	080031fd 	.word	0x080031fd
 80031cc:	080035cd 	.word	0x080035cd
 80031d0:	080035cd 	.word	0x080035cd
 80031d4:	080035cd 	.word	0x080035cd
 80031d8:	08003205 	.word	0x08003205
 80031dc:	080035cd 	.word	0x080035cd
 80031e0:	080035cd 	.word	0x080035cd
 80031e4:	080035cd 	.word	0x080035cd
 80031e8:	0800320d 	.word	0x0800320d
 80031ec:	080035cd 	.word	0x080035cd
 80031f0:	080035cd 	.word	0x080035cd
 80031f4:	080035cd 	.word	0x080035cd
 80031f8:	080033fd 	.word	0x080033fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4bb9      	ldr	r3, [pc, #740]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80031fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003202:	e1e7      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003204:	4bb8      	ldr	r3, [pc, #736]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003206:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800320a:	e1e3      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800320c:	4bb4      	ldr	r3, [pc, #720]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003214:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003218:	4bb1      	ldr	r3, [pc, #708]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d071      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003224:	4bae      	ldr	r3, [pc, #696]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	099b      	lsrs	r3, r3, #6
 800322a:	2200      	movs	r2, #0
 800322c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003230:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003234:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003240:	2300      	movs	r3, #0
 8003242:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003246:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800324a:	4622      	mov	r2, r4
 800324c:	462b      	mov	r3, r5
 800324e:	f04f 0000 	mov.w	r0, #0
 8003252:	f04f 0100 	mov.w	r1, #0
 8003256:	0159      	lsls	r1, r3, #5
 8003258:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800325c:	0150      	lsls	r0, r2, #5
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4621      	mov	r1, r4
 8003264:	1a51      	subs	r1, r2, r1
 8003266:	6439      	str	r1, [r7, #64]	@ 0x40
 8003268:	4629      	mov	r1, r5
 800326a:	eb63 0301 	sbc.w	r3, r3, r1
 800326e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800327c:	4649      	mov	r1, r9
 800327e:	018b      	lsls	r3, r1, #6
 8003280:	4641      	mov	r1, r8
 8003282:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003286:	4641      	mov	r1, r8
 8003288:	018a      	lsls	r2, r1, #6
 800328a:	4641      	mov	r1, r8
 800328c:	1a51      	subs	r1, r2, r1
 800328e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003290:	4649      	mov	r1, r9
 8003292:	eb63 0301 	sbc.w	r3, r3, r1
 8003296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80032a4:	4649      	mov	r1, r9
 80032a6:	00cb      	lsls	r3, r1, #3
 80032a8:	4641      	mov	r1, r8
 80032aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ae:	4641      	mov	r1, r8
 80032b0:	00ca      	lsls	r2, r1, #3
 80032b2:	4610      	mov	r0, r2
 80032b4:	4619      	mov	r1, r3
 80032b6:	4603      	mov	r3, r0
 80032b8:	4622      	mov	r2, r4
 80032ba:	189b      	adds	r3, r3, r2
 80032bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80032be:	462b      	mov	r3, r5
 80032c0:	460a      	mov	r2, r1
 80032c2:	eb42 0303 	adc.w	r3, r2, r3
 80032c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80032d4:	4629      	mov	r1, r5
 80032d6:	024b      	lsls	r3, r1, #9
 80032d8:	4621      	mov	r1, r4
 80032da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032de:	4621      	mov	r1, r4
 80032e0:	024a      	lsls	r2, r1, #9
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80032f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80032f8:	f7fd fb10 	bl	800091c <__aeabi_uldivmod>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4613      	mov	r3, r2
 8003302:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003306:	e067      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003308:	4b75      	ldr	r3, [pc, #468]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	2200      	movs	r2, #0
 8003310:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003314:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003318:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800331c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003320:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003322:	2300      	movs	r3, #0
 8003324:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003326:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800332a:	4622      	mov	r2, r4
 800332c:	462b      	mov	r3, r5
 800332e:	f04f 0000 	mov.w	r0, #0
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	0159      	lsls	r1, r3, #5
 8003338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800333c:	0150      	lsls	r0, r2, #5
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4621      	mov	r1, r4
 8003344:	1a51      	subs	r1, r2, r1
 8003346:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003348:	4629      	mov	r1, r5
 800334a:	eb63 0301 	sbc.w	r3, r3, r1
 800334e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800335c:	4649      	mov	r1, r9
 800335e:	018b      	lsls	r3, r1, #6
 8003360:	4641      	mov	r1, r8
 8003362:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003366:	4641      	mov	r1, r8
 8003368:	018a      	lsls	r2, r1, #6
 800336a:	4641      	mov	r1, r8
 800336c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003370:	4649      	mov	r1, r9
 8003372:	eb63 0b01 	sbc.w	fp, r3, r1
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003382:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003386:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800338a:	4692      	mov	sl, r2
 800338c:	469b      	mov	fp, r3
 800338e:	4623      	mov	r3, r4
 8003390:	eb1a 0303 	adds.w	r3, sl, r3
 8003394:	623b      	str	r3, [r7, #32]
 8003396:	462b      	mov	r3, r5
 8003398:	eb4b 0303 	adc.w	r3, fp, r3
 800339c:	627b      	str	r3, [r7, #36]	@ 0x24
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80033aa:	4629      	mov	r1, r5
 80033ac:	028b      	lsls	r3, r1, #10
 80033ae:	4621      	mov	r1, r4
 80033b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033b4:	4621      	mov	r1, r4
 80033b6:	028a      	lsls	r2, r1, #10
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033c0:	2200      	movs	r2, #0
 80033c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80033c4:	677a      	str	r2, [r7, #116]	@ 0x74
 80033c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80033ca:	f7fd faa7 	bl	800091c <__aeabi_uldivmod>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4613      	mov	r3, r2
 80033d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033d8:	4b41      	ldr	r3, [pc, #260]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	0c1b      	lsrs	r3, r3, #16
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	3301      	adds	r3, #1
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80033ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033fa:	e0eb      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033fc:	4b38      	ldr	r3, [pc, #224]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003404:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003408:	4b35      	ldr	r3, [pc, #212]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d06b      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003414:	4b32      	ldr	r3, [pc, #200]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	099b      	lsrs	r3, r3, #6
 800341a:	2200      	movs	r2, #0
 800341c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800341e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003420:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003426:	663b      	str	r3, [r7, #96]	@ 0x60
 8003428:	2300      	movs	r3, #0
 800342a:	667b      	str	r3, [r7, #100]	@ 0x64
 800342c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003430:	4622      	mov	r2, r4
 8003432:	462b      	mov	r3, r5
 8003434:	f04f 0000 	mov.w	r0, #0
 8003438:	f04f 0100 	mov.w	r1, #0
 800343c:	0159      	lsls	r1, r3, #5
 800343e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003442:	0150      	lsls	r0, r2, #5
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4621      	mov	r1, r4
 800344a:	1a51      	subs	r1, r2, r1
 800344c:	61b9      	str	r1, [r7, #24]
 800344e:	4629      	mov	r1, r5
 8003450:	eb63 0301 	sbc.w	r3, r3, r1
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003462:	4659      	mov	r1, fp
 8003464:	018b      	lsls	r3, r1, #6
 8003466:	4651      	mov	r1, sl
 8003468:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800346c:	4651      	mov	r1, sl
 800346e:	018a      	lsls	r2, r1, #6
 8003470:	4651      	mov	r1, sl
 8003472:	ebb2 0801 	subs.w	r8, r2, r1
 8003476:	4659      	mov	r1, fp
 8003478:	eb63 0901 	sbc.w	r9, r3, r1
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003488:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800348c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003490:	4690      	mov	r8, r2
 8003492:	4699      	mov	r9, r3
 8003494:	4623      	mov	r3, r4
 8003496:	eb18 0303 	adds.w	r3, r8, r3
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	462b      	mov	r3, r5
 800349e:	eb49 0303 	adc.w	r3, r9, r3
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80034b0:	4629      	mov	r1, r5
 80034b2:	024b      	lsls	r3, r1, #9
 80034b4:	4621      	mov	r1, r4
 80034b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034ba:	4621      	mov	r1, r4
 80034bc:	024a      	lsls	r2, r1, #9
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034c6:	2200      	movs	r2, #0
 80034c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034ca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80034cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034d0:	f7fd fa24 	bl	800091c <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4613      	mov	r3, r2
 80034da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034de:	e065      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x420>
 80034e0:	40023800 	.word	0x40023800
 80034e4:	00f42400 	.word	0x00f42400
 80034e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ec:	4b3d      	ldr	r3, [pc, #244]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	2200      	movs	r2, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	4611      	mov	r1, r2
 80034f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80034fe:	2300      	movs	r3, #0
 8003500:	657b      	str	r3, [r7, #84]	@ 0x54
 8003502:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003506:	4642      	mov	r2, r8
 8003508:	464b      	mov	r3, r9
 800350a:	f04f 0000 	mov.w	r0, #0
 800350e:	f04f 0100 	mov.w	r1, #0
 8003512:	0159      	lsls	r1, r3, #5
 8003514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003518:	0150      	lsls	r0, r2, #5
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4641      	mov	r1, r8
 8003520:	1a51      	subs	r1, r2, r1
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	4649      	mov	r1, r9
 8003526:	eb63 0301 	sbc.w	r3, r3, r1
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003538:	4659      	mov	r1, fp
 800353a:	018b      	lsls	r3, r1, #6
 800353c:	4651      	mov	r1, sl
 800353e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003542:	4651      	mov	r1, sl
 8003544:	018a      	lsls	r2, r1, #6
 8003546:	4651      	mov	r1, sl
 8003548:	1a54      	subs	r4, r2, r1
 800354a:	4659      	mov	r1, fp
 800354c:	eb63 0501 	sbc.w	r5, r3, r1
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	00eb      	lsls	r3, r5, #3
 800355a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800355e:	00e2      	lsls	r2, r4, #3
 8003560:	4614      	mov	r4, r2
 8003562:	461d      	mov	r5, r3
 8003564:	4643      	mov	r3, r8
 8003566:	18e3      	adds	r3, r4, r3
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	464b      	mov	r3, r9
 800356c:	eb45 0303 	adc.w	r3, r5, r3
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800357e:	4629      	mov	r1, r5
 8003580:	028b      	lsls	r3, r1, #10
 8003582:	4621      	mov	r1, r4
 8003584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003588:	4621      	mov	r1, r4
 800358a:	028a      	lsls	r2, r1, #10
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003594:	2200      	movs	r2, #0
 8003596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003598:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800359a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800359e:	f7fd f9bd 	bl	800091c <__aeabi_uldivmod>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4613      	mov	r3, r2
 80035a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80035ac:	4b0d      	ldr	r3, [pc, #52]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	0f1b      	lsrs	r3, r3, #28
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80035ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035ca:	e003      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b06      	ldr	r3, [pc, #24]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80035ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	37b8      	adds	r7, #184	@ 0xb8
 80035dc:	46bd      	mov	sp, r7
 80035de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e2:	bf00      	nop
 80035e4:	40023800 	.word	0x40023800
 80035e8:	00f42400 	.word	0x00f42400

080035ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e28d      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8083 	beq.w	8003712 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800360c:	4b94      	ldr	r3, [pc, #592]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b04      	cmp	r3, #4
 8003616:	d019      	beq.n	800364c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003618:	4b91      	ldr	r3, [pc, #580]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003620:	2b08      	cmp	r3, #8
 8003622:	d106      	bne.n	8003632 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003624:	4b8e      	ldr	r3, [pc, #568]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003630:	d00c      	beq.n	800364c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003632:	4b8b      	ldr	r3, [pc, #556]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800363a:	2b0c      	cmp	r3, #12
 800363c:	d112      	bne.n	8003664 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800363e:	4b88      	ldr	r3, [pc, #544]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003646:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800364a:	d10b      	bne.n	8003664 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	4b84      	ldr	r3, [pc, #528]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d05b      	beq.n	8003710 <HAL_RCC_OscConfig+0x124>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d157      	bne.n	8003710 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e25a      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800366c:	d106      	bne.n	800367c <HAL_RCC_OscConfig+0x90>
 800366e:	4b7c      	ldr	r3, [pc, #496]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a7b      	ldr	r2, [pc, #492]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e01d      	b.n	80036b8 <HAL_RCC_OscConfig+0xcc>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0xb4>
 8003686:	4b76      	ldr	r3, [pc, #472]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a75      	ldr	r2, [pc, #468]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 800368c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	4b73      	ldr	r3, [pc, #460]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a72      	ldr	r2, [pc, #456]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e00b      	b.n	80036b8 <HAL_RCC_OscConfig+0xcc>
 80036a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 80036b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d013      	beq.n	80036e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fe f96c 	bl	800199c <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fe f968 	bl	800199c <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	@ 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e21f      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	4b61      	ldr	r3, [pc, #388]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0xdc>
 80036e6:	e014      	b.n	8003712 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fe f958 	bl	800199c <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f0:	f7fe f954 	bl	800199c <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	@ 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e20b      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003702:	4b57      	ldr	r3, [pc, #348]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x104>
 800370e:	e000      	b.n	8003712 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d06f      	beq.n	80037fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800371e:	4b50      	ldr	r3, [pc, #320]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	2b00      	cmp	r3, #0
 8003728:	d017      	beq.n	800375a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800372a:	4b4d      	ldr	r3, [pc, #308]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003732:	2b08      	cmp	r3, #8
 8003734:	d105      	bne.n	8003742 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003736:	4b4a      	ldr	r3, [pc, #296]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00b      	beq.n	800375a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003742:	4b47      	ldr	r3, [pc, #284]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800374a:	2b0c      	cmp	r3, #12
 800374c:	d11c      	bne.n	8003788 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374e:	4b44      	ldr	r3, [pc, #272]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d116      	bne.n	8003788 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375a:	4b41      	ldr	r3, [pc, #260]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_RCC_OscConfig+0x186>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d001      	beq.n	8003772 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e1d3      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003772:	4b3b      	ldr	r3, [pc, #236]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4937      	ldr	r1, [pc, #220]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003786:	e03a      	b.n	80037fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d020      	beq.n	80037d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003790:	4b34      	ldr	r3, [pc, #208]	@ (8003864 <HAL_RCC_OscConfig+0x278>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003796:	f7fe f901 	bl	800199c <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800379e:	f7fe f8fd 	bl	800199c <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e1b4      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037bc:	4b28      	ldr	r3, [pc, #160]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	4925      	ldr	r1, [pc, #148]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	600b      	str	r3, [r1, #0]
 80037d0:	e015      	b.n	80037fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d2:	4b24      	ldr	r3, [pc, #144]	@ (8003864 <HAL_RCC_OscConfig+0x278>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fe f8e0 	bl	800199c <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e0:	f7fe f8dc 	bl	800199c <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e193      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d036      	beq.n	8003878 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d016      	beq.n	8003840 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003812:	4b15      	ldr	r3, [pc, #84]	@ (8003868 <HAL_RCC_OscConfig+0x27c>)
 8003814:	2201      	movs	r2, #1
 8003816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fe f8c0 	bl	800199c <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003820:	f7fe f8bc 	bl	800199c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e173      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003832:	4b0b      	ldr	r3, [pc, #44]	@ (8003860 <HAL_RCC_OscConfig+0x274>)
 8003834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0x234>
 800383e:	e01b      	b.n	8003878 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003840:	4b09      	ldr	r3, [pc, #36]	@ (8003868 <HAL_RCC_OscConfig+0x27c>)
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003846:	f7fe f8a9 	bl	800199c <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800384c:	e00e      	b.n	800386c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800384e:	f7fe f8a5 	bl	800199c <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d907      	bls.n	800386c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e15c      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
 8003860:	40023800 	.word	0x40023800
 8003864:	42470000 	.word	0x42470000
 8003868:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386c:	4b8a      	ldr	r3, [pc, #552]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 800386e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1ea      	bne.n	800384e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8097 	beq.w	80039b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388a:	4b83      	ldr	r3, [pc, #524]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10f      	bne.n	80038b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 80038a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038a6:	4b7c      	ldr	r3, [pc, #496]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b2:	2301      	movs	r3, #1
 80038b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b6:	4b79      	ldr	r3, [pc, #484]	@ (8003a9c <HAL_RCC_OscConfig+0x4b0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d118      	bne.n	80038f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038c2:	4b76      	ldr	r3, [pc, #472]	@ (8003a9c <HAL_RCC_OscConfig+0x4b0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a75      	ldr	r2, [pc, #468]	@ (8003a9c <HAL_RCC_OscConfig+0x4b0>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ce:	f7fe f865 	bl	800199c <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d6:	f7fe f861 	bl	800199c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e118      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e8:	4b6c      	ldr	r3, [pc, #432]	@ (8003a9c <HAL_RCC_OscConfig+0x4b0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d106      	bne.n	800390a <HAL_RCC_OscConfig+0x31e>
 80038fc:	4b66      	ldr	r3, [pc, #408]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003900:	4a65      	ldr	r2, [pc, #404]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6713      	str	r3, [r2, #112]	@ 0x70
 8003908:	e01c      	b.n	8003944 <HAL_RCC_OscConfig+0x358>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b05      	cmp	r3, #5
 8003910:	d10c      	bne.n	800392c <HAL_RCC_OscConfig+0x340>
 8003912:	4b61      	ldr	r3, [pc, #388]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003916:	4a60      	ldr	r2, [pc, #384]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 8003918:	f043 0304 	orr.w	r3, r3, #4
 800391c:	6713      	str	r3, [r2, #112]	@ 0x70
 800391e:	4b5e      	ldr	r3, [pc, #376]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003922:	4a5d      	ldr	r2, [pc, #372]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6713      	str	r3, [r2, #112]	@ 0x70
 800392a:	e00b      	b.n	8003944 <HAL_RCC_OscConfig+0x358>
 800392c:	4b5a      	ldr	r3, [pc, #360]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003930:	4a59      	ldr	r2, [pc, #356]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	6713      	str	r3, [r2, #112]	@ 0x70
 8003938:	4b57      	ldr	r3, [pc, #348]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393c:	4a56      	ldr	r2, [pc, #344]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 800393e:	f023 0304 	bic.w	r3, r3, #4
 8003942:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d015      	beq.n	8003978 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fe f826 	bl	800199c <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003952:	e00a      	b.n	800396a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003954:	f7fe f822 	bl	800199c <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003962:	4293      	cmp	r3, r2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e0d7      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0ee      	beq.n	8003954 <HAL_RCC_OscConfig+0x368>
 8003976:	e014      	b.n	80039a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fe f810 	bl	800199c <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397e:	e00a      	b.n	8003996 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7fe f80c 	bl	800199c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e0c1      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003996:	4b40      	ldr	r3, [pc, #256]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1ee      	bne.n	8003980 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d105      	bne.n	80039b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 80039ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80ad 	beq.w	8003b18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039be:	4b36      	ldr	r3, [pc, #216]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d060      	beq.n	8003a8c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d145      	bne.n	8003a5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d2:	4b33      	ldr	r3, [pc, #204]	@ (8003aa0 <HAL_RCC_OscConfig+0x4b4>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd ffe0 	bl	800199c <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e0:	f7fd ffdc 	bl	800199c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e093      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f2:	4b29      	ldr	r3, [pc, #164]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69da      	ldr	r2, [r3, #28]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	019b      	lsls	r3, r3, #6
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	3b01      	subs	r3, #1
 8003a18:	041b      	lsls	r3, r3, #16
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a20:	061b      	lsls	r3, r3, #24
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a28:	071b      	lsls	r3, r3, #28
 8003a2a:	491b      	ldr	r1, [pc, #108]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a30:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa0 <HAL_RCC_OscConfig+0x4b4>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a36:	f7fd ffb1 	bl	800199c <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7fd ffad 	bl	800199c <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e064      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a50:	4b11      	ldr	r3, [pc, #68]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x452>
 8003a5c:	e05c      	b.n	8003b18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5e:	4b10      	ldr	r3, [pc, #64]	@ (8003aa0 <HAL_RCC_OscConfig+0x4b4>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7fd ff9a 	bl	800199c <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7fd ff96 	bl	800199c <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e04d      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7e:	4b06      	ldr	r3, [pc, #24]	@ (8003a98 <HAL_RCC_OscConfig+0x4ac>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x480>
 8003a8a:	e045      	b.n	8003b18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d107      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e040      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40007000 	.word	0x40007000
 8003aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b24 <HAL_RCC_OscConfig+0x538>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d030      	beq.n	8003b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d129      	bne.n	8003b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d122      	bne.n	8003b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d119      	bne.n	8003b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	3b01      	subs	r3, #1
 8003aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d10f      	bne.n	8003b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800

08003b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e041      	b.n	8003bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fd fd88 	bl	8001664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	4619      	mov	r1, r3
 8003b66:	4610      	mov	r0, r2
 8003b68:	f000 fc40 	bl	80043ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d001      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e04e      	b.n	8003c7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a23      	ldr	r2, [pc, #140]	@ (8003c8c <HAL_TIM_Base_Start_IT+0xc4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d022      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c0a:	d01d      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1f      	ldr	r2, [pc, #124]	@ (8003c90 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d018      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003c94 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d013      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1c      	ldr	r2, [pc, #112]	@ (8003c98 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00e      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8003c9c <HAL_TIM_Base_Start_IT+0xd4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d009      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a19      	ldr	r2, [pc, #100]	@ (8003ca0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d004      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a18      	ldr	r2, [pc, #96]	@ (8003ca4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d111      	bne.n	8003c6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b06      	cmp	r3, #6
 8003c58:	d010      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0201 	orr.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6a:	e007      	b.n	8003c7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40010000 	.word	0x40010000
 8003c90:	40000400 	.word	0x40000400
 8003c94:	40000800 	.word	0x40000800
 8003c98:	40000c00 	.word	0x40000c00
 8003c9c:	40010400 	.word	0x40010400
 8003ca0:	40014000 	.word	0x40014000
 8003ca4:	40001800 	.word	0x40001800

08003ca8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e041      	b.n	8003d3e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f839 	bl	8003d46 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f000 fb80 	bl	80043ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d109      	bne.n	8003d84 <HAL_TIM_OC_Start_IT+0x28>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	bf14      	ite	ne
 8003d7c:	2301      	movne	r3, #1
 8003d7e:	2300      	moveq	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e022      	b.n	8003dca <HAL_TIM_OC_Start_IT+0x6e>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d109      	bne.n	8003d9e <HAL_TIM_OC_Start_IT+0x42>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	bf14      	ite	ne
 8003d96:	2301      	movne	r3, #1
 8003d98:	2300      	moveq	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	e015      	b.n	8003dca <HAL_TIM_OC_Start_IT+0x6e>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d109      	bne.n	8003db8 <HAL_TIM_OC_Start_IT+0x5c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	bf14      	ite	ne
 8003db0:	2301      	movne	r3, #1
 8003db2:	2300      	moveq	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	e008      	b.n	8003dca <HAL_TIM_OC_Start_IT+0x6e>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e0c7      	b.n	8003f62 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d104      	bne.n	8003de2 <HAL_TIM_OC_Start_IT+0x86>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003de0:	e013      	b.n	8003e0a <HAL_TIM_OC_Start_IT+0xae>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d104      	bne.n	8003df2 <HAL_TIM_OC_Start_IT+0x96>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003df0:	e00b      	b.n	8003e0a <HAL_TIM_OC_Start_IT+0xae>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d104      	bne.n	8003e02 <HAL_TIM_OC_Start_IT+0xa6>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e00:	e003      	b.n	8003e0a <HAL_TIM_OC_Start_IT+0xae>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	d841      	bhi.n	8003e94 <HAL_TIM_OC_Start_IT+0x138>
 8003e10:	a201      	add	r2, pc, #4	@ (adr r2, 8003e18 <HAL_TIM_OC_Start_IT+0xbc>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e4d 	.word	0x08003e4d
 8003e1c:	08003e95 	.word	0x08003e95
 8003e20:	08003e95 	.word	0x08003e95
 8003e24:	08003e95 	.word	0x08003e95
 8003e28:	08003e5f 	.word	0x08003e5f
 8003e2c:	08003e95 	.word	0x08003e95
 8003e30:	08003e95 	.word	0x08003e95
 8003e34:	08003e95 	.word	0x08003e95
 8003e38:	08003e71 	.word	0x08003e71
 8003e3c:	08003e95 	.word	0x08003e95
 8003e40:	08003e95 	.word	0x08003e95
 8003e44:	08003e95 	.word	0x08003e95
 8003e48:	08003e83 	.word	0x08003e83
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0202 	orr.w	r2, r2, #2
 8003e5a:	60da      	str	r2, [r3, #12]
      break;
 8003e5c:	e01d      	b.n	8003e9a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0204 	orr.w	r2, r2, #4
 8003e6c:	60da      	str	r2, [r3, #12]
      break;
 8003e6e:	e014      	b.n	8003e9a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0208 	orr.w	r2, r2, #8
 8003e7e:	60da      	str	r2, [r3, #12]
      break;
 8003e80:	e00b      	b.n	8003e9a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0210 	orr.w	r2, r2, #16
 8003e90:	60da      	str	r2, [r3, #12]
      break;
 8003e92:	e002      	b.n	8003e9a <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
      break;
 8003e98:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d15f      	bne.n	8003f60 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	6839      	ldr	r1, [r7, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fd95 	bl	80049d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a2e      	ldr	r2, [pc, #184]	@ (8003f6c <HAL_TIM_OC_Start_IT+0x210>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d004      	beq.n	8003ec2 <HAL_TIM_OC_Start_IT+0x166>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a2c      	ldr	r2, [pc, #176]	@ (8003f70 <HAL_TIM_OC_Start_IT+0x214>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d101      	bne.n	8003ec6 <HAL_TIM_OC_Start_IT+0x16a>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <HAL_TIM_OC_Start_IT+0x16c>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003eda:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a22      	ldr	r2, [pc, #136]	@ (8003f6c <HAL_TIM_OC_Start_IT+0x210>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d022      	beq.n	8003f2c <HAL_TIM_OC_Start_IT+0x1d0>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eee:	d01d      	beq.n	8003f2c <HAL_TIM_OC_Start_IT+0x1d0>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f74 <HAL_TIM_OC_Start_IT+0x218>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d018      	beq.n	8003f2c <HAL_TIM_OC_Start_IT+0x1d0>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1e      	ldr	r2, [pc, #120]	@ (8003f78 <HAL_TIM_OC_Start_IT+0x21c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d013      	beq.n	8003f2c <HAL_TIM_OC_Start_IT+0x1d0>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1c      	ldr	r2, [pc, #112]	@ (8003f7c <HAL_TIM_OC_Start_IT+0x220>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00e      	beq.n	8003f2c <HAL_TIM_OC_Start_IT+0x1d0>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a17      	ldr	r2, [pc, #92]	@ (8003f70 <HAL_TIM_OC_Start_IT+0x214>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d009      	beq.n	8003f2c <HAL_TIM_OC_Start_IT+0x1d0>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a18      	ldr	r2, [pc, #96]	@ (8003f80 <HAL_TIM_OC_Start_IT+0x224>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_TIM_OC_Start_IT+0x1d0>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a17      	ldr	r2, [pc, #92]	@ (8003f84 <HAL_TIM_OC_Start_IT+0x228>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d111      	bne.n	8003f50 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b06      	cmp	r3, #6
 8003f3c:	d010      	beq.n	8003f60 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0201 	orr.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	e007      	b.n	8003f60 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40010000 	.word	0x40010000
 8003f70:	40010400 	.word	0x40010400
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40000800 	.word	0x40000800
 8003f7c:	40000c00 	.word	0x40000c00
 8003f80:	40014000 	.word	0x40014000
 8003f84:	40001800 	.word	0x40001800

08003f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d020      	beq.n	8003fec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01b      	beq.n	8003fec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0202 	mvn.w	r2, #2
 8003fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f9eb 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 8003fd8:	e005      	b.n	8003fe6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd fa6c 	bl	80014b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f9ee 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d020      	beq.n	8004038 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01b      	beq.n	8004038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0204 	mvn.w	r2, #4
 8004008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f9c5 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 8004024:	e005      	b.n	8004032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fd fa46 	bl	80014b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f9c8 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d020      	beq.n	8004084 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01b      	beq.n	8004084 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0208 	mvn.w	r2, #8
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2204      	movs	r2, #4
 800405a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f99f 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7fd fa20 	bl	80014b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f9a2 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	d020      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01b      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0210 	mvn.w	r2, #16
 80040a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2208      	movs	r2, #8
 80040a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f979 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 80040bc:	e005      	b.n	80040ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fd f9fa 	bl	80014b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f97c 	bl	80043c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00c      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0201 	mvn.w	r2, #1
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fd f9cc 	bl	800148c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00c      	beq.n	8004118 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fd5e 	bl	8004bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00c      	beq.n	800413c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f94d 	bl	80043d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00c      	beq.n	8004160 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0220 	mvn.w	r2, #32
 8004158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fd30 	bl	8004bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004160:	bf00      	nop
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004182:	2302      	movs	r3, #2
 8004184:	e048      	b.n	8004218 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b0c      	cmp	r3, #12
 8004192:	d839      	bhi.n	8004208 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004194:	a201      	add	r2, pc, #4	@ (adr r2, 800419c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041d1 	.word	0x080041d1
 80041a0:	08004209 	.word	0x08004209
 80041a4:	08004209 	.word	0x08004209
 80041a8:	08004209 	.word	0x08004209
 80041ac:	080041df 	.word	0x080041df
 80041b0:	08004209 	.word	0x08004209
 80041b4:	08004209 	.word	0x08004209
 80041b8:	08004209 	.word	0x08004209
 80041bc:	080041ed 	.word	0x080041ed
 80041c0:	08004209 	.word	0x08004209
 80041c4:	08004209 	.word	0x08004209
 80041c8:	08004209 	.word	0x08004209
 80041cc:	080041fb 	.word	0x080041fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f9b4 	bl	8004544 <TIM_OC1_SetConfig>
      break;
 80041dc:	e017      	b.n	800420e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fa1d 	bl	8004624 <TIM_OC2_SetConfig>
      break;
 80041ea:	e010      	b.n	800420e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fa8c 	bl	8004710 <TIM_OC3_SetConfig>
      break;
 80041f8:	e009      	b.n	800420e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	4618      	mov	r0, r3
 8004202:	f000 faf9 	bl	80047f8 <TIM_OC4_SetConfig>
      break;
 8004206:	e002      	b.n	800420e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	75fb      	strb	r3, [r7, #23]
      break;
 800420c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004216:	7dfb      	ldrb	r3, [r7, #23]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_TIM_ConfigClockSource+0x1c>
 8004238:	2302      	movs	r3, #2
 800423a:	e0b4      	b.n	80043a6 <HAL_TIM_ConfigClockSource+0x186>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800425a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004274:	d03e      	beq.n	80042f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427a:	f200 8087 	bhi.w	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004282:	f000 8086 	beq.w	8004392 <HAL_TIM_ConfigClockSource+0x172>
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800428a:	d87f      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800428c:	2b70      	cmp	r3, #112	@ 0x70
 800428e:	d01a      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004290:	2b70      	cmp	r3, #112	@ 0x70
 8004292:	d87b      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 8004294:	2b60      	cmp	r3, #96	@ 0x60
 8004296:	d050      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x11a>
 8004298:	2b60      	cmp	r3, #96	@ 0x60
 800429a:	d877      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800429c:	2b50      	cmp	r3, #80	@ 0x50
 800429e:	d03c      	beq.n	800431a <HAL_TIM_ConfigClockSource+0xfa>
 80042a0:	2b50      	cmp	r3, #80	@ 0x50
 80042a2:	d873      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042a4:	2b40      	cmp	r3, #64	@ 0x40
 80042a6:	d058      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x13a>
 80042a8:	2b40      	cmp	r3, #64	@ 0x40
 80042aa:	d86f      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042ac:	2b30      	cmp	r3, #48	@ 0x30
 80042ae:	d064      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042b0:	2b30      	cmp	r3, #48	@ 0x30
 80042b2:	d86b      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d060      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d867      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05c      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d05a      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042c4:	e062      	b.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042d6:	f000 fb5f 	bl	8004998 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	609a      	str	r2, [r3, #8]
      break;
 80042f2:	e04f      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004304:	f000 fb48 	bl	8004998 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004316:	609a      	str	r2, [r3, #8]
      break;
 8004318:	e03c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004326:	461a      	mov	r2, r3
 8004328:	f000 fabc 	bl	80048a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2150      	movs	r1, #80	@ 0x50
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fb15 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 8004338:	e02c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004346:	461a      	mov	r2, r3
 8004348:	f000 fadb 	bl	8004902 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2160      	movs	r1, #96	@ 0x60
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fb05 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 8004358:	e01c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004366:	461a      	mov	r2, r3
 8004368:	f000 fa9c 	bl	80048a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2140      	movs	r1, #64	@ 0x40
 8004372:	4618      	mov	r0, r3
 8004374:	f000 faf5 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 8004378:	e00c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f000 faec 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 800438a:	e003      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      break;
 8004390:	e000      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a46      	ldr	r2, [pc, #280]	@ (8004518 <TIM_Base_SetConfig+0x12c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800440a:	d00f      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a43      	ldr	r2, [pc, #268]	@ (800451c <TIM_Base_SetConfig+0x130>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00b      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a42      	ldr	r2, [pc, #264]	@ (8004520 <TIM_Base_SetConfig+0x134>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d007      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a41      	ldr	r2, [pc, #260]	@ (8004524 <TIM_Base_SetConfig+0x138>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a40      	ldr	r2, [pc, #256]	@ (8004528 <TIM_Base_SetConfig+0x13c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d108      	bne.n	800443e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a35      	ldr	r2, [pc, #212]	@ (8004518 <TIM_Base_SetConfig+0x12c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d02b      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800444c:	d027      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a32      	ldr	r2, [pc, #200]	@ (800451c <TIM_Base_SetConfig+0x130>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d023      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a31      	ldr	r2, [pc, #196]	@ (8004520 <TIM_Base_SetConfig+0x134>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01f      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a30      	ldr	r2, [pc, #192]	@ (8004524 <TIM_Base_SetConfig+0x138>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d01b      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a2f      	ldr	r2, [pc, #188]	@ (8004528 <TIM_Base_SetConfig+0x13c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d017      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a2e      	ldr	r2, [pc, #184]	@ (800452c <TIM_Base_SetConfig+0x140>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a2d      	ldr	r2, [pc, #180]	@ (8004530 <TIM_Base_SetConfig+0x144>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00f      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a2c      	ldr	r2, [pc, #176]	@ (8004534 <TIM_Base_SetConfig+0x148>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00b      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a2b      	ldr	r2, [pc, #172]	@ (8004538 <TIM_Base_SetConfig+0x14c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d007      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a2a      	ldr	r2, [pc, #168]	@ (800453c <TIM_Base_SetConfig+0x150>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d003      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a29      	ldr	r2, [pc, #164]	@ (8004540 <TIM_Base_SetConfig+0x154>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d108      	bne.n	80044b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a10      	ldr	r2, [pc, #64]	@ (8004518 <TIM_Base_SetConfig+0x12c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_Base_SetConfig+0xf8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a12      	ldr	r2, [pc, #72]	@ (8004528 <TIM_Base_SetConfig+0x13c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d103      	bne.n	80044ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d105      	bne.n	800450a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f023 0201 	bic.w	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	611a      	str	r2, [r3, #16]
  }
}
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40010000 	.word	0x40010000
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800
 8004524:	40000c00 	.word	0x40000c00
 8004528:	40010400 	.word	0x40010400
 800452c:	40014000 	.word	0x40014000
 8004530:	40014400 	.word	0x40014400
 8004534:	40014800 	.word	0x40014800
 8004538:	40001800 	.word	0x40001800
 800453c:	40001c00 	.word	0x40001c00
 8004540:	40002000 	.word	0x40002000

08004544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f023 0201 	bic.w	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0303 	bic.w	r3, r3, #3
 800457a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f023 0302 	bic.w	r3, r3, #2
 800458c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a20      	ldr	r2, [pc, #128]	@ (800461c <TIM_OC1_SetConfig+0xd8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_OC1_SetConfig+0x64>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004620 <TIM_OC1_SetConfig+0xdc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d10c      	bne.n	80045c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f023 0308 	bic.w	r3, r3, #8
 80045ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f023 0304 	bic.w	r3, r3, #4
 80045c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a15      	ldr	r2, [pc, #84]	@ (800461c <TIM_OC1_SetConfig+0xd8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d003      	beq.n	80045d2 <TIM_OC1_SetConfig+0x8e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a14      	ldr	r2, [pc, #80]	@ (8004620 <TIM_OC1_SetConfig+0xdc>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d111      	bne.n	80045f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	621a      	str	r2, [r3, #32]
}
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	40010000 	.word	0x40010000
 8004620:	40010400 	.word	0x40010400

08004624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f023 0210 	bic.w	r2, r3, #16
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800465a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f023 0320 	bic.w	r3, r3, #32
 800466e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a22      	ldr	r2, [pc, #136]	@ (8004708 <TIM_OC2_SetConfig+0xe4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_OC2_SetConfig+0x68>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a21      	ldr	r2, [pc, #132]	@ (800470c <TIM_OC2_SetConfig+0xe8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d10d      	bne.n	80046a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a17      	ldr	r2, [pc, #92]	@ (8004708 <TIM_OC2_SetConfig+0xe4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d003      	beq.n	80046b8 <TIM_OC2_SetConfig+0x94>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a16      	ldr	r2, [pc, #88]	@ (800470c <TIM_OC2_SetConfig+0xe8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d113      	bne.n	80046e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	621a      	str	r2, [r3, #32]
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40010000 	.word	0x40010000
 800470c:	40010400 	.word	0x40010400

08004710 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0303 	bic.w	r3, r3, #3
 8004746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a21      	ldr	r2, [pc, #132]	@ (80047f0 <TIM_OC3_SetConfig+0xe0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d003      	beq.n	8004776 <TIM_OC3_SetConfig+0x66>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a20      	ldr	r2, [pc, #128]	@ (80047f4 <TIM_OC3_SetConfig+0xe4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d10d      	bne.n	8004792 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800477c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a16      	ldr	r2, [pc, #88]	@ (80047f0 <TIM_OC3_SetConfig+0xe0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_OC3_SetConfig+0x92>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a15      	ldr	r2, [pc, #84]	@ (80047f4 <TIM_OC3_SetConfig+0xe4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d113      	bne.n	80047ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	621a      	str	r2, [r3, #32]
}
 80047e4:	bf00      	nop
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40010400 	.word	0x40010400

080047f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800482e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	021b      	lsls	r3, r3, #8
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	031b      	lsls	r3, r3, #12
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a12      	ldr	r2, [pc, #72]	@ (800489c <TIM_OC4_SetConfig+0xa4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <TIM_OC4_SetConfig+0x68>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a11      	ldr	r2, [pc, #68]	@ (80048a0 <TIM_OC4_SetConfig+0xa8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d109      	bne.n	8004874 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004866:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	019b      	lsls	r3, r3, #6
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	621a      	str	r2, [r3, #32]
}
 800488e:	bf00      	nop
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40010000 	.word	0x40010000
 80048a0:	40010400 	.word	0x40010400

080048a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f023 0201 	bic.w	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f023 030a 	bic.w	r3, r3, #10
 80048e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004902:	b480      	push	{r7}
 8004904:	b087      	sub	sp, #28
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f023 0210 	bic.w	r2, r3, #16
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800492c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	031b      	lsls	r3, r3, #12
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800493e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	621a      	str	r2, [r3, #32]
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	f043 0307 	orr.w	r3, r3, #7
 8004984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	609a      	str	r2, [r3, #8]
}
 800498c:	bf00      	nop
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	021a      	lsls	r2, r3, #8
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	4313      	orrs	r3, r2
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	609a      	str	r2, [r3, #8]
}
 80049cc:	bf00      	nop
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	2201      	movs	r2, #1
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1a      	ldr	r2, [r3, #32]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	43db      	mvns	r3, r3
 80049fa:	401a      	ands	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1a      	ldr	r2, [r3, #32]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a10:	431a      	orrs	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	621a      	str	r2, [r3, #32]
}
 8004a16:	bf00      	nop
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e05a      	b.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a21      	ldr	r2, [pc, #132]	@ (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d022      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a88:	d01d      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d018      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a1b      	ldr	r2, [pc, #108]	@ (8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d013      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00e      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a18      	ldr	r2, [pc, #96]	@ (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d009      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a17      	ldr	r2, [pc, #92]	@ (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d004      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a15      	ldr	r2, [pc, #84]	@ (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40010000 	.word	0x40010000
 8004b04:	40000400 	.word	0x40000400
 8004b08:	40000800 	.word	0x40000800
 8004b0c:	40000c00 	.word	0x40000c00
 8004b10:	40010400 	.word	0x40010400
 8004b14:	40014000 	.word	0x40014000
 8004b18:	40001800 	.word	0x40001800

08004b1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e03d      	b.n	8004bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e042      	b.n	8004c80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fc fd58 	bl	80016c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2224      	movs	r2, #36	@ 0x24
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f973 	bl	8004f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695a      	ldr	r2, [r3, #20]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	@ 0x28
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	4613      	mov	r3, r2
 8004c96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	d175      	bne.n	8004d94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_UART_Transmit+0x2c>
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e06e      	b.n	8004d96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2221      	movs	r2, #33	@ 0x21
 8004cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cc6:	f7fc fe69 	bl	800199c <HAL_GetTick>
 8004cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	88fa      	ldrh	r2, [r7, #6]
 8004cd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	88fa      	ldrh	r2, [r7, #6]
 8004cd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ce0:	d108      	bne.n	8004cf4 <HAL_UART_Transmit+0x6c>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d104      	bne.n	8004cf4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	e003      	b.n	8004cfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cfc:	e02e      	b.n	8004d5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2200      	movs	r2, #0
 8004d06:	2180      	movs	r1, #128	@ 0x80
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f848 	bl	8004d9e <UART_WaitOnFlagUntilTimeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e03a      	b.n	8004d96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	3302      	adds	r3, #2
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	e007      	b.n	8004d4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	781a      	ldrb	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1cb      	bne.n	8004cfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2140      	movs	r1, #64	@ 0x40
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f814 	bl	8004d9e <UART_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e006      	b.n	8004d96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	e000      	b.n	8004d96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d94:	2302      	movs	r3, #2
  }
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3720      	adds	r7, #32
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b086      	sub	sp, #24
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	603b      	str	r3, [r7, #0]
 8004daa:	4613      	mov	r3, r2
 8004dac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dae:	e03b      	b.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004db6:	d037      	beq.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db8:	f7fc fdf0 	bl	800199c <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	6a3a      	ldr	r2, [r7, #32]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d302      	bcc.n	8004dce <UART_WaitOnFlagUntilTimeout+0x30>
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e03a      	b.n	8004e48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d023      	beq.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b80      	cmp	r3, #128	@ 0x80
 8004de4:	d020      	beq.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b40      	cmp	r3, #64	@ 0x40
 8004dea:	d01d      	beq.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d116      	bne.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	617b      	str	r3, [r7, #20]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f81d 	bl	8004e50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2208      	movs	r2, #8
 8004e1a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e00f      	b.n	8004e48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4013      	ands	r3, r2
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d0b4      	beq.n	8004db0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b095      	sub	sp, #84	@ 0x54
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	330c      	adds	r3, #12
 8004e76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e78:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e5      	bne.n	8004e58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3314      	adds	r3, #20
 8004e92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f023 0301 	bic.w	r3, r3, #1
 8004ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3314      	adds	r3, #20
 8004eaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e5      	bne.n	8004e8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d119      	bne.n	8004efc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f023 0310 	bic.w	r3, r3, #16
 8004ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ee8:	61ba      	str	r2, [r7, #24]
 8004eea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6979      	ldr	r1, [r7, #20]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e5      	bne.n	8004ec8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f0a:	bf00      	nop
 8004f0c:	3754      	adds	r7, #84	@ 0x54
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f1c:	b0c0      	sub	sp, #256	@ 0x100
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f34:	68d9      	ldr	r1, [r3, #12]
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	ea40 0301 	orr.w	r3, r0, r1
 8004f40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	431a      	orrs	r2, r3
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f70:	f021 010c 	bic.w	r1, r1, #12
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f7e:	430b      	orrs	r3, r1
 8004f80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f92:	6999      	ldr	r1, [r3, #24]
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	ea40 0301 	orr.w	r3, r0, r1
 8004f9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	4b8f      	ldr	r3, [pc, #572]	@ (80051e4 <UART_SetConfig+0x2cc>)
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d005      	beq.n	8004fb8 <UART_SetConfig+0xa0>
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4b8d      	ldr	r3, [pc, #564]	@ (80051e8 <UART_SetConfig+0x2d0>)
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d104      	bne.n	8004fc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fb8:	f7fe f8d4 	bl	8003164 <HAL_RCC_GetPCLK2Freq>
 8004fbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004fc0:	e003      	b.n	8004fca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fc2:	f7fe f8bb 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8004fc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fd4:	f040 810c 	bne.w	80051f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004fe2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004fe6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004fea:	4622      	mov	r2, r4
 8004fec:	462b      	mov	r3, r5
 8004fee:	1891      	adds	r1, r2, r2
 8004ff0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ff2:	415b      	adcs	r3, r3
 8004ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ff6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	eb12 0801 	adds.w	r8, r2, r1
 8005000:	4629      	mov	r1, r5
 8005002:	eb43 0901 	adc.w	r9, r3, r1
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005012:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005016:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800501a:	4690      	mov	r8, r2
 800501c:	4699      	mov	r9, r3
 800501e:	4623      	mov	r3, r4
 8005020:	eb18 0303 	adds.w	r3, r8, r3
 8005024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005028:	462b      	mov	r3, r5
 800502a:	eb49 0303 	adc.w	r3, r9, r3
 800502e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800503e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005042:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005046:	460b      	mov	r3, r1
 8005048:	18db      	adds	r3, r3, r3
 800504a:	653b      	str	r3, [r7, #80]	@ 0x50
 800504c:	4613      	mov	r3, r2
 800504e:	eb42 0303 	adc.w	r3, r2, r3
 8005052:	657b      	str	r3, [r7, #84]	@ 0x54
 8005054:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005058:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800505c:	f7fb fc5e 	bl	800091c <__aeabi_uldivmod>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4b61      	ldr	r3, [pc, #388]	@ (80051ec <UART_SetConfig+0x2d4>)
 8005066:	fba3 2302 	umull	r2, r3, r3, r2
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	011c      	lsls	r4, r3, #4
 800506e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005072:	2200      	movs	r2, #0
 8005074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005078:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800507c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005080:	4642      	mov	r2, r8
 8005082:	464b      	mov	r3, r9
 8005084:	1891      	adds	r1, r2, r2
 8005086:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005088:	415b      	adcs	r3, r3
 800508a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800508c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005090:	4641      	mov	r1, r8
 8005092:	eb12 0a01 	adds.w	sl, r2, r1
 8005096:	4649      	mov	r1, r9
 8005098:	eb43 0b01 	adc.w	fp, r3, r1
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050b0:	4692      	mov	sl, r2
 80050b2:	469b      	mov	fp, r3
 80050b4:	4643      	mov	r3, r8
 80050b6:	eb1a 0303 	adds.w	r3, sl, r3
 80050ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050be:	464b      	mov	r3, r9
 80050c0:	eb4b 0303 	adc.w	r3, fp, r3
 80050c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80050d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050dc:	460b      	mov	r3, r1
 80050de:	18db      	adds	r3, r3, r3
 80050e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80050e2:	4613      	mov	r3, r2
 80050e4:	eb42 0303 	adc.w	r3, r2, r3
 80050e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80050ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80050ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80050f2:	f7fb fc13 	bl	800091c <__aeabi_uldivmod>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4611      	mov	r1, r2
 80050fc:	4b3b      	ldr	r3, [pc, #236]	@ (80051ec <UART_SetConfig+0x2d4>)
 80050fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	2264      	movs	r2, #100	@ 0x64
 8005106:	fb02 f303 	mul.w	r3, r2, r3
 800510a:	1acb      	subs	r3, r1, r3
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005112:	4b36      	ldr	r3, [pc, #216]	@ (80051ec <UART_SetConfig+0x2d4>)
 8005114:	fba3 2302 	umull	r2, r3, r3, r2
 8005118:	095b      	lsrs	r3, r3, #5
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005120:	441c      	add	r4, r3
 8005122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005126:	2200      	movs	r2, #0
 8005128:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800512c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005130:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005134:	4642      	mov	r2, r8
 8005136:	464b      	mov	r3, r9
 8005138:	1891      	adds	r1, r2, r2
 800513a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800513c:	415b      	adcs	r3, r3
 800513e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005140:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005144:	4641      	mov	r1, r8
 8005146:	1851      	adds	r1, r2, r1
 8005148:	6339      	str	r1, [r7, #48]	@ 0x30
 800514a:	4649      	mov	r1, r9
 800514c:	414b      	adcs	r3, r1
 800514e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800515c:	4659      	mov	r1, fp
 800515e:	00cb      	lsls	r3, r1, #3
 8005160:	4651      	mov	r1, sl
 8005162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005166:	4651      	mov	r1, sl
 8005168:	00ca      	lsls	r2, r1, #3
 800516a:	4610      	mov	r0, r2
 800516c:	4619      	mov	r1, r3
 800516e:	4603      	mov	r3, r0
 8005170:	4642      	mov	r2, r8
 8005172:	189b      	adds	r3, r3, r2
 8005174:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005178:	464b      	mov	r3, r9
 800517a:	460a      	mov	r2, r1
 800517c:	eb42 0303 	adc.w	r3, r2, r3
 8005180:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005190:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005194:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005198:	460b      	mov	r3, r1
 800519a:	18db      	adds	r3, r3, r3
 800519c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800519e:	4613      	mov	r3, r2
 80051a0:	eb42 0303 	adc.w	r3, r2, r3
 80051a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80051ae:	f7fb fbb5 	bl	800091c <__aeabi_uldivmod>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4b0d      	ldr	r3, [pc, #52]	@ (80051ec <UART_SetConfig+0x2d4>)
 80051b8:	fba3 1302 	umull	r1, r3, r3, r2
 80051bc:	095b      	lsrs	r3, r3, #5
 80051be:	2164      	movs	r1, #100	@ 0x64
 80051c0:	fb01 f303 	mul.w	r3, r1, r3
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	3332      	adds	r3, #50	@ 0x32
 80051ca:	4a08      	ldr	r2, [pc, #32]	@ (80051ec <UART_SetConfig+0x2d4>)
 80051cc:	fba2 2303 	umull	r2, r3, r2, r3
 80051d0:	095b      	lsrs	r3, r3, #5
 80051d2:	f003 0207 	and.w	r2, r3, #7
 80051d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4422      	add	r2, r4
 80051de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051e0:	e106      	b.n	80053f0 <UART_SetConfig+0x4d8>
 80051e2:	bf00      	nop
 80051e4:	40011000 	.word	0x40011000
 80051e8:	40011400 	.word	0x40011400
 80051ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f4:	2200      	movs	r2, #0
 80051f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80051fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80051fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005202:	4642      	mov	r2, r8
 8005204:	464b      	mov	r3, r9
 8005206:	1891      	adds	r1, r2, r2
 8005208:	6239      	str	r1, [r7, #32]
 800520a:	415b      	adcs	r3, r3
 800520c:	627b      	str	r3, [r7, #36]	@ 0x24
 800520e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005212:	4641      	mov	r1, r8
 8005214:	1854      	adds	r4, r2, r1
 8005216:	4649      	mov	r1, r9
 8005218:	eb43 0501 	adc.w	r5, r3, r1
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	00eb      	lsls	r3, r5, #3
 8005226:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800522a:	00e2      	lsls	r2, r4, #3
 800522c:	4614      	mov	r4, r2
 800522e:	461d      	mov	r5, r3
 8005230:	4643      	mov	r3, r8
 8005232:	18e3      	adds	r3, r4, r3
 8005234:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005238:	464b      	mov	r3, r9
 800523a:	eb45 0303 	adc.w	r3, r5, r3
 800523e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800524e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800525e:	4629      	mov	r1, r5
 8005260:	008b      	lsls	r3, r1, #2
 8005262:	4621      	mov	r1, r4
 8005264:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005268:	4621      	mov	r1, r4
 800526a:	008a      	lsls	r2, r1, #2
 800526c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005270:	f7fb fb54 	bl	800091c <__aeabi_uldivmod>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4b60      	ldr	r3, [pc, #384]	@ (80053fc <UART_SetConfig+0x4e4>)
 800527a:	fba3 2302 	umull	r2, r3, r3, r2
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	011c      	lsls	r4, r3, #4
 8005282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005286:	2200      	movs	r2, #0
 8005288:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800528c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005290:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005294:	4642      	mov	r2, r8
 8005296:	464b      	mov	r3, r9
 8005298:	1891      	adds	r1, r2, r2
 800529a:	61b9      	str	r1, [r7, #24]
 800529c:	415b      	adcs	r3, r3
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052a4:	4641      	mov	r1, r8
 80052a6:	1851      	adds	r1, r2, r1
 80052a8:	6139      	str	r1, [r7, #16]
 80052aa:	4649      	mov	r1, r9
 80052ac:	414b      	adcs	r3, r1
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052bc:	4659      	mov	r1, fp
 80052be:	00cb      	lsls	r3, r1, #3
 80052c0:	4651      	mov	r1, sl
 80052c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052c6:	4651      	mov	r1, sl
 80052c8:	00ca      	lsls	r2, r1, #3
 80052ca:	4610      	mov	r0, r2
 80052cc:	4619      	mov	r1, r3
 80052ce:	4603      	mov	r3, r0
 80052d0:	4642      	mov	r2, r8
 80052d2:	189b      	adds	r3, r3, r2
 80052d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052d8:	464b      	mov	r3, r9
 80052da:	460a      	mov	r2, r1
 80052dc:	eb42 0303 	adc.w	r3, r2, r3
 80052e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80052fc:	4649      	mov	r1, r9
 80052fe:	008b      	lsls	r3, r1, #2
 8005300:	4641      	mov	r1, r8
 8005302:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005306:	4641      	mov	r1, r8
 8005308:	008a      	lsls	r2, r1, #2
 800530a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800530e:	f7fb fb05 	bl	800091c <__aeabi_uldivmod>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4611      	mov	r1, r2
 8005318:	4b38      	ldr	r3, [pc, #224]	@ (80053fc <UART_SetConfig+0x4e4>)
 800531a:	fba3 2301 	umull	r2, r3, r3, r1
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	2264      	movs	r2, #100	@ 0x64
 8005322:	fb02 f303 	mul.w	r3, r2, r3
 8005326:	1acb      	subs	r3, r1, r3
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	3332      	adds	r3, #50	@ 0x32
 800532c:	4a33      	ldr	r2, [pc, #204]	@ (80053fc <UART_SetConfig+0x4e4>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005338:	441c      	add	r4, r3
 800533a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800533e:	2200      	movs	r2, #0
 8005340:	673b      	str	r3, [r7, #112]	@ 0x70
 8005342:	677a      	str	r2, [r7, #116]	@ 0x74
 8005344:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005348:	4642      	mov	r2, r8
 800534a:	464b      	mov	r3, r9
 800534c:	1891      	adds	r1, r2, r2
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	415b      	adcs	r3, r3
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005358:	4641      	mov	r1, r8
 800535a:	1851      	adds	r1, r2, r1
 800535c:	6039      	str	r1, [r7, #0]
 800535e:	4649      	mov	r1, r9
 8005360:	414b      	adcs	r3, r1
 8005362:	607b      	str	r3, [r7, #4]
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005370:	4659      	mov	r1, fp
 8005372:	00cb      	lsls	r3, r1, #3
 8005374:	4651      	mov	r1, sl
 8005376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800537a:	4651      	mov	r1, sl
 800537c:	00ca      	lsls	r2, r1, #3
 800537e:	4610      	mov	r0, r2
 8005380:	4619      	mov	r1, r3
 8005382:	4603      	mov	r3, r0
 8005384:	4642      	mov	r2, r8
 8005386:	189b      	adds	r3, r3, r2
 8005388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800538a:	464b      	mov	r3, r9
 800538c:	460a      	mov	r2, r1
 800538e:	eb42 0303 	adc.w	r3, r2, r3
 8005392:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	663b      	str	r3, [r7, #96]	@ 0x60
 800539e:	667a      	str	r2, [r7, #100]	@ 0x64
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	f04f 0300 	mov.w	r3, #0
 80053a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80053ac:	4649      	mov	r1, r9
 80053ae:	008b      	lsls	r3, r1, #2
 80053b0:	4641      	mov	r1, r8
 80053b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053b6:	4641      	mov	r1, r8
 80053b8:	008a      	lsls	r2, r1, #2
 80053ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80053be:	f7fb faad 	bl	800091c <__aeabi_uldivmod>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4b0d      	ldr	r3, [pc, #52]	@ (80053fc <UART_SetConfig+0x4e4>)
 80053c8:	fba3 1302 	umull	r1, r3, r3, r2
 80053cc:	095b      	lsrs	r3, r3, #5
 80053ce:	2164      	movs	r1, #100	@ 0x64
 80053d0:	fb01 f303 	mul.w	r3, r1, r3
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	3332      	adds	r3, #50	@ 0x32
 80053da:	4a08      	ldr	r2, [pc, #32]	@ (80053fc <UART_SetConfig+0x4e4>)
 80053dc:	fba2 2303 	umull	r2, r3, r2, r3
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	f003 020f 	and.w	r2, r3, #15
 80053e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4422      	add	r2, r4
 80053ee:	609a      	str	r2, [r3, #8]
}
 80053f0:	bf00      	nop
 80053f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80053f6:	46bd      	mov	sp, r7
 80053f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053fc:	51eb851f 	.word	0x51eb851f

08005400 <siprintf>:
 8005400:	b40e      	push	{r1, r2, r3}
 8005402:	b500      	push	{lr}
 8005404:	b09c      	sub	sp, #112	@ 0x70
 8005406:	ab1d      	add	r3, sp, #116	@ 0x74
 8005408:	9002      	str	r0, [sp, #8]
 800540a:	9006      	str	r0, [sp, #24]
 800540c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005410:	4809      	ldr	r0, [pc, #36]	@ (8005438 <siprintf+0x38>)
 8005412:	9107      	str	r1, [sp, #28]
 8005414:	9104      	str	r1, [sp, #16]
 8005416:	4909      	ldr	r1, [pc, #36]	@ (800543c <siprintf+0x3c>)
 8005418:	f853 2b04 	ldr.w	r2, [r3], #4
 800541c:	9105      	str	r1, [sp, #20]
 800541e:	6800      	ldr	r0, [r0, #0]
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	a902      	add	r1, sp, #8
 8005424:	f000 f994 	bl	8005750 <_svfiprintf_r>
 8005428:	9b02      	ldr	r3, [sp, #8]
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	b01c      	add	sp, #112	@ 0x70
 8005430:	f85d eb04 	ldr.w	lr, [sp], #4
 8005434:	b003      	add	sp, #12
 8005436:	4770      	bx	lr
 8005438:	2000000c 	.word	0x2000000c
 800543c:	ffff0208 	.word	0xffff0208

08005440 <memset>:
 8005440:	4402      	add	r2, r0
 8005442:	4603      	mov	r3, r0
 8005444:	4293      	cmp	r3, r2
 8005446:	d100      	bne.n	800544a <memset+0xa>
 8005448:	4770      	bx	lr
 800544a:	f803 1b01 	strb.w	r1, [r3], #1
 800544e:	e7f9      	b.n	8005444 <memset+0x4>

08005450 <__errno>:
 8005450:	4b01      	ldr	r3, [pc, #4]	@ (8005458 <__errno+0x8>)
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	2000000c 	.word	0x2000000c

0800545c <__libc_init_array>:
 800545c:	b570      	push	{r4, r5, r6, lr}
 800545e:	4d0d      	ldr	r5, [pc, #52]	@ (8005494 <__libc_init_array+0x38>)
 8005460:	4c0d      	ldr	r4, [pc, #52]	@ (8005498 <__libc_init_array+0x3c>)
 8005462:	1b64      	subs	r4, r4, r5
 8005464:	10a4      	asrs	r4, r4, #2
 8005466:	2600      	movs	r6, #0
 8005468:	42a6      	cmp	r6, r4
 800546a:	d109      	bne.n	8005480 <__libc_init_array+0x24>
 800546c:	4d0b      	ldr	r5, [pc, #44]	@ (800549c <__libc_init_array+0x40>)
 800546e:	4c0c      	ldr	r4, [pc, #48]	@ (80054a0 <__libc_init_array+0x44>)
 8005470:	f000 fc66 	bl	8005d40 <_init>
 8005474:	1b64      	subs	r4, r4, r5
 8005476:	10a4      	asrs	r4, r4, #2
 8005478:	2600      	movs	r6, #0
 800547a:	42a6      	cmp	r6, r4
 800547c:	d105      	bne.n	800548a <__libc_init_array+0x2e>
 800547e:	bd70      	pop	{r4, r5, r6, pc}
 8005480:	f855 3b04 	ldr.w	r3, [r5], #4
 8005484:	4798      	blx	r3
 8005486:	3601      	adds	r6, #1
 8005488:	e7ee      	b.n	8005468 <__libc_init_array+0xc>
 800548a:	f855 3b04 	ldr.w	r3, [r5], #4
 800548e:	4798      	blx	r3
 8005490:	3601      	adds	r6, #1
 8005492:	e7f2      	b.n	800547a <__libc_init_array+0x1e>
 8005494:	08005dd4 	.word	0x08005dd4
 8005498:	08005dd4 	.word	0x08005dd4
 800549c:	08005dd4 	.word	0x08005dd4
 80054a0:	08005ddc 	.word	0x08005ddc

080054a4 <__retarget_lock_acquire_recursive>:
 80054a4:	4770      	bx	lr

080054a6 <__retarget_lock_release_recursive>:
 80054a6:	4770      	bx	lr

080054a8 <_free_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	4605      	mov	r5, r0
 80054ac:	2900      	cmp	r1, #0
 80054ae:	d041      	beq.n	8005534 <_free_r+0x8c>
 80054b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054b4:	1f0c      	subs	r4, r1, #4
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bfb8      	it	lt
 80054ba:	18e4      	addlt	r4, r4, r3
 80054bc:	f000 f8e0 	bl	8005680 <__malloc_lock>
 80054c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005538 <_free_r+0x90>)
 80054c2:	6813      	ldr	r3, [r2, #0]
 80054c4:	b933      	cbnz	r3, 80054d4 <_free_r+0x2c>
 80054c6:	6063      	str	r3, [r4, #4]
 80054c8:	6014      	str	r4, [r2, #0]
 80054ca:	4628      	mov	r0, r5
 80054cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054d0:	f000 b8dc 	b.w	800568c <__malloc_unlock>
 80054d4:	42a3      	cmp	r3, r4
 80054d6:	d908      	bls.n	80054ea <_free_r+0x42>
 80054d8:	6820      	ldr	r0, [r4, #0]
 80054da:	1821      	adds	r1, r4, r0
 80054dc:	428b      	cmp	r3, r1
 80054de:	bf01      	itttt	eq
 80054e0:	6819      	ldreq	r1, [r3, #0]
 80054e2:	685b      	ldreq	r3, [r3, #4]
 80054e4:	1809      	addeq	r1, r1, r0
 80054e6:	6021      	streq	r1, [r4, #0]
 80054e8:	e7ed      	b.n	80054c6 <_free_r+0x1e>
 80054ea:	461a      	mov	r2, r3
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	b10b      	cbz	r3, 80054f4 <_free_r+0x4c>
 80054f0:	42a3      	cmp	r3, r4
 80054f2:	d9fa      	bls.n	80054ea <_free_r+0x42>
 80054f4:	6811      	ldr	r1, [r2, #0]
 80054f6:	1850      	adds	r0, r2, r1
 80054f8:	42a0      	cmp	r0, r4
 80054fa:	d10b      	bne.n	8005514 <_free_r+0x6c>
 80054fc:	6820      	ldr	r0, [r4, #0]
 80054fe:	4401      	add	r1, r0
 8005500:	1850      	adds	r0, r2, r1
 8005502:	4283      	cmp	r3, r0
 8005504:	6011      	str	r1, [r2, #0]
 8005506:	d1e0      	bne.n	80054ca <_free_r+0x22>
 8005508:	6818      	ldr	r0, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	6053      	str	r3, [r2, #4]
 800550e:	4408      	add	r0, r1
 8005510:	6010      	str	r0, [r2, #0]
 8005512:	e7da      	b.n	80054ca <_free_r+0x22>
 8005514:	d902      	bls.n	800551c <_free_r+0x74>
 8005516:	230c      	movs	r3, #12
 8005518:	602b      	str	r3, [r5, #0]
 800551a:	e7d6      	b.n	80054ca <_free_r+0x22>
 800551c:	6820      	ldr	r0, [r4, #0]
 800551e:	1821      	adds	r1, r4, r0
 8005520:	428b      	cmp	r3, r1
 8005522:	bf04      	itt	eq
 8005524:	6819      	ldreq	r1, [r3, #0]
 8005526:	685b      	ldreq	r3, [r3, #4]
 8005528:	6063      	str	r3, [r4, #4]
 800552a:	bf04      	itt	eq
 800552c:	1809      	addeq	r1, r1, r0
 800552e:	6021      	streq	r1, [r4, #0]
 8005530:	6054      	str	r4, [r2, #4]
 8005532:	e7ca      	b.n	80054ca <_free_r+0x22>
 8005534:	bd38      	pop	{r3, r4, r5, pc}
 8005536:	bf00      	nop
 8005538:	200002b4 	.word	0x200002b4

0800553c <sbrk_aligned>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	4e0f      	ldr	r6, [pc, #60]	@ (800557c <sbrk_aligned+0x40>)
 8005540:	460c      	mov	r4, r1
 8005542:	6831      	ldr	r1, [r6, #0]
 8005544:	4605      	mov	r5, r0
 8005546:	b911      	cbnz	r1, 800554e <sbrk_aligned+0x12>
 8005548:	f000 fba6 	bl	8005c98 <_sbrk_r>
 800554c:	6030      	str	r0, [r6, #0]
 800554e:	4621      	mov	r1, r4
 8005550:	4628      	mov	r0, r5
 8005552:	f000 fba1 	bl	8005c98 <_sbrk_r>
 8005556:	1c43      	adds	r3, r0, #1
 8005558:	d103      	bne.n	8005562 <sbrk_aligned+0x26>
 800555a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800555e:	4620      	mov	r0, r4
 8005560:	bd70      	pop	{r4, r5, r6, pc}
 8005562:	1cc4      	adds	r4, r0, #3
 8005564:	f024 0403 	bic.w	r4, r4, #3
 8005568:	42a0      	cmp	r0, r4
 800556a:	d0f8      	beq.n	800555e <sbrk_aligned+0x22>
 800556c:	1a21      	subs	r1, r4, r0
 800556e:	4628      	mov	r0, r5
 8005570:	f000 fb92 	bl	8005c98 <_sbrk_r>
 8005574:	3001      	adds	r0, #1
 8005576:	d1f2      	bne.n	800555e <sbrk_aligned+0x22>
 8005578:	e7ef      	b.n	800555a <sbrk_aligned+0x1e>
 800557a:	bf00      	nop
 800557c:	200002b0 	.word	0x200002b0

08005580 <_malloc_r>:
 8005580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005584:	1ccd      	adds	r5, r1, #3
 8005586:	f025 0503 	bic.w	r5, r5, #3
 800558a:	3508      	adds	r5, #8
 800558c:	2d0c      	cmp	r5, #12
 800558e:	bf38      	it	cc
 8005590:	250c      	movcc	r5, #12
 8005592:	2d00      	cmp	r5, #0
 8005594:	4606      	mov	r6, r0
 8005596:	db01      	blt.n	800559c <_malloc_r+0x1c>
 8005598:	42a9      	cmp	r1, r5
 800559a:	d904      	bls.n	80055a6 <_malloc_r+0x26>
 800559c:	230c      	movs	r3, #12
 800559e:	6033      	str	r3, [r6, #0]
 80055a0:	2000      	movs	r0, #0
 80055a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800567c <_malloc_r+0xfc>
 80055aa:	f000 f869 	bl	8005680 <__malloc_lock>
 80055ae:	f8d8 3000 	ldr.w	r3, [r8]
 80055b2:	461c      	mov	r4, r3
 80055b4:	bb44      	cbnz	r4, 8005608 <_malloc_r+0x88>
 80055b6:	4629      	mov	r1, r5
 80055b8:	4630      	mov	r0, r6
 80055ba:	f7ff ffbf 	bl	800553c <sbrk_aligned>
 80055be:	1c43      	adds	r3, r0, #1
 80055c0:	4604      	mov	r4, r0
 80055c2:	d158      	bne.n	8005676 <_malloc_r+0xf6>
 80055c4:	f8d8 4000 	ldr.w	r4, [r8]
 80055c8:	4627      	mov	r7, r4
 80055ca:	2f00      	cmp	r7, #0
 80055cc:	d143      	bne.n	8005656 <_malloc_r+0xd6>
 80055ce:	2c00      	cmp	r4, #0
 80055d0:	d04b      	beq.n	800566a <_malloc_r+0xea>
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	4639      	mov	r1, r7
 80055d6:	4630      	mov	r0, r6
 80055d8:	eb04 0903 	add.w	r9, r4, r3
 80055dc:	f000 fb5c 	bl	8005c98 <_sbrk_r>
 80055e0:	4581      	cmp	r9, r0
 80055e2:	d142      	bne.n	800566a <_malloc_r+0xea>
 80055e4:	6821      	ldr	r1, [r4, #0]
 80055e6:	1a6d      	subs	r5, r5, r1
 80055e8:	4629      	mov	r1, r5
 80055ea:	4630      	mov	r0, r6
 80055ec:	f7ff ffa6 	bl	800553c <sbrk_aligned>
 80055f0:	3001      	adds	r0, #1
 80055f2:	d03a      	beq.n	800566a <_malloc_r+0xea>
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	442b      	add	r3, r5
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	f8d8 3000 	ldr.w	r3, [r8]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	bb62      	cbnz	r2, 800565c <_malloc_r+0xdc>
 8005602:	f8c8 7000 	str.w	r7, [r8]
 8005606:	e00f      	b.n	8005628 <_malloc_r+0xa8>
 8005608:	6822      	ldr	r2, [r4, #0]
 800560a:	1b52      	subs	r2, r2, r5
 800560c:	d420      	bmi.n	8005650 <_malloc_r+0xd0>
 800560e:	2a0b      	cmp	r2, #11
 8005610:	d917      	bls.n	8005642 <_malloc_r+0xc2>
 8005612:	1961      	adds	r1, r4, r5
 8005614:	42a3      	cmp	r3, r4
 8005616:	6025      	str	r5, [r4, #0]
 8005618:	bf18      	it	ne
 800561a:	6059      	strne	r1, [r3, #4]
 800561c:	6863      	ldr	r3, [r4, #4]
 800561e:	bf08      	it	eq
 8005620:	f8c8 1000 	streq.w	r1, [r8]
 8005624:	5162      	str	r2, [r4, r5]
 8005626:	604b      	str	r3, [r1, #4]
 8005628:	4630      	mov	r0, r6
 800562a:	f000 f82f 	bl	800568c <__malloc_unlock>
 800562e:	f104 000b 	add.w	r0, r4, #11
 8005632:	1d23      	adds	r3, r4, #4
 8005634:	f020 0007 	bic.w	r0, r0, #7
 8005638:	1ac2      	subs	r2, r0, r3
 800563a:	bf1c      	itt	ne
 800563c:	1a1b      	subne	r3, r3, r0
 800563e:	50a3      	strne	r3, [r4, r2]
 8005640:	e7af      	b.n	80055a2 <_malloc_r+0x22>
 8005642:	6862      	ldr	r2, [r4, #4]
 8005644:	42a3      	cmp	r3, r4
 8005646:	bf0c      	ite	eq
 8005648:	f8c8 2000 	streq.w	r2, [r8]
 800564c:	605a      	strne	r2, [r3, #4]
 800564e:	e7eb      	b.n	8005628 <_malloc_r+0xa8>
 8005650:	4623      	mov	r3, r4
 8005652:	6864      	ldr	r4, [r4, #4]
 8005654:	e7ae      	b.n	80055b4 <_malloc_r+0x34>
 8005656:	463c      	mov	r4, r7
 8005658:	687f      	ldr	r7, [r7, #4]
 800565a:	e7b6      	b.n	80055ca <_malloc_r+0x4a>
 800565c:	461a      	mov	r2, r3
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	42a3      	cmp	r3, r4
 8005662:	d1fb      	bne.n	800565c <_malloc_r+0xdc>
 8005664:	2300      	movs	r3, #0
 8005666:	6053      	str	r3, [r2, #4]
 8005668:	e7de      	b.n	8005628 <_malloc_r+0xa8>
 800566a:	230c      	movs	r3, #12
 800566c:	6033      	str	r3, [r6, #0]
 800566e:	4630      	mov	r0, r6
 8005670:	f000 f80c 	bl	800568c <__malloc_unlock>
 8005674:	e794      	b.n	80055a0 <_malloc_r+0x20>
 8005676:	6005      	str	r5, [r0, #0]
 8005678:	e7d6      	b.n	8005628 <_malloc_r+0xa8>
 800567a:	bf00      	nop
 800567c:	200002b4 	.word	0x200002b4

08005680 <__malloc_lock>:
 8005680:	4801      	ldr	r0, [pc, #4]	@ (8005688 <__malloc_lock+0x8>)
 8005682:	f7ff bf0f 	b.w	80054a4 <__retarget_lock_acquire_recursive>
 8005686:	bf00      	nop
 8005688:	200002ac 	.word	0x200002ac

0800568c <__malloc_unlock>:
 800568c:	4801      	ldr	r0, [pc, #4]	@ (8005694 <__malloc_unlock+0x8>)
 800568e:	f7ff bf0a 	b.w	80054a6 <__retarget_lock_release_recursive>
 8005692:	bf00      	nop
 8005694:	200002ac 	.word	0x200002ac

08005698 <__ssputs_r>:
 8005698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800569c:	688e      	ldr	r6, [r1, #8]
 800569e:	461f      	mov	r7, r3
 80056a0:	42be      	cmp	r6, r7
 80056a2:	680b      	ldr	r3, [r1, #0]
 80056a4:	4682      	mov	sl, r0
 80056a6:	460c      	mov	r4, r1
 80056a8:	4690      	mov	r8, r2
 80056aa:	d82d      	bhi.n	8005708 <__ssputs_r+0x70>
 80056ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80056b4:	d026      	beq.n	8005704 <__ssputs_r+0x6c>
 80056b6:	6965      	ldr	r5, [r4, #20]
 80056b8:	6909      	ldr	r1, [r1, #16]
 80056ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056be:	eba3 0901 	sub.w	r9, r3, r1
 80056c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056c6:	1c7b      	adds	r3, r7, #1
 80056c8:	444b      	add	r3, r9
 80056ca:	106d      	asrs	r5, r5, #1
 80056cc:	429d      	cmp	r5, r3
 80056ce:	bf38      	it	cc
 80056d0:	461d      	movcc	r5, r3
 80056d2:	0553      	lsls	r3, r2, #21
 80056d4:	d527      	bpl.n	8005726 <__ssputs_r+0x8e>
 80056d6:	4629      	mov	r1, r5
 80056d8:	f7ff ff52 	bl	8005580 <_malloc_r>
 80056dc:	4606      	mov	r6, r0
 80056de:	b360      	cbz	r0, 800573a <__ssputs_r+0xa2>
 80056e0:	6921      	ldr	r1, [r4, #16]
 80056e2:	464a      	mov	r2, r9
 80056e4:	f000 fae8 	bl	8005cb8 <memcpy>
 80056e8:	89a3      	ldrh	r3, [r4, #12]
 80056ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80056ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056f2:	81a3      	strh	r3, [r4, #12]
 80056f4:	6126      	str	r6, [r4, #16]
 80056f6:	6165      	str	r5, [r4, #20]
 80056f8:	444e      	add	r6, r9
 80056fa:	eba5 0509 	sub.w	r5, r5, r9
 80056fe:	6026      	str	r6, [r4, #0]
 8005700:	60a5      	str	r5, [r4, #8]
 8005702:	463e      	mov	r6, r7
 8005704:	42be      	cmp	r6, r7
 8005706:	d900      	bls.n	800570a <__ssputs_r+0x72>
 8005708:	463e      	mov	r6, r7
 800570a:	6820      	ldr	r0, [r4, #0]
 800570c:	4632      	mov	r2, r6
 800570e:	4641      	mov	r1, r8
 8005710:	f000 faa8 	bl	8005c64 <memmove>
 8005714:	68a3      	ldr	r3, [r4, #8]
 8005716:	1b9b      	subs	r3, r3, r6
 8005718:	60a3      	str	r3, [r4, #8]
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	4433      	add	r3, r6
 800571e:	6023      	str	r3, [r4, #0]
 8005720:	2000      	movs	r0, #0
 8005722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005726:	462a      	mov	r2, r5
 8005728:	f000 fad4 	bl	8005cd4 <_realloc_r>
 800572c:	4606      	mov	r6, r0
 800572e:	2800      	cmp	r0, #0
 8005730:	d1e0      	bne.n	80056f4 <__ssputs_r+0x5c>
 8005732:	6921      	ldr	r1, [r4, #16]
 8005734:	4650      	mov	r0, sl
 8005736:	f7ff feb7 	bl	80054a8 <_free_r>
 800573a:	230c      	movs	r3, #12
 800573c:	f8ca 3000 	str.w	r3, [sl]
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005746:	81a3      	strh	r3, [r4, #12]
 8005748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800574c:	e7e9      	b.n	8005722 <__ssputs_r+0x8a>
	...

08005750 <_svfiprintf_r>:
 8005750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005754:	4698      	mov	r8, r3
 8005756:	898b      	ldrh	r3, [r1, #12]
 8005758:	061b      	lsls	r3, r3, #24
 800575a:	b09d      	sub	sp, #116	@ 0x74
 800575c:	4607      	mov	r7, r0
 800575e:	460d      	mov	r5, r1
 8005760:	4614      	mov	r4, r2
 8005762:	d510      	bpl.n	8005786 <_svfiprintf_r+0x36>
 8005764:	690b      	ldr	r3, [r1, #16]
 8005766:	b973      	cbnz	r3, 8005786 <_svfiprintf_r+0x36>
 8005768:	2140      	movs	r1, #64	@ 0x40
 800576a:	f7ff ff09 	bl	8005580 <_malloc_r>
 800576e:	6028      	str	r0, [r5, #0]
 8005770:	6128      	str	r0, [r5, #16]
 8005772:	b930      	cbnz	r0, 8005782 <_svfiprintf_r+0x32>
 8005774:	230c      	movs	r3, #12
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800577c:	b01d      	add	sp, #116	@ 0x74
 800577e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005782:	2340      	movs	r3, #64	@ 0x40
 8005784:	616b      	str	r3, [r5, #20]
 8005786:	2300      	movs	r3, #0
 8005788:	9309      	str	r3, [sp, #36]	@ 0x24
 800578a:	2320      	movs	r3, #32
 800578c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005790:	f8cd 800c 	str.w	r8, [sp, #12]
 8005794:	2330      	movs	r3, #48	@ 0x30
 8005796:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005934 <_svfiprintf_r+0x1e4>
 800579a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800579e:	f04f 0901 	mov.w	r9, #1
 80057a2:	4623      	mov	r3, r4
 80057a4:	469a      	mov	sl, r3
 80057a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057aa:	b10a      	cbz	r2, 80057b0 <_svfiprintf_r+0x60>
 80057ac:	2a25      	cmp	r2, #37	@ 0x25
 80057ae:	d1f9      	bne.n	80057a4 <_svfiprintf_r+0x54>
 80057b0:	ebba 0b04 	subs.w	fp, sl, r4
 80057b4:	d00b      	beq.n	80057ce <_svfiprintf_r+0x7e>
 80057b6:	465b      	mov	r3, fp
 80057b8:	4622      	mov	r2, r4
 80057ba:	4629      	mov	r1, r5
 80057bc:	4638      	mov	r0, r7
 80057be:	f7ff ff6b 	bl	8005698 <__ssputs_r>
 80057c2:	3001      	adds	r0, #1
 80057c4:	f000 80a7 	beq.w	8005916 <_svfiprintf_r+0x1c6>
 80057c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057ca:	445a      	add	r2, fp
 80057cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80057ce:	f89a 3000 	ldrb.w	r3, [sl]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 809f 	beq.w	8005916 <_svfiprintf_r+0x1c6>
 80057d8:	2300      	movs	r3, #0
 80057da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057e2:	f10a 0a01 	add.w	sl, sl, #1
 80057e6:	9304      	str	r3, [sp, #16]
 80057e8:	9307      	str	r3, [sp, #28]
 80057ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80057f0:	4654      	mov	r4, sl
 80057f2:	2205      	movs	r2, #5
 80057f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057f8:	484e      	ldr	r0, [pc, #312]	@ (8005934 <_svfiprintf_r+0x1e4>)
 80057fa:	f7fa fd09 	bl	8000210 <memchr>
 80057fe:	9a04      	ldr	r2, [sp, #16]
 8005800:	b9d8      	cbnz	r0, 800583a <_svfiprintf_r+0xea>
 8005802:	06d0      	lsls	r0, r2, #27
 8005804:	bf44      	itt	mi
 8005806:	2320      	movmi	r3, #32
 8005808:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800580c:	0711      	lsls	r1, r2, #28
 800580e:	bf44      	itt	mi
 8005810:	232b      	movmi	r3, #43	@ 0x2b
 8005812:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005816:	f89a 3000 	ldrb.w	r3, [sl]
 800581a:	2b2a      	cmp	r3, #42	@ 0x2a
 800581c:	d015      	beq.n	800584a <_svfiprintf_r+0xfa>
 800581e:	9a07      	ldr	r2, [sp, #28]
 8005820:	4654      	mov	r4, sl
 8005822:	2000      	movs	r0, #0
 8005824:	f04f 0c0a 	mov.w	ip, #10
 8005828:	4621      	mov	r1, r4
 800582a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800582e:	3b30      	subs	r3, #48	@ 0x30
 8005830:	2b09      	cmp	r3, #9
 8005832:	d94b      	bls.n	80058cc <_svfiprintf_r+0x17c>
 8005834:	b1b0      	cbz	r0, 8005864 <_svfiprintf_r+0x114>
 8005836:	9207      	str	r2, [sp, #28]
 8005838:	e014      	b.n	8005864 <_svfiprintf_r+0x114>
 800583a:	eba0 0308 	sub.w	r3, r0, r8
 800583e:	fa09 f303 	lsl.w	r3, r9, r3
 8005842:	4313      	orrs	r3, r2
 8005844:	9304      	str	r3, [sp, #16]
 8005846:	46a2      	mov	sl, r4
 8005848:	e7d2      	b.n	80057f0 <_svfiprintf_r+0xa0>
 800584a:	9b03      	ldr	r3, [sp, #12]
 800584c:	1d19      	adds	r1, r3, #4
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	9103      	str	r1, [sp, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	bfbb      	ittet	lt
 8005856:	425b      	neglt	r3, r3
 8005858:	f042 0202 	orrlt.w	r2, r2, #2
 800585c:	9307      	strge	r3, [sp, #28]
 800585e:	9307      	strlt	r3, [sp, #28]
 8005860:	bfb8      	it	lt
 8005862:	9204      	strlt	r2, [sp, #16]
 8005864:	7823      	ldrb	r3, [r4, #0]
 8005866:	2b2e      	cmp	r3, #46	@ 0x2e
 8005868:	d10a      	bne.n	8005880 <_svfiprintf_r+0x130>
 800586a:	7863      	ldrb	r3, [r4, #1]
 800586c:	2b2a      	cmp	r3, #42	@ 0x2a
 800586e:	d132      	bne.n	80058d6 <_svfiprintf_r+0x186>
 8005870:	9b03      	ldr	r3, [sp, #12]
 8005872:	1d1a      	adds	r2, r3, #4
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	9203      	str	r2, [sp, #12]
 8005878:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800587c:	3402      	adds	r4, #2
 800587e:	9305      	str	r3, [sp, #20]
 8005880:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005944 <_svfiprintf_r+0x1f4>
 8005884:	7821      	ldrb	r1, [r4, #0]
 8005886:	2203      	movs	r2, #3
 8005888:	4650      	mov	r0, sl
 800588a:	f7fa fcc1 	bl	8000210 <memchr>
 800588e:	b138      	cbz	r0, 80058a0 <_svfiprintf_r+0x150>
 8005890:	9b04      	ldr	r3, [sp, #16]
 8005892:	eba0 000a 	sub.w	r0, r0, sl
 8005896:	2240      	movs	r2, #64	@ 0x40
 8005898:	4082      	lsls	r2, r0
 800589a:	4313      	orrs	r3, r2
 800589c:	3401      	adds	r4, #1
 800589e:	9304      	str	r3, [sp, #16]
 80058a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a4:	4824      	ldr	r0, [pc, #144]	@ (8005938 <_svfiprintf_r+0x1e8>)
 80058a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058aa:	2206      	movs	r2, #6
 80058ac:	f7fa fcb0 	bl	8000210 <memchr>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d036      	beq.n	8005922 <_svfiprintf_r+0x1d2>
 80058b4:	4b21      	ldr	r3, [pc, #132]	@ (800593c <_svfiprintf_r+0x1ec>)
 80058b6:	bb1b      	cbnz	r3, 8005900 <_svfiprintf_r+0x1b0>
 80058b8:	9b03      	ldr	r3, [sp, #12]
 80058ba:	3307      	adds	r3, #7
 80058bc:	f023 0307 	bic.w	r3, r3, #7
 80058c0:	3308      	adds	r3, #8
 80058c2:	9303      	str	r3, [sp, #12]
 80058c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058c6:	4433      	add	r3, r6
 80058c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80058ca:	e76a      	b.n	80057a2 <_svfiprintf_r+0x52>
 80058cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80058d0:	460c      	mov	r4, r1
 80058d2:	2001      	movs	r0, #1
 80058d4:	e7a8      	b.n	8005828 <_svfiprintf_r+0xd8>
 80058d6:	2300      	movs	r3, #0
 80058d8:	3401      	adds	r4, #1
 80058da:	9305      	str	r3, [sp, #20]
 80058dc:	4619      	mov	r1, r3
 80058de:	f04f 0c0a 	mov.w	ip, #10
 80058e2:	4620      	mov	r0, r4
 80058e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058e8:	3a30      	subs	r2, #48	@ 0x30
 80058ea:	2a09      	cmp	r2, #9
 80058ec:	d903      	bls.n	80058f6 <_svfiprintf_r+0x1a6>
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0c6      	beq.n	8005880 <_svfiprintf_r+0x130>
 80058f2:	9105      	str	r1, [sp, #20]
 80058f4:	e7c4      	b.n	8005880 <_svfiprintf_r+0x130>
 80058f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80058fa:	4604      	mov	r4, r0
 80058fc:	2301      	movs	r3, #1
 80058fe:	e7f0      	b.n	80058e2 <_svfiprintf_r+0x192>
 8005900:	ab03      	add	r3, sp, #12
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	462a      	mov	r2, r5
 8005906:	4b0e      	ldr	r3, [pc, #56]	@ (8005940 <_svfiprintf_r+0x1f0>)
 8005908:	a904      	add	r1, sp, #16
 800590a:	4638      	mov	r0, r7
 800590c:	f3af 8000 	nop.w
 8005910:	1c42      	adds	r2, r0, #1
 8005912:	4606      	mov	r6, r0
 8005914:	d1d6      	bne.n	80058c4 <_svfiprintf_r+0x174>
 8005916:	89ab      	ldrh	r3, [r5, #12]
 8005918:	065b      	lsls	r3, r3, #25
 800591a:	f53f af2d 	bmi.w	8005778 <_svfiprintf_r+0x28>
 800591e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005920:	e72c      	b.n	800577c <_svfiprintf_r+0x2c>
 8005922:	ab03      	add	r3, sp, #12
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	462a      	mov	r2, r5
 8005928:	4b05      	ldr	r3, [pc, #20]	@ (8005940 <_svfiprintf_r+0x1f0>)
 800592a:	a904      	add	r1, sp, #16
 800592c:	4638      	mov	r0, r7
 800592e:	f000 f879 	bl	8005a24 <_printf_i>
 8005932:	e7ed      	b.n	8005910 <_svfiprintf_r+0x1c0>
 8005934:	08005d98 	.word	0x08005d98
 8005938:	08005da2 	.word	0x08005da2
 800593c:	00000000 	.word	0x00000000
 8005940:	08005699 	.word	0x08005699
 8005944:	08005d9e 	.word	0x08005d9e

08005948 <_printf_common>:
 8005948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800594c:	4616      	mov	r6, r2
 800594e:	4698      	mov	r8, r3
 8005950:	688a      	ldr	r2, [r1, #8]
 8005952:	690b      	ldr	r3, [r1, #16]
 8005954:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005958:	4293      	cmp	r3, r2
 800595a:	bfb8      	it	lt
 800595c:	4613      	movlt	r3, r2
 800595e:	6033      	str	r3, [r6, #0]
 8005960:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005964:	4607      	mov	r7, r0
 8005966:	460c      	mov	r4, r1
 8005968:	b10a      	cbz	r2, 800596e <_printf_common+0x26>
 800596a:	3301      	adds	r3, #1
 800596c:	6033      	str	r3, [r6, #0]
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	0699      	lsls	r1, r3, #26
 8005972:	bf42      	ittt	mi
 8005974:	6833      	ldrmi	r3, [r6, #0]
 8005976:	3302      	addmi	r3, #2
 8005978:	6033      	strmi	r3, [r6, #0]
 800597a:	6825      	ldr	r5, [r4, #0]
 800597c:	f015 0506 	ands.w	r5, r5, #6
 8005980:	d106      	bne.n	8005990 <_printf_common+0x48>
 8005982:	f104 0a19 	add.w	sl, r4, #25
 8005986:	68e3      	ldr	r3, [r4, #12]
 8005988:	6832      	ldr	r2, [r6, #0]
 800598a:	1a9b      	subs	r3, r3, r2
 800598c:	42ab      	cmp	r3, r5
 800598e:	dc26      	bgt.n	80059de <_printf_common+0x96>
 8005990:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005994:	6822      	ldr	r2, [r4, #0]
 8005996:	3b00      	subs	r3, #0
 8005998:	bf18      	it	ne
 800599a:	2301      	movne	r3, #1
 800599c:	0692      	lsls	r2, r2, #26
 800599e:	d42b      	bmi.n	80059f8 <_printf_common+0xb0>
 80059a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059a4:	4641      	mov	r1, r8
 80059a6:	4638      	mov	r0, r7
 80059a8:	47c8      	blx	r9
 80059aa:	3001      	adds	r0, #1
 80059ac:	d01e      	beq.n	80059ec <_printf_common+0xa4>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	6922      	ldr	r2, [r4, #16]
 80059b2:	f003 0306 	and.w	r3, r3, #6
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	bf02      	ittt	eq
 80059ba:	68e5      	ldreq	r5, [r4, #12]
 80059bc:	6833      	ldreq	r3, [r6, #0]
 80059be:	1aed      	subeq	r5, r5, r3
 80059c0:	68a3      	ldr	r3, [r4, #8]
 80059c2:	bf0c      	ite	eq
 80059c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059c8:	2500      	movne	r5, #0
 80059ca:	4293      	cmp	r3, r2
 80059cc:	bfc4      	itt	gt
 80059ce:	1a9b      	subgt	r3, r3, r2
 80059d0:	18ed      	addgt	r5, r5, r3
 80059d2:	2600      	movs	r6, #0
 80059d4:	341a      	adds	r4, #26
 80059d6:	42b5      	cmp	r5, r6
 80059d8:	d11a      	bne.n	8005a10 <_printf_common+0xc8>
 80059da:	2000      	movs	r0, #0
 80059dc:	e008      	b.n	80059f0 <_printf_common+0xa8>
 80059de:	2301      	movs	r3, #1
 80059e0:	4652      	mov	r2, sl
 80059e2:	4641      	mov	r1, r8
 80059e4:	4638      	mov	r0, r7
 80059e6:	47c8      	blx	r9
 80059e8:	3001      	adds	r0, #1
 80059ea:	d103      	bne.n	80059f4 <_printf_common+0xac>
 80059ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f4:	3501      	adds	r5, #1
 80059f6:	e7c6      	b.n	8005986 <_printf_common+0x3e>
 80059f8:	18e1      	adds	r1, r4, r3
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	2030      	movs	r0, #48	@ 0x30
 80059fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a02:	4422      	add	r2, r4
 8005a04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a0c:	3302      	adds	r3, #2
 8005a0e:	e7c7      	b.n	80059a0 <_printf_common+0x58>
 8005a10:	2301      	movs	r3, #1
 8005a12:	4622      	mov	r2, r4
 8005a14:	4641      	mov	r1, r8
 8005a16:	4638      	mov	r0, r7
 8005a18:	47c8      	blx	r9
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	d0e6      	beq.n	80059ec <_printf_common+0xa4>
 8005a1e:	3601      	adds	r6, #1
 8005a20:	e7d9      	b.n	80059d6 <_printf_common+0x8e>
	...

08005a24 <_printf_i>:
 8005a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a28:	7e0f      	ldrb	r7, [r1, #24]
 8005a2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a2c:	2f78      	cmp	r7, #120	@ 0x78
 8005a2e:	4691      	mov	r9, r2
 8005a30:	4680      	mov	r8, r0
 8005a32:	460c      	mov	r4, r1
 8005a34:	469a      	mov	sl, r3
 8005a36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a3a:	d807      	bhi.n	8005a4c <_printf_i+0x28>
 8005a3c:	2f62      	cmp	r7, #98	@ 0x62
 8005a3e:	d80a      	bhi.n	8005a56 <_printf_i+0x32>
 8005a40:	2f00      	cmp	r7, #0
 8005a42:	f000 80d2 	beq.w	8005bea <_printf_i+0x1c6>
 8005a46:	2f58      	cmp	r7, #88	@ 0x58
 8005a48:	f000 80b9 	beq.w	8005bbe <_printf_i+0x19a>
 8005a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a54:	e03a      	b.n	8005acc <_printf_i+0xa8>
 8005a56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a5a:	2b15      	cmp	r3, #21
 8005a5c:	d8f6      	bhi.n	8005a4c <_printf_i+0x28>
 8005a5e:	a101      	add	r1, pc, #4	@ (adr r1, 8005a64 <_printf_i+0x40>)
 8005a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a64:	08005abd 	.word	0x08005abd
 8005a68:	08005ad1 	.word	0x08005ad1
 8005a6c:	08005a4d 	.word	0x08005a4d
 8005a70:	08005a4d 	.word	0x08005a4d
 8005a74:	08005a4d 	.word	0x08005a4d
 8005a78:	08005a4d 	.word	0x08005a4d
 8005a7c:	08005ad1 	.word	0x08005ad1
 8005a80:	08005a4d 	.word	0x08005a4d
 8005a84:	08005a4d 	.word	0x08005a4d
 8005a88:	08005a4d 	.word	0x08005a4d
 8005a8c:	08005a4d 	.word	0x08005a4d
 8005a90:	08005bd1 	.word	0x08005bd1
 8005a94:	08005afb 	.word	0x08005afb
 8005a98:	08005b8b 	.word	0x08005b8b
 8005a9c:	08005a4d 	.word	0x08005a4d
 8005aa0:	08005a4d 	.word	0x08005a4d
 8005aa4:	08005bf3 	.word	0x08005bf3
 8005aa8:	08005a4d 	.word	0x08005a4d
 8005aac:	08005afb 	.word	0x08005afb
 8005ab0:	08005a4d 	.word	0x08005a4d
 8005ab4:	08005a4d 	.word	0x08005a4d
 8005ab8:	08005b93 	.word	0x08005b93
 8005abc:	6833      	ldr	r3, [r6, #0]
 8005abe:	1d1a      	adds	r2, r3, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6032      	str	r2, [r6, #0]
 8005ac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ac8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005acc:	2301      	movs	r3, #1
 8005ace:	e09d      	b.n	8005c0c <_printf_i+0x1e8>
 8005ad0:	6833      	ldr	r3, [r6, #0]
 8005ad2:	6820      	ldr	r0, [r4, #0]
 8005ad4:	1d19      	adds	r1, r3, #4
 8005ad6:	6031      	str	r1, [r6, #0]
 8005ad8:	0606      	lsls	r6, r0, #24
 8005ada:	d501      	bpl.n	8005ae0 <_printf_i+0xbc>
 8005adc:	681d      	ldr	r5, [r3, #0]
 8005ade:	e003      	b.n	8005ae8 <_printf_i+0xc4>
 8005ae0:	0645      	lsls	r5, r0, #25
 8005ae2:	d5fb      	bpl.n	8005adc <_printf_i+0xb8>
 8005ae4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ae8:	2d00      	cmp	r5, #0
 8005aea:	da03      	bge.n	8005af4 <_printf_i+0xd0>
 8005aec:	232d      	movs	r3, #45	@ 0x2d
 8005aee:	426d      	negs	r5, r5
 8005af0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005af4:	4859      	ldr	r0, [pc, #356]	@ (8005c5c <_printf_i+0x238>)
 8005af6:	230a      	movs	r3, #10
 8005af8:	e011      	b.n	8005b1e <_printf_i+0xfa>
 8005afa:	6821      	ldr	r1, [r4, #0]
 8005afc:	6833      	ldr	r3, [r6, #0]
 8005afe:	0608      	lsls	r0, r1, #24
 8005b00:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b04:	d402      	bmi.n	8005b0c <_printf_i+0xe8>
 8005b06:	0649      	lsls	r1, r1, #25
 8005b08:	bf48      	it	mi
 8005b0a:	b2ad      	uxthmi	r5, r5
 8005b0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b0e:	4853      	ldr	r0, [pc, #332]	@ (8005c5c <_printf_i+0x238>)
 8005b10:	6033      	str	r3, [r6, #0]
 8005b12:	bf14      	ite	ne
 8005b14:	230a      	movne	r3, #10
 8005b16:	2308      	moveq	r3, #8
 8005b18:	2100      	movs	r1, #0
 8005b1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b1e:	6866      	ldr	r6, [r4, #4]
 8005b20:	60a6      	str	r6, [r4, #8]
 8005b22:	2e00      	cmp	r6, #0
 8005b24:	bfa2      	ittt	ge
 8005b26:	6821      	ldrge	r1, [r4, #0]
 8005b28:	f021 0104 	bicge.w	r1, r1, #4
 8005b2c:	6021      	strge	r1, [r4, #0]
 8005b2e:	b90d      	cbnz	r5, 8005b34 <_printf_i+0x110>
 8005b30:	2e00      	cmp	r6, #0
 8005b32:	d04b      	beq.n	8005bcc <_printf_i+0x1a8>
 8005b34:	4616      	mov	r6, r2
 8005b36:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b3a:	fb03 5711 	mls	r7, r3, r1, r5
 8005b3e:	5dc7      	ldrb	r7, [r0, r7]
 8005b40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b44:	462f      	mov	r7, r5
 8005b46:	42bb      	cmp	r3, r7
 8005b48:	460d      	mov	r5, r1
 8005b4a:	d9f4      	bls.n	8005b36 <_printf_i+0x112>
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d10b      	bne.n	8005b68 <_printf_i+0x144>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	07df      	lsls	r7, r3, #31
 8005b54:	d508      	bpl.n	8005b68 <_printf_i+0x144>
 8005b56:	6923      	ldr	r3, [r4, #16]
 8005b58:	6861      	ldr	r1, [r4, #4]
 8005b5a:	4299      	cmp	r1, r3
 8005b5c:	bfde      	ittt	le
 8005b5e:	2330      	movle	r3, #48	@ 0x30
 8005b60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b64:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005b68:	1b92      	subs	r2, r2, r6
 8005b6a:	6122      	str	r2, [r4, #16]
 8005b6c:	f8cd a000 	str.w	sl, [sp]
 8005b70:	464b      	mov	r3, r9
 8005b72:	aa03      	add	r2, sp, #12
 8005b74:	4621      	mov	r1, r4
 8005b76:	4640      	mov	r0, r8
 8005b78:	f7ff fee6 	bl	8005948 <_printf_common>
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d14a      	bne.n	8005c16 <_printf_i+0x1f2>
 8005b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b84:	b004      	add	sp, #16
 8005b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	f043 0320 	orr.w	r3, r3, #32
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	4833      	ldr	r0, [pc, #204]	@ (8005c60 <_printf_i+0x23c>)
 8005b94:	2778      	movs	r7, #120	@ 0x78
 8005b96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	6831      	ldr	r1, [r6, #0]
 8005b9e:	061f      	lsls	r7, r3, #24
 8005ba0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ba4:	d402      	bmi.n	8005bac <_printf_i+0x188>
 8005ba6:	065f      	lsls	r7, r3, #25
 8005ba8:	bf48      	it	mi
 8005baa:	b2ad      	uxthmi	r5, r5
 8005bac:	6031      	str	r1, [r6, #0]
 8005bae:	07d9      	lsls	r1, r3, #31
 8005bb0:	bf44      	itt	mi
 8005bb2:	f043 0320 	orrmi.w	r3, r3, #32
 8005bb6:	6023      	strmi	r3, [r4, #0]
 8005bb8:	b11d      	cbz	r5, 8005bc2 <_printf_i+0x19e>
 8005bba:	2310      	movs	r3, #16
 8005bbc:	e7ac      	b.n	8005b18 <_printf_i+0xf4>
 8005bbe:	4827      	ldr	r0, [pc, #156]	@ (8005c5c <_printf_i+0x238>)
 8005bc0:	e7e9      	b.n	8005b96 <_printf_i+0x172>
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	f023 0320 	bic.w	r3, r3, #32
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	e7f6      	b.n	8005bba <_printf_i+0x196>
 8005bcc:	4616      	mov	r6, r2
 8005bce:	e7bd      	b.n	8005b4c <_printf_i+0x128>
 8005bd0:	6833      	ldr	r3, [r6, #0]
 8005bd2:	6825      	ldr	r5, [r4, #0]
 8005bd4:	6961      	ldr	r1, [r4, #20]
 8005bd6:	1d18      	adds	r0, r3, #4
 8005bd8:	6030      	str	r0, [r6, #0]
 8005bda:	062e      	lsls	r6, r5, #24
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	d501      	bpl.n	8005be4 <_printf_i+0x1c0>
 8005be0:	6019      	str	r1, [r3, #0]
 8005be2:	e002      	b.n	8005bea <_printf_i+0x1c6>
 8005be4:	0668      	lsls	r0, r5, #25
 8005be6:	d5fb      	bpl.n	8005be0 <_printf_i+0x1bc>
 8005be8:	8019      	strh	r1, [r3, #0]
 8005bea:	2300      	movs	r3, #0
 8005bec:	6123      	str	r3, [r4, #16]
 8005bee:	4616      	mov	r6, r2
 8005bf0:	e7bc      	b.n	8005b6c <_printf_i+0x148>
 8005bf2:	6833      	ldr	r3, [r6, #0]
 8005bf4:	1d1a      	adds	r2, r3, #4
 8005bf6:	6032      	str	r2, [r6, #0]
 8005bf8:	681e      	ldr	r6, [r3, #0]
 8005bfa:	6862      	ldr	r2, [r4, #4]
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	4630      	mov	r0, r6
 8005c00:	f7fa fb06 	bl	8000210 <memchr>
 8005c04:	b108      	cbz	r0, 8005c0a <_printf_i+0x1e6>
 8005c06:	1b80      	subs	r0, r0, r6
 8005c08:	6060      	str	r0, [r4, #4]
 8005c0a:	6863      	ldr	r3, [r4, #4]
 8005c0c:	6123      	str	r3, [r4, #16]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c14:	e7aa      	b.n	8005b6c <_printf_i+0x148>
 8005c16:	6923      	ldr	r3, [r4, #16]
 8005c18:	4632      	mov	r2, r6
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	4640      	mov	r0, r8
 8005c1e:	47d0      	blx	sl
 8005c20:	3001      	adds	r0, #1
 8005c22:	d0ad      	beq.n	8005b80 <_printf_i+0x15c>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	079b      	lsls	r3, r3, #30
 8005c28:	d413      	bmi.n	8005c52 <_printf_i+0x22e>
 8005c2a:	68e0      	ldr	r0, [r4, #12]
 8005c2c:	9b03      	ldr	r3, [sp, #12]
 8005c2e:	4298      	cmp	r0, r3
 8005c30:	bfb8      	it	lt
 8005c32:	4618      	movlt	r0, r3
 8005c34:	e7a6      	b.n	8005b84 <_printf_i+0x160>
 8005c36:	2301      	movs	r3, #1
 8005c38:	4632      	mov	r2, r6
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	4640      	mov	r0, r8
 8005c3e:	47d0      	blx	sl
 8005c40:	3001      	adds	r0, #1
 8005c42:	d09d      	beq.n	8005b80 <_printf_i+0x15c>
 8005c44:	3501      	adds	r5, #1
 8005c46:	68e3      	ldr	r3, [r4, #12]
 8005c48:	9903      	ldr	r1, [sp, #12]
 8005c4a:	1a5b      	subs	r3, r3, r1
 8005c4c:	42ab      	cmp	r3, r5
 8005c4e:	dcf2      	bgt.n	8005c36 <_printf_i+0x212>
 8005c50:	e7eb      	b.n	8005c2a <_printf_i+0x206>
 8005c52:	2500      	movs	r5, #0
 8005c54:	f104 0619 	add.w	r6, r4, #25
 8005c58:	e7f5      	b.n	8005c46 <_printf_i+0x222>
 8005c5a:	bf00      	nop
 8005c5c:	08005da9 	.word	0x08005da9
 8005c60:	08005dba 	.word	0x08005dba

08005c64 <memmove>:
 8005c64:	4288      	cmp	r0, r1
 8005c66:	b510      	push	{r4, lr}
 8005c68:	eb01 0402 	add.w	r4, r1, r2
 8005c6c:	d902      	bls.n	8005c74 <memmove+0x10>
 8005c6e:	4284      	cmp	r4, r0
 8005c70:	4623      	mov	r3, r4
 8005c72:	d807      	bhi.n	8005c84 <memmove+0x20>
 8005c74:	1e43      	subs	r3, r0, #1
 8005c76:	42a1      	cmp	r1, r4
 8005c78:	d008      	beq.n	8005c8c <memmove+0x28>
 8005c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c82:	e7f8      	b.n	8005c76 <memmove+0x12>
 8005c84:	4402      	add	r2, r0
 8005c86:	4601      	mov	r1, r0
 8005c88:	428a      	cmp	r2, r1
 8005c8a:	d100      	bne.n	8005c8e <memmove+0x2a>
 8005c8c:	bd10      	pop	{r4, pc}
 8005c8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c96:	e7f7      	b.n	8005c88 <memmove+0x24>

08005c98 <_sbrk_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4d06      	ldr	r5, [pc, #24]	@ (8005cb4 <_sbrk_r+0x1c>)
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	4608      	mov	r0, r1
 8005ca2:	602b      	str	r3, [r5, #0]
 8005ca4:	f7fb fda2 	bl	80017ec <_sbrk>
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	d102      	bne.n	8005cb2 <_sbrk_r+0x1a>
 8005cac:	682b      	ldr	r3, [r5, #0]
 8005cae:	b103      	cbz	r3, 8005cb2 <_sbrk_r+0x1a>
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
 8005cb4:	200002a8 	.word	0x200002a8

08005cb8 <memcpy>:
 8005cb8:	440a      	add	r2, r1
 8005cba:	4291      	cmp	r1, r2
 8005cbc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005cc0:	d100      	bne.n	8005cc4 <memcpy+0xc>
 8005cc2:	4770      	bx	lr
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cce:	4291      	cmp	r1, r2
 8005cd0:	d1f9      	bne.n	8005cc6 <memcpy+0xe>
 8005cd2:	bd10      	pop	{r4, pc}

08005cd4 <_realloc_r>:
 8005cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd8:	4680      	mov	r8, r0
 8005cda:	4615      	mov	r5, r2
 8005cdc:	460c      	mov	r4, r1
 8005cde:	b921      	cbnz	r1, 8005cea <_realloc_r+0x16>
 8005ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	f7ff bc4b 	b.w	8005580 <_malloc_r>
 8005cea:	b92a      	cbnz	r2, 8005cf8 <_realloc_r+0x24>
 8005cec:	f7ff fbdc 	bl	80054a8 <_free_r>
 8005cf0:	2400      	movs	r4, #0
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf8:	f000 f81a 	bl	8005d30 <_malloc_usable_size_r>
 8005cfc:	4285      	cmp	r5, r0
 8005cfe:	4606      	mov	r6, r0
 8005d00:	d802      	bhi.n	8005d08 <_realloc_r+0x34>
 8005d02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005d06:	d8f4      	bhi.n	8005cf2 <_realloc_r+0x1e>
 8005d08:	4629      	mov	r1, r5
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	f7ff fc38 	bl	8005580 <_malloc_r>
 8005d10:	4607      	mov	r7, r0
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d0ec      	beq.n	8005cf0 <_realloc_r+0x1c>
 8005d16:	42b5      	cmp	r5, r6
 8005d18:	462a      	mov	r2, r5
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	bf28      	it	cs
 8005d1e:	4632      	movcs	r2, r6
 8005d20:	f7ff ffca 	bl	8005cb8 <memcpy>
 8005d24:	4621      	mov	r1, r4
 8005d26:	4640      	mov	r0, r8
 8005d28:	f7ff fbbe 	bl	80054a8 <_free_r>
 8005d2c:	463c      	mov	r4, r7
 8005d2e:	e7e0      	b.n	8005cf2 <_realloc_r+0x1e>

08005d30 <_malloc_usable_size_r>:
 8005d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d34:	1f18      	subs	r0, r3, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	bfbc      	itt	lt
 8005d3a:	580b      	ldrlt	r3, [r1, r0]
 8005d3c:	18c0      	addlt	r0, r0, r3
 8005d3e:	4770      	bx	lr

08005d40 <_init>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	bf00      	nop
 8005d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d46:	bc08      	pop	{r3}
 8005d48:	469e      	mov	lr, r3
 8005d4a:	4770      	bx	lr

08005d4c <_fini>:
 8005d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4e:	bf00      	nop
 8005d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d52:	bc08      	pop	{r3}
 8005d54:	469e      	mov	lr, r3
 8005d56:	4770      	bx	lr
